{
   "Ecad-Globoplay": {
      "CDCWorker": {
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {}
            }
         }
      },
      "ConsoleApp1": {
         "Program": {
            "Program": {
               "type": "class",
               "members": {
                  "Main": {
                     "type": "method",
                     "raw": "private static void Main(string[] args)\n    {\n\n    }"
                  }
               }
            }
         },
         "Startup": {
            "Startup": {
               "type": "class",
               "members": {
                  "Configuration": {
                     "type": "property"
                  },
                  "ConfigureServices": {
                     "type": "method",
                     "raw": "public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddDbContext<AzureDbContext>(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n            \n\n        }",
                     "dependencies": [
                        {
                           "type": "options",
                           "method": "UseSqlServer"
                        },
                        {
                           "type": "Configuration",
                           "method": "GetConnectionString"
                        }
                     ]
                  },
                  "Configure": {
                     "type": "method",
                     "raw": "public void Configure(IApplicationBuilder app)\n        {\n           \n        }"
                  }
               }
            }
         }
      },
      "ConsoleApp2": {
         "Program": {
            "Program": {
               "type": "class",
               "members": {
                  "Main": {
                     "type": "method",
                     "raw": "public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }"
                  },
                  "CreateHostBuilder": {
                     "type": "method",
                     "raw": "public static IHostBuilder CreateHostBuilder(string[] args) =>\n          Host.CreateDefaultBuilder(args)\n              .ConfigureAppConfiguration((hostingContext, config) =>\n              {\n                  config.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true);\n              }",
                     "dependencies": [
                        {
                           "type": "Host",
                           "method": "CreateDefaultBuilder"
                        },
                        {
                           "type": "config",
                           "method": "AddJsonFile"
                        }
                     ]
                  }
               }
            }
         }
      },
      "DemonstrativeWorker": {
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {}
            }
         }
      },
      "DistributionWorker": {
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {}
            }
         }
      },
      "EcadGloboplay.DistribuitionWorker": {
         "Program": {
            "Program": {
               "type": "class",
               "members": {}
            }
         },
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {}
            }
         }
      },
      "EcadGloboplay.Domain": {
         "data": {
            "EcadDbContext": {
               "EcadDbContext": {
                  "type": "class",
                  "members": {
                     "DistConsolidacao": {
                        "type": "property"
                     },
                     "DistAssociacao": {
                        "type": "property"
                     },
                     "DistCompetencia": {
                        "type": "property"
                     },
                     "DistConsolidacaoAud": {
                        "type": "property"
                     },
                     "DistConsolidacaoDtl": {
                        "type": "property"
                     },
                     "DistExecucaoSumario": {
                        "type": "property"
                     },
                     "DistPendente": {
                        "type": "property"
                     },
                     "DistPonto": {
                        "type": "property"
                     },
                     "DistRetido": {
                        "type": "property"
                     },
                     "DistRol": {
                        "type": "property"
                     },
                     "DistRolOrigemExecucao": {
                        "type": "property"
                     },
                     "DistTitular": {
                        "type": "property"
                     },
                     "Distribuicao": {
                        "type": "property"
                     },
                     "MotivoRetencao": {
                        "type": "property"
                     },
                     "DemonstrativoTitular": {
                        "type": "property"
                     },
                     "Rubrica": {
                        "type": "property"
                     },
                     "SdAvRolObraFonoAudio": {
                        "type": "property"
                     },
                     "OnConfiguring": {
                        "type": "method",
                        "raw": "protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            if (!optionsBuilder.IsConfigured)\n            {\n                optionsBuilder\n                    .UseLoggerFactory(MyLoggerFactory)  // LoggerFactory should be defined\n                    .EnableSensitiveDataLogging()\n                    .UseSqlServer(\n                        optionsBuilder.Options.FindExtension<Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension>()?.ConnectionString,\n                        sqlServerOptionsAction: sqlOptions =>\n                        {\n                            sqlOptions.CommandTimeout(300);\n                            sqlOptions.EnableRetryOnFailure(\n                                maxRetryCount: 5, // Número máximo de tentativas\n                                maxRetryDelay: TimeSpan.FromSeconds(10), // Tempo máximo de espera entre tentativas\n                                errorNumbersToAdd: null); // Deixe nulo para usar os padrões\n                        });\n            }   \n        }",
                        "dependencies": [
                           {
                              "type": "sqlOptions",
                              "method": "CommandTimeout"
                           },
                           {
                              "type": "sqlOptions",
                              "method": "EnableRetryOnFailure"
                           },
                           {
                              "type": "TimeSpan",
                              "method": "FromSeconds"
                           }
                        ]
                     },
                     "OnModelCreating": {
                        "type": "method",
                        "raw": "protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            //ConfigureDistConsolidacao(modelBuilder.Entity<DistConsolidacao>());\n            //ConfigureDistAssociacao(modelBuilder.Entity<DistAssociacao>());\n            //ConfigureDistCompetencia(modelBuilder.Entity<DistCompetencia>());\n            //ConfigureDistConsolidacaoAud(modelBuilder.Entity<DistConsolidacaoAud>());\n            //ConfigureDistConsolidacaoDtl(modelBuilder.Entity<DistConsolidacaoDtl>());\n            //ConfigureDistExecucaoSumario(modelBuilder.Entity<DistExecucaoSumario>());\n            //ConfigureDistPendente(modelBuilder.Entity<DistPendente>());\n            //ConfigureDistPonto(modelBuilder.Entity<DistPonto>());\n            //ConfigureDistRetido(modelBuilder.Entity<DistRetido>());\n            //ConfigureDistribuicao(modelBuilder.Entity<Distribuicao>());\n            //ConfigureDistRol(modelBuilder.Entity<DistRol>());\n            //ConfigureDistRolOrigemExecucao(modelBuilder.Entity<DistRolOrigemExecucao>());\n            //ConfigureDistTitular(modelBuilder.Entity<DistTitular>());\n            //ConfigureMotivoRetencao(modelBuilder.Entity<MotivoRetencao>());\n            //ConfigureDemonstrativoTitular(modelBuilder.Entity<RelDemonstrativoTitular>());\n            //ConfigureRubrica(modelBuilder.Entity<Rubrica>());\n            base.OnModelCreating(modelBuilder);\n        }",
                        "dependencies": [
                           {
                              "type": "base",
                              "method": "OnModelCreating"
                           }
                        ]
                     },
                     "ConfigureDistConsolidacao": {
                        "type": "method",
                        "raw": "private void ConfigureDistConsolidacao(EntityTypeBuilder<DistConsolidacao> builder)\n        {\n            builder.ToTable(\"DIST_CONSOLIDACAO\");\n            builder.Property(e => e.CodConsolidDistrib).HasColumnName(\"cod_consoliddistrib\").HasDefaultValueSql(\"newid()\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistConsolidacao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistAssociacao": {
                        "type": "method",
                        "raw": "private void ConfigureDistAssociacao(EntityTypeBuilder<DistAssociacao> builder)\n        {\n            builder.ToTable(\"DIST_ASSOCIACAO\");\n            builder.HasKey(e => e.CodDistAssociacao);\n            builder.Property(e => e.CodDistAssociacao).HasColumnName(\"cod_distassociacao\");\n\n            builder.Property(e => e.VlrAssociacao)\n                   .HasPrecision(18, 9)\n                   .HasColumnName(\"vlr_associacao\");\n\n            builder.Property(e => e.VlrAssocConvPctVerba)\n                   .HasPrecision(18, 9)\n                   .HasColumnName(\"vlr_assocconvpctverba\");\n\n            builder.Property(e => e.VlrAssocCorrecao)\n                   .HasPrecision(18, 9)\n                   .HasColumnName(\"vlr_assoccorrecao\");\n           \n            builder.HasOne<DistTitular>() \n                   .WithMany()\n                   .HasForeignKey(e => e.CodDistTitular);\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistAssociacao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistAssociacao>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistAssociacao>",
                              "method": "Property"
                           },
                           {
                              "type": "EntityTypeBuilder<DistAssociacao>",
                              "method": "Property"
                           },
                           {
                              "type": "EntityTypeBuilder<DistAssociacao>",
                              "method": "Property"
                           },
                           {
                              "type": "EntityTypeBuilder<DistAssociacao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistCompetencia": {
                        "type": "method",
                        "raw": "private void ConfigureDistCompetencia(EntityTypeBuilder<DistCompetencia> builder)\n        {\n            builder.ToTable(\"DIST_COMPETENCIA\");\n            builder.HasKey(e => e.CodCompetencia);\n            builder.Property(e => e.CodCompetencia).HasColumnName(\"cod_competencia\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistCompetencia>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistCompetencia>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistCompetencia>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistConsolidacaoAud": {
                        "type": "method",
                        "raw": "private void ConfigureDistConsolidacaoAud(EntityTypeBuilder<DistConsolidacaoAud> builder)\n        {\n            builder.ToTable(\"DIST_CONSOLIDACAO_AUD\");\n            builder.HasKey(e => e.CodConsolidDistribAudio);\n            builder.Property(e => e.CodConsolidDistribAudio).HasPrecision(18, 9);\n            builder.Property(e => e.CodConsolidDistribAudio).HasColumnName(\"cod_consoliddistribaudio\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoAud>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoAud>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoAud>",
                              "method": "Property"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoAud>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistConsolidacaoDtl": {
                        "type": "method",
                        "raw": "private void ConfigureDistConsolidacaoDtl(EntityTypeBuilder<DistConsolidacaoDtl> builder)\n        {\n            builder.ToTable(\"DIST_CONSOLIDACAO_DTL\");\n            builder.HasKey(e => e.CodConsolidDistribDtl);\n            builder.Property(e => e.CodConsolidDistribDtl).HasColumnName(\"cod_consoliddistribdtl\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoDtl>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoDtl>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoDtl>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistExecucaoSumario": {
                        "type": "method",
                        "raw": "private void ConfigureDistExecucaoSumario(EntityTypeBuilder<DistExecucaoSumario> builder)\n        {\n            builder.ToTable(\"DIST_EXECUCAO_SUMARIO\");\n            builder.HasKey(e => e.CodDistExecucaoSumario);\n            builder.Property(e => e.CodDistExecucaoSumario).HasColumnName(\"cod_distexecucaosumario\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistExecucaoSumario>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistExecucaoSumario>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistExecucaoSumario>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistPendente": {
                        "type": "method",
                        "raw": "private void ConfigureDistPendente(EntityTypeBuilder<DistPendente> builder)\n        {\n            builder.ToTable(\"DIST_PENDENTE\");\n            builder.HasKey(e => e.CodDistPendente);\n            builder.Property(e => e.CodDistPendente).HasColumnName(\"cod_distpendente\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistPendente>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistPendente>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistPendente>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistPonto": {
                        "type": "method",
                        "raw": "private void ConfigureDistPonto(EntityTypeBuilder<DistPonto> builder)\n        {\n            builder.ToTable(\"DIST_PONTO\");\n            builder.HasKey(e => e.CodPontoDistribuicao);\n            builder.Property(e => e.CodPontoDistribuicao).HasColumnName(\"cod_pontodistribuicao\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistPonto>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistPonto>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistPonto>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistRetido": {
                        "type": "method",
                        "raw": "private void ConfigureDistRetido(EntityTypeBuilder<DistRetido> builder)\n        {\n            builder.ToTable(\"DIST_RETIDO\");\n            builder.HasKey(e => e.CodDistRetido);\n            builder.Property(e => e.CodDistRetido).HasColumnName(\"cod_distretido\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistRetido>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRetido>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRetido>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistribuicao": {
                        "type": "method",
                        "raw": "private void ConfigureDistribuicao(EntityTypeBuilder<Distribuicao> builder)\n        {\n            builder.ToTable(\"DISTRIBUICAO\");\n            builder.HasKey(e => e.CodDistribuicao);\n            builder.Property(e => e.CodDistribuicao).HasColumnName(\"cod_distribuicao\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<Distribuicao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<Distribuicao>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<Distribuicao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistRol": {
                        "type": "method",
                        "raw": "private void ConfigureDistRol(EntityTypeBuilder<DistRol> builder)\n        {\n            builder.ToTable(\"DIST_ROL\");\n            builder.HasKey(e => e.CodDistRol);\n            builder.Property(e => e.CodDistRol).HasColumnName(\"cod_distrol\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistRol>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRol>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRol>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistRolOrigemExecucao": {
                        "type": "method",
                        "raw": "private void ConfigureDistRolOrigemExecucao(EntityTypeBuilder<DistRolOrigemExecucao> builder)\n        {\n            builder.ToTable(\"DIST_ROLORIGEM_EXECUCAO\");\n            builder.HasKey(e => e.CodDistOrigemExecucao);\n            builder.Property(e => e.CodDistOrigemExecucao).HasColumnName(\"cod_distorigemexecucao\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistRolOrigemExecucao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRolOrigemExecucao>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRolOrigemExecucao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistTitular": {
                        "type": "method",
                        "raw": "private void ConfigureDistTitular(EntityTypeBuilder<DistTitular> builder)\n        {\n            builder.ToTable(\"DIST_TITULAR\");\n            builder.HasKey(e => e.CodDistTitular);\n            builder.Property(e => e.CodDistTitular).HasColumnName(\"cod_disttitular\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistTitular>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistTitular>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistTitular>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureMotivoRetencao": {
                        "type": "method",
                        "raw": "private void ConfigureMotivoRetencao(EntityTypeBuilder<MotivoRetencao> builder)\n        {\n            builder.ToTable(\"MOTIVO_RETENCAO\");\n            builder.HasKey(e => e.SglMotivoRetencao);\n            builder.Property(e => e.SglMotivoRetencao).HasColumnName(\"sgl_motivoretencao\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<MotivoRetencao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<MotivoRetencao>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<MotivoRetencao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDemonstrativoTitular": {
                        "type": "method",
                        "raw": "private void ConfigureDemonstrativoTitular(EntityTypeBuilder<RelDemonstrativoTitular> builder)\n        {\n            builder.ToTable(\"REL_DEMONSTRATIVO_TITULAR\");\n            builder.HasKey(e => e.CodDistTitular);\n            builder.Property(e => e.CodDistTitular).HasColumnName(\"cod_disttitular\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<RelDemonstrativoTitular>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<RelDemonstrativoTitular>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<RelDemonstrativoTitular>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureRubrica": {
                        "type": "method",
                        "raw": "private void ConfigureRubrica(EntityTypeBuilder<Rubrica> builder)\n        {\n            builder.ToTable(\"RUBRICA\");\n            builder.HasKey(e => e.CodRubrica);\n            builder.Property(e => e.CodRubrica).HasColumnName(\"cod_rubrica\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<Rubrica>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<Rubrica>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<Rubrica>",
                              "method": "Property"
                           }
                        ]
                     }
                  }
               }
            }
         },
         "DTO": {
            "AudioVisualGloboplay": {
               "AudioVisualGloboplay": {
                  "type": "class",
                  "members": {
                     "CodObraAudioEcad": {
                        "type": "property"
                     },
                     "NroFatorDistribuicao": {
                        "type": "property"
                     },
                     "VlrFatorDistribuicao": {
                        "type": "property"
                     },
                     "SomaFatorDistribuicao": {
                        "type": "property"
                     },
                     "VlrPonto": {
                        "type": "property"
                     },
                     "NomTituloOrig": {
                        "type": "property"
                     },
                     "NomTituloTrad": {
                        "type": "property"
                     },
                     "IndSituacaoAudiovisual": {
                        "type": "property"
                     },
                     "NomCapEpisodioOrig": {
                        "type": "property"
                     },
                     "NomCapEpisodioTraduzido": {
                        "type": "property"
                     },
                     "Competencia": {
                        "type": "property"
                     },
                     "Fonogramas": {
                        "type": "property"
                     },
                     "ObrasMusicais": {
                        "type": "property"
                     },
                     "TitularesFonograma": {
                        "type": "property"
                     },
                     "TitularesObra": {
                        "type": "property"
                     },
                     "CodDistribuicao": {
                        "type": "property"
                     },
                     "CodDistRol": {
                        "type": "property"
                     },
                     "CodRolMusical": {
                        "type": "property"
                     },
                     "DatExibicaoAudio": {
                        "type": "property"
                     },
                     "CodObraFonoAudio": {
                        "type": "property"
                     },
                     "DatInicioRol": {
                        "type": "property"
                     },
                     "DatFimRol": {
                        "type": "property"
                     },
                     "CodFonteRol": {
                        "type": "property"
                     },
                     "CodTipRol": {
                        "type": "property"
                     },
                     "CodOrigemRol": {
                        "type": "property"
                     },
                     "CodUsuario": {
                        "type": "property"
                     },
                     "TipCaracteristicadist": {
                        "type": "property"
                     },
                     "GerarConsolidacaoConexa": {
                        "type": "method",
                        "raw": "public IEnumerable<ConsolidacaoCC> GerarConsolidacaoConexa()\n        {\n            if (this.Fonogramas.Count() > 0)\n            {\n                var verbaConexa = (Competencia.VlrVerbaConexa * VlrFatorDistribuicao) / Competencia.VerbaTotal;\n\n                var consolidacoesCC = Fonogramas.Select(x => new ConsolidacaoCC()\n                {\n                    CodAudioVisual = this.CodObraAudioEcad,\n                    CodFonograma = x.Fonograma,\n                    Categoria = x.CaracteristicaDistribuicao,\n                    OcorrenciasAudiovisual = this.NroFatorDistribuicao,\n                    ExecucoesMusica = x.QtdDuracaoMusica,\n                    PesoDaCategoria = EnumHelper.GetEnumValue(x.CaracteristicaDistribuicao)\n                }).ToList();\n\n                var group = consolidacoesCC.GroupBy(item => item.Categoria)\n                            .Select(grupo => new\n                            {\n                                Categoria = grupo.Key,\n                                Soma = grupo.Sum(item => item.ExecucoesMusica)\n                            });\n\n                foreach (var cc in consolidacoesCC)\n                {\n                    cc.SomaExecucaoDasCaracteristica = group.Where(group => group.Categoria == cc.Categoria).Single().Soma;\n                    cc.TotalExecucoes = cc.SomaExecucaoDasCaracteristica * cc.OcorrenciasAudiovisual;\n                    cc.TotalExecucoesXPesoCategoria = cc.TotalExecucoes * cc.PesoDaCategoria.Value;\n                    \n                }\n\n                var distinct = consolidacoesCC.DistinctBy(p => p.Categoria);\n\n                var group2 = distinct.GroupBy(item => item.Categoria)\n                        .Select(grupo => new\n                        {\n                            Categoria = grupo.Key,\n                            Soma = grupo.Sum(item => item.TotalExecucoesXPesoCategoria)\n                        });\n\n\n                foreach (var aa in consolidacoesCC)\n                {\n                    var soma = group2.Sum(g => g.Soma);\n                    aa.Ponto = (verbaConexa / soma) * (aa.TotalExecucoesXPesoCategoria / aa.TotalExecucoes);\n\n                   \n                };\n\n\n                Console.WriteLine(\"Consolidacao CC\");\n                Console.WriteLine(JsonSerializer.Serialize(consolidacoesCC));\n\n                return consolidacoesCC;\n            }\n            else\n                return null;\n        }",
                        "dependencies": [
                           {
                              "type": "Fonogramas",
                              "method": "Count"
                           },
                           {
                              "type": "Fonogramas",
                              "method": "Select"
                           },
                           {
                              "type": "EnumHelper",
                              "method": "GetEnumValue"
                           },
                           {
                              "type": "consolidacoesCC",
                              "method": "GroupBy"
                           },
                           {
                              "type": "grupo",
                              "method": "Sum"
                           },
                           {
                              "type": "group",
                              "method": "Where"
                           },
                           {
                              "type": "consolidacoesCC",
                              "method": "DistinctBy"
                           },
                           {
                              "type": "distinct",
                              "method": "GroupBy"
                           },
                           {
                              "type": "grupo",
                              "method": "Sum"
                           },
                           {
                              "type": "group2",
                              "method": "Sum"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "JsonSerializer",
                              "method": "Serialize"
                           }
                        ]
                     },
                     "GerarConsolidacaoAutoral": {
                        "type": "method",
                        "raw": "public IEnumerable<ConsolidacaoAA> GerarConsolidacaoAutoral()\n        {\n            try\n            {\n                if (this.ObrasMusicais.Count() > 0)\n                {\n                    var verbaAutoral = (Competencia.VlrVerbaAutoral * VlrFatorDistribuicao) / Competencia.VerbaTotal;\n\n                    var consolidacoesAA = ObrasMusicais.Select(x => new ConsolidacaoAA()\n                    {\n                        CodAudioVisual = this.CodObraAudioEcad,\n                        CodObra = x.CodObraMusEcad,\n                        Categoria = x.CaracteristicaDistribuicao,\n                        OcorrenciasAudiovisual = this.NroFatorDistribuicao,\n                        ExecucoesMusica = x.QtdDuracaoMusica,\n                        PesoDaCategoria = EnumHelper.GetEnumValue(x.CaracteristicaDistribuicao)\n                    }).Where(x => x.TipParteRepresentada == \"AA\").ToList();\n\n                    var group = consolidacoesAA.GroupBy(item => item.Categoria)\n                                .Select(grupo => new\n                                {\n                                    Categoria = grupo.Key,\n                                    Soma = grupo.Sum(item => item.ExecucoesMusica)\n                                });\n\n                    foreach (var cc in consolidacoesAA)\n                    {\n                        cc.SomaExecucaoDasCaracteristica = group.Where(group => group.Categoria == cc.Categoria).Single().Soma;\n                        cc.TotalExecucoes = cc.SomaExecucaoDasCaracteristica * cc.OcorrenciasAudiovisual;\n                        cc.TotalExecucoesXPesoCategoria = cc.TotalExecucoes * cc.PesoDaCategoria.Value;\n                    }\n\n                    var distinct = consolidacoesAA.DistinctBy(p => p.Categoria);\n\n                    var group2 = distinct.GroupBy(item => item.Categoria)\n                            .Select(grupo => new\n                            {\n                                Categoria = grupo.Key,\n                                Soma = grupo.Sum(item => item.TotalExecucoesXPesoCategoria)\n                            });\n\n\n                    foreach (var aa in consolidacoesAA)\n                    {\n                        var soma = group2.Sum(g => g.Soma);\n                        aa.Ponto = (verbaAutoral / soma) * (aa.TotalExecucoesXPesoCategoria / aa.TotalExecucoes);\n                    }\n\n                    Console.WriteLine(\"Consolidacao AA\");\n                    Console.WriteLine(JsonSerializer.Serialize(consolidacoesAA));\n\n                    return consolidacoesAA;\n                }\n                else\n                    return null;\n            }\n            catch (Exception ex) { throw ex; }\n        }",
                        "dependencies": [
                           {
                              "type": "ObrasMusicais",
                              "method": "Count"
                           },
                           {
                              "type": "ObrasMusicais",
                              "method": "Select"
                           },
                           {
                              "type": "EnumHelper",
                              "method": "GetEnumValue"
                           },
                           {
                              "type": "consolidacoesAA",
                              "method": "GroupBy"
                           },
                           {
                              "type": "grupo",
                              "method": "Sum"
                           },
                           {
                              "type": "group",
                              "method": "Where"
                           },
                           {
                              "type": "consolidacoesAA",
                              "method": "DistinctBy"
                           },
                           {
                              "type": "distinct",
                              "method": "GroupBy"
                           },
                           {
                              "type": "grupo",
                              "method": "Sum"
                           },
                           {
                              "type": "group2",
                              "method": "Sum"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "JsonSerializer",
                              "method": "Serialize"
                           }
                        ]
                     },
                     "GetAutor": {
                        "type": "method",
                        "raw": "public TitularObra GetAutor(Int64? CodObraMuseEcad)\n        {\n            return TitularesObra.Where(x => x.CodObraMusEcad == CodObraMuseEcad && x.CodCategoria.Trim() == \"A\").FirstOrDefault();\n\n        }",
                        "dependencies": [
                           {
                              "type": "TitularesObra",
                              "method": "Where"
                           },
                           {
                              "type": "CodCategoria",
                              "method": "Trim"
                           }
                        ]
                     },
                     "GetInterpretes": {
                        "type": "method",
                        "raw": "public string GetInterpretes(Int64 CodFonograma)\n        {\n            if (TitularesFonograma != null && TitularesFonograma.Count() > 0)\n            {\n                string interpretes = string.Empty;\n\n                foreach (var titFono in TitularesFonograma.Where(x => x.CodCategoria.Trim() == \"I\" && x.CodFonograma == CodFonograma))\n                {\n                    interpretes += titFono.NomTitular + \" / \";\n                }\n\n                interpretes = interpretes.Length > 3 ? interpretes.Substring(0, interpretes.Length - 3) : interpretes;\n\n                return interpretes;\n            }\n            else\n                return \"\";         \n        }",
                        "dependencies": [
                           {
                              "type": "TitularesFonograma",
                              "method": "Count"
                           },
                           {
                              "type": "TitularesFonograma",
                              "method": "Where"
                           },
                           {
                              "type": "CodCategoria",
                              "method": "Trim"
                           },
                           {
                              "type": "interpretes",
                              "method": "Substring"
                           }
                        ]
                     }
                  }
               }
            },
            "Competencia": {
               "Competencia": {
                  "type": "class",
                  "members": {
                     "CodCompetencia": {
                        "type": "property"
                     },
                     "VlrVerbaAutoral": {
                        "type": "property"
                     },
                     "VlrVerbaConexa": {
                        "type": "property"
                     },
                     "VlrVerbaSocietaria": {
                        "type": "property"
                     }
                  }
               }
            },
            "ConsolidacaoUtils": {
               "ConsolidacaoUtils": {
                  "type": "class",
                  "members": {
                     "GerarConsolidacao": {
                        "type": "method",
                        "raw": "public static ConsolidacaoDTO GerarConsolidacao(AudioVisualGloboplay audioVisual)\n        {\n            var consolidacaoCC = audioVisual.GerarConsolidacaoConexa();\n            var consolidacaoAA = audioVisual.GerarConsolidacaoAutoral();\n\n            var dadosConsolidacaoAA = InsereDadosConsolidacao(audioVisual);\n            var dadosConsolidacaoDtlAA = InsereDadosConsolidacaoDtl(audioVisual, dadosConsolidacaoAA, \"AA\");\n\n            var dadosConsolidacaoCC = InsereDadosConsolidacao(audioVisual);\n            var dadosConsolidacaoDtlCC = InsereDadosConsolidacaoDtl(audioVisual, dadosConsolidacaoCC, \"CC\");\n\n            return ConsolidacaoDTO.Create(consolidacaoCC, consolidacaoAA, dadosConsolidacaoAA, dadosConsolidacaoDtlAA, dadosConsolidacaoCC, dadosConsolidacaoDtlCC);\n        }",
                        "dependencies": [
                           {
                              "type": "AudioVisualGloboplay",
                              "method": "GerarConsolidacaoConexa"
                           },
                           {
                              "type": "AudioVisualGloboplay",
                              "method": "GerarConsolidacaoAutoral"
                           },
                           {
                              "type": "ConsolidacaoDTO",
                              "method": "Create"
                           }
                        ]
                     },
                     "InsereDadosConsolidacao": {
                        "type": "method",
                        "raw": "private static DistConsolidacao InsereDadosConsolidacao(AudioVisualGloboplay audioVisual)\n        {\n            var consolidacao = new DistConsolidacao\n            {\n                CodDistribuicao = audioVisual.CodDistribuicao,\n                CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                DatProcessamento = DateTime.UtcNow,\n                TipCaracteristicaDist = \"DM\",\n\n            };\n            return consolidacao;\n        }"
                     },
                     "InsereDadosConsolidacaoDtl": {
                        "type": "method",
                        "raw": "private static DistConsolidacaoDtl InsereDadosConsolidacaoDtl(AudioVisualGloboplay audioVisual, DistConsolidacao consolidacao, string parteRepresentada)\n        {\n            var valorRendimento = 0M;\n\n            if (parteRepresentada == \"AA\")\n                valorRendimento = (audioVisual.Competencia.VlrVerbaAutoral * audioVisual.VlrFatorDistribuicao) / audioVisual.Competencia.VerbaTotal;\n            else\n                valorRendimento = (audioVisual.Competencia.VlrVerbaConexa * audioVisual.VlrFatorDistribuicao) / audioVisual.Competencia.VerbaTotal;\n\n            var consolidacaoDtl = new DistConsolidacaoDtl\n            {\n                ConsolidDistrib = consolidacao,\n                NroExecucoes = audioVisual.NroFatorDistribuicao,\n                TipParteRepresentada = parteRepresentada,\n                NroExecIncorp = 0,\n                VlrRendimentoExecucao = valorRendimento,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao,\n                NroExecRefdgInc = 0,\n                TipExecucao = \"S\",\n                TipSituacaoExecucao = \"L\"\n            };\n\n            return consolidacaoDtl;\n        }"
                     }
                  }
               }
            },
            "DistribuicaoResult": {
               "DistribuicaoResult": {
                  "type": "class",
                  "members": {
                     "Titular": {
                        "type": "property"
                     },
                     "Associacao": {
                        "type": "property"
                     },
                     "Distribuicao": {
                        "type": "property"
                     }
                  }
               }
            },
            "EspelhoPdfMessage": {
               "EspelhoPdfMessage": {
                  "type": "class",
                  "members": {
                     "Start": {
                        "type": "property"
                     },
                     "End": {
                        "type": "property"
                     },
                     "From": {
                        "type": "method",
                        "raw": "public static EspelhoPdfMessage From(int start, int end)\n        {\n            return new EspelhoPdfMessage(start, end);\n        }"
                     }
                  }
               }
            },
            "MusicaAudio": {
               "MusicaAudio": {
                  "type": "class",
                  "members": {
                     "CaracteristicaDistribuicao": {
                        "type": "property"
                     },
                     "CaracteristicaRegistro": {
                        "type": "property"
                     },
                     "ParteRepresentada": {
                        "type": "property"
                     },
                     "QtdDuracaoMusica": {
                        "type": "property"
                     },
                     "CodColetivo": {
                        "type": "property"
                     },
                     "TipSituacaoFono": {
                        "type": "property"
                     },
                     "CodIsrc": {
                        "type": "property"
                     },
                     "CodGra": {
                        "type": "property"
                     },
                     "TipSituacaoCadastral": {
                        "type": "property"
                     },
                     "NomTitulo": {
                        "type": "property"
                     },
                     "GetIsrcOuGra": {
                        "type": "method",
                        "raw": "public string GetIsrcOuGra()\n        {\n            if (Fonograma != null)\n            {\n                if (!String.IsNullOrEmpty(CodIsrc))\n                    return CodIsrc;\n                else\n                    return CodGra;\n            }\n            else\n                return String.Empty;\n\n        }",
                        "dependencies": [
                           {
                              "type": "String",
                              "method": "IsNullOrEmpty"
                           }
                        ]
                     }
                  }
               }
            },
            "SociedadeRepresentacao": {
               "SociedadeRepresentacao": {
                  "type": "class",
                  "members": {
                     "CodSociedade": {
                        "type": "property"
                     },
                     "IndNacionalCol": {
                        "type": "property"
                     },
                     "SglSociedade": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     }
                  }
               }
            },
            "SociedadeTitular": {
               "SociedadeTitular": {
                  "type": "class",
                  "members": {
                     "CodSociedade": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     },
                     "CodTitularEcad": {
                        "type": "property"
                     },
                     "DatRessoc": {
                        "type": "property"
                     },
                     "SglSociedade": {
                        "type": "property"
                     },
                     "IndNacionalCol": {
                        "type": "property"
                     },
                     "IndSituacaoSociedade": {
                        "type": "property"
                     },
                     "IndSituacaoSociedadeRepresenta": {
                        "type": "property"
                     }
                  }
               }
            },
            "TitularFonograma": {
               "TitularFonograma": {
                  "type": "class",
                  "members": {
                     "CodTitularEcad": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     },
                     "CodSubCategoria": {
                        "type": "property"
                     },
                     "PctParticipacao": {
                        "type": "property"
                     },
                     "CodFonograma": {
                        "type": "property"
                     },
                     "IndSitTitular": {
                        "type": "property"
                     },
                     "CodColetivo": {
                        "type": "property"
                     },
                     "CodTitularIdentificado": {
                        "type": "property"
                     },
                     "NomTitular": {
                        "type": "property"
                     },
                     "NomNameTitular": {
                        "type": "property"
                     },
                     "NomBusca": {
                        "type": "property"
                     },
                     "TipoPessoa": {
                        "type": "property"
                     },
                     "CodCae": {
                        "type": "property"
                     },
                     "CodCgc": {
                        "type": "property"
                     },
                     "CodCpf": {
                        "type": "property"
                     },
                     "DescricaoCategoria": {
                        "type": "property"
                     },
                     "DescricaoSubCategoria": {
                        "type": "property"
                     },
                     "PseudoNome": {
                        "type": "property"
                     },
                     "CodFonogramaTitular": {
                        "type": "property"
                     },
                     "TitularComPendenciaNaRepresentacao": {
                        "type": "method",
                        "raw": "public bool TitularComPendenciaNaRepresentacao()\n        {\n            if (Representacao == null)\n                return true;\n\n            if (Representacao.CodSociedade == 0 || (Representacao.IndNacionalCol == \"N\" && Representacao.CodSociedadeRepresenta == null) || Representacao.IndSituacaoSociedade != \"A\")\n                return true;\n\n            if (Representacao.IndNacionalCol == \"N\")\n            {\n                if (Representacao.IndSituacaoSociedadeRepresenta != \"A\")\n                    return true;\n            }\n\n            return false;\n        }"
                     }
                  }
               }
            },
            "TitularObra": {
               "TitularObra": {
                  "type": "class",
                  "members": {
                     "CodTitularEcad": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     },
                     "CodSubCategoria": {
                        "type": "property"
                     },
                     "PctParticipacao": {
                        "type": "property"
                     },
                     "IndSituacao": {
                        "type": "property"
                     },
                     "CodTitularIdentificado": {
                        "type": "property"
                     },
                     "NomTitular": {
                        "type": "property"
                     },
                     "NomNameTitular": {
                        "type": "property"
                     },
                     "NomBusca": {
                        "type": "property"
                     },
                     "TipoPessoa": {
                        "type": "property"
                     },
                     "CodCae": {
                        "type": "property"
                     },
                     "CodCgc": {
                        "type": "property"
                     },
                     "CodCpf": {
                        "type": "property"
                     },
                     "PseudoNome": {
                        "type": "property"
                     },
                     "DescricaoCategoria": {
                        "type": "property"
                     },
                     "DescricaoSubCategoria": {
                        "type": "property"
                     },
                     "IndSituacaoSociedade": {
                        "type": "property"
                     },
                     "IndSituacaoSociedadeRepresenta": {
                        "type": "property"
                     },
                     "TitularComPendenciaNaRepresentacao": {
                        "type": "method",
                        "raw": "public bool TitularComPendenciaNaRepresentacao()\n        {\n            if (Representacao == null)\n                return true;\n\n            if (Representacao.CodSociedade == 0 || (Representacao.IndNacionalCol == \"N\" && Representacao.CodSociedadeRepresenta == null) || Representacao.IndSituacaoSociedade != \"A\")\n                return true;\n\n            if (Representacao.IndNacionalCol == \"N\")\n            {\n                if (Representacao.IndSituacaoSociedadeRepresenta != \"A\")\n                    return true;\n            }\n\n            return false;\n        }"
                     }
                  }
               }
            }
         },
         "Models": {
            "DistAssociacao": {
               "DistAssociacao": {
                  "type": "class",
                  "members": {
                     "CodDistAssociacao": {
                        "type": "property"
                     },
                     "CodDistTitular": {
                        "type": "property"
                     },
                     "DistTitular": {
                        "type": "property"
                     },
                     "DatProcessamento": {
                        "type": "property"
                     },
                     "VlrAssociacao": {
                        "type": "property"
                     },
                     "IndLancamento": {
                        "type": "property"
                     },
                     "IndLiqAjusteEstrangeiro": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistCompetencia": {
               "DistCompetencia": {
                  "type": "class",
                  "members": {
                     "CodCompetencia": {
                        "type": "property"
                     },
                     "MesCompetencia": {
                        "type": "property"
                     },
                     "TipGrupoRubrica": {
                        "type": "property"
                     },
                     "CodRubrica": {
                        "type": "property"
                     },
                     "DatRepasse": {
                        "type": "property"
                     },
                     "DatIniPeriodoVerba": {
                        "type": "property"
                     },
                     "DatFimPeriodoVerba": {
                        "type": "property"
                     },
                     "IndProcessado": {
                        "type": "property"
                     },
                     "PctSociedade": {
                        "type": "property"
                     },
                     "PctTitular": {
                        "type": "property"
                     },
                     "PctEcad": {
                        "type": "property"
                     },
                     "DatIniPeriodoExec": {
                        "type": "property"
                     },
                     "DatFimPeriodoExec": {
                        "type": "property"
                     },
                     "TipDistribuicao": {
                        "type": "property"
                     },
                     "IndGerarRetido": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistConsolidacao": {
               "DistConsolidacao": {
                  "type": "class",
                  "members": {
                     "CodConsolidDistrib": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistConsolidacaoAud": {
               "DistConsolidacaoAud": {
                  "type": "class",
                  "members": {
                     "CodConsolidDistribAudio": {
                        "type": "property"
                     },
                     "TipCaracteristicaDist": {
                        "type": "property"
                     },
                     "CodConsolidDistribDtl": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistConsolidacaoDtl": {
               "DistConsolidacaoDtl": {
                  "type": "class",
                  "members": {
                     "CodConsolidDistribDtl": {
                        "type": "property"
                     },
                     "CodConsolidDistrib": {
                        "type": "property"
                     },
                     "ConsolidDistrib": {
                        "type": "property"
                     },
                     "TipParteRepresentada": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistExecucaoSumario": {
               "DistExecucaoSumario": {
                  "type": "class",
                  "members": {
                     "CodDistExecucaoSumario": {
                        "type": "property"
                     },
                     "CodDistribuicao": {
                        "type": "property"
                     },
                     "TipParteRepresentada": {
                        "type": "property"
                     },
                     "NroExecucoes": {
                        "type": "property"
                     },
                     "TipCaracteristicaDist": {
                        "type": "property"
                     },
                     "TipOrigemExec": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistPendente": {
               "DistPendente": {
                  "type": "class",
                  "members": {
                     "CodDistPendente": {
                        "type": "property"
                     },
                     "SglMotivoRetencao": {
                        "type": "property"
                     },
                     "CodConsolidDistribDtl": {
                        "type": "property"
                     },
                     "DatProcessamento": {
                        "type": "property"
                     },
                     "TipOrigemExec": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistPonto": {
               "DistPonto": {
                  "type": "class",
                  "members": {
                     "CodPontoDistribuicao": {
                        "type": "property"
                     },
                     "CodDistribuicao": {
                        "type": "property"
                     },
                     "TipParteRepresentada": {
                        "type": "property"
                     },
                     "IndInterprete": {
                        "type": "property"
                     },
                     "TipCaracteristicaDist": {
                        "type": "property"
                     },
                     "TipOrigemExec": {
                        "type": "property"
                     },
                     "IndPontoSemVerba": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistRetido": {
               "DistRetido": {
                  "type": "class",
                  "members": {
                     "CodDistRetido": {
                        "type": "property"
                     },
                     "CodConsolidDistribDtl": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     },
                     "CodSubcategoria": {
                        "type": "property"
                     },
                     "SglMotivoRetencao": {
                        "type": "property"
                     },
                     "DatProcessamento": {
                        "type": "property"
                     },
                     "VlrTitular": {
                        "type": "property"
                     },
                     "IndDesdobradoParam": {
                        "type": "property"
                     },
                     "DatUltimaCorrecao": {
                        "type": "property"
                     },
                     "VlrRendimento": {
                        "type": "property"
                     },
                     "VlrSociedade": {
                        "type": "property"
                     },
                     "TipCaracteristicaDist": {
                        "type": "property"
                     },
                     "TipOrigemExec": {
                        "type": "property"
                     }
                  }
               }
            },
            "Distribuicao": {
               "Distribuicao": {
                  "type": "class",
                  "members": {
                     "CodDistribuicao": {
                        "type": "property"
                     },
                     "CodCompetencia": {
                        "type": "property"
                     },
                     "IndProcessado": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistRol": {
               "DistRol": {
                  "type": "class",
                  "members": {
                     "CodDistRol": {
                        "type": "property"
                     },
                     "CodDistribuicao": {
                        "type": "property"
                     },
                     "CodRolMusical": {
                        "type": "property"
                     },
                     "NroVersaoRolMusical": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistRolOrigemExecucao": {
               "DistRolOrigemExecucao": {
                  "type": "class",
                  "members": {
                     "CodDistOrigemExecucao": {
                        "type": "property"
                     },
                     "IndRolRetroativo": {
                        "type": "property"
                     },
                     "NomInterprete": {
                        "type": "property"
                     },
                     "TipCaracteristicaDist": {
                        "type": "property"
                     }
                  }
               }
            },
            "DistTitular": {
               "DistTitular": {
                  "type": "class",
                  "members": {
                     "CodDistTitular": {
                        "type": "property"
                     },
                     "CodConsolidDistribDtl": {
                        "type": "property"
                     },
                     "ConsolidDistribDtl": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     },
                     "CodSubcategoria": {
                        "type": "property"
                     },
                     "DatProcessamento": {
                        "type": "property"
                     },
                     "PctParticipacao": {
                        "type": "property"
                     },
                     "VlrTitular": {
                        "type": "property"
                     },
                     "IndDesdobradoParam": {
                        "type": "property"
                     },
                     "VlrRendimento": {
                        "type": "property"
                     },
                     "PctParticipacaoMusico": {
                        "type": "property"
                     },
                     "TipCaracteristicaDist": {
                        "type": "property"
                     },
                     "TipOrigemExec": {
                        "type": "property"
                     },
                     "IndLancamento": {
                        "type": "property"
                     }
                  }
               }
            },
            "MotivoRetencao": {
               "MotivoRetencao": {
                  "type": "class",
                  "members": {
                     "SglMotivoRetencao": {
                        "type": "property"
                     },
                     "DscMotivoRetencao": {
                        "type": "property"
                     }
                  }
               }
            },
            "RelDemonstrativoTitular": {
               "RelDemonstrativoTitular": {
                  "type": "class",
                  "members": {
                     "CodDistTitular": {
                        "type": "property"
                     },
                     "TipLancamento": {
                        "type": "property"
                     },
                     "IndLancamento": {
                        "type": "property"
                     },
                     "TipPagamento": {
                        "type": "property"
                     },
                     "DscRubrica": {
                        "type": "property"
                     },
                     "NomRubricaIngles": {
                        "type": "property"
                     },
                     "TipReferenciaRub": {
                        "type": "property"
                     },
                     "CodDistribuicao": {
                        "type": "property"
                     },
                     "TipDistribuicao": {
                        "type": "property"
                     },
                     "DatPeriodoDist": {
                        "type": "property"
                     },
                     "MesPagamento": {
                        "type": "property"
                     },
                     "CodParteRepresentada": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     },
                     "DscCategoria": {
                        "type": "property"
                     },
                     "NomTitular": {
                        "type": "property"
                     },
                     "NomNameTitular": {
                        "type": "property"
                     },
                     "NomBuscaTit": {
                        "type": "property"
                     },
                     "TipPessoa": {
                        "type": "property"
                     },
                     "CodCaeTit": {
                        "type": "property"
                     },
                     "CodCgc": {
                        "type": "property"
                     },
                     "CodCpf": {
                        "type": "property"
                     },
                     "NomPseudoTitular": {
                        "type": "property"
                     },
                     "NomTituloObra": {
                        "type": "property"
                     },
                     "NomInterpreteObra": {
                        "type": "property"
                     },
                     "NomInterpreteShow": {
                        "type": "property"
                     },
                     "GraIsrc": {
                        "type": "property"
                     },
                     "NomShow": {
                        "type": "property"
                     },
                     "DscLocalShow": {
                        "type": "property"
                     },
                     "NomMunicipioShow": {
                        "type": "property"
                     },
                     "SglUfShow": {
                        "type": "property"
                     },
                     "NomTituloAudioOrig": {
                        "type": "property"
                     },
                     "NomTituloAudioTrad": {
                        "type": "property"
                     },
                     "NomNomeAutor": {
                        "type": "property"
                     },
                     "CodSubcategoria": {
                        "type": "property"
                     },
                     "DscSubcategoria": {
                        "type": "property"
                     },
                     "TipGrupo": {
                        "type": "property"
                     },
                     "CodCaracteristicaDist": {
                        "type": "property"
                     },
                     "PctPartMusico": {
                        "type": "property"
                     },
                     "TxtPeriodoLib": {
                        "type": "property"
                     },
                     "NomCategoriaIngles": {
                        "type": "property"
                     },
                     "NomSubcategoriaIngles": {
                        "type": "property"
                     },
                     "NomUsuario": {
                        "type": "property"
                     },
                     "NomFantasiaUsuario": {
                        "type": "property"
                     },
                     "DscTipoAjuste": {
                        "type": "property"
                     },
                     "IndCopiadoBi": {
                        "type": "property"
                     },
                     "IndAjusteJuridico": {
                        "type": "property"
                     },
                     "IndAjusteTitular": {
                        "type": "property"
                     },
                     "TipOrigemExec": {
                        "type": "property"
                     },
                     "TipExecucao": {
                        "type": "property"
                     },
                     "NomPlanoSd": {
                        "type": "property"
                     },
                     "CompetenciaOriginalPrescrito": {
                        "type": "property"
                     },
                     "TipAmostra": {
                        "type": "property"
                     },
                     "IndCableRetransmission": {
                        "type": "property"
                     },
                     "TipPagamentoRubrica": {
                        "type": "property"
                     },
                     "TipDemonstrativoTit": {
                        "type": "property"
                     }
                  }
               }
            },
            "Rubrica": {
               "Rubrica": {
                  "type": "class",
                  "members": {
                     "CodRubrica": {
                        "type": "property"
                     },
                     "DscRubrica": {
                        "type": "property"
                     },
                     "IndDireitosGerais": {
                        "type": "property"
                     },
                     "TipDistribuicao": {
                        "type": "property"
                     },
                     "TipReferencia": {
                        "type": "property"
                     },
                     "IndGeraAd": {
                        "type": "property"
                     },
                     "TipAmostra": {
                        "type": "property"
                     },
                     "CatDistribuicao": {
                        "type": "property"
                     },
                     "NomRubricaIngles": {
                        "type": "property"
                     },
                     "IndSituacao": {
                        "type": "property"
                     },
                     "IndDistribuicao": {
                        "type": "property"
                     },
                     "IndRetido": {
                        "type": "property"
                     },
                     "IndPendente": {
                        "type": "property"
                     },
                     "IndParametro": {
                        "type": "property"
                     },
                     "TipExecucao": {
                        "type": "property"
                     },
                     "CodCrdCategoria": {
                        "type": "property"
                     },
                     "TipCrdPeriodoDist": {
                        "type": "property"
                     },
                     "TipCrdRightCode": {
                        "type": "property"
                     },
                     "IndPagaMusico": {
                        "type": "property"
                     },
                     "IndExibeDtlDemonst": {
                        "type": "property"
                     },
                     "IndPesoDif": {
                        "type": "property"
                     },
                     "IndProvisaoPendav": {
                        "type": "property"
                     },
                     "IndProcFonoPend": {
                        "type": "property"
                     },
                     "IndProcFonoEstrangeiro": {
                        "type": "property"
                     },
                     "IndProcFonoNacional": {
                        "type": "property"
                     },
                     "IndConsideraRolRetroativo": {
                        "type": "property"
                     },
                     "TipTv": {
                        "type": "property"
                     },
                     "TipPagamento": {
                        "type": "property"
                     },
                     "IndCableRetransmission": {
                        "type": "property"
                     },
                     "IndAdiantamentoPrescrito": {
                        "type": "property"
                     },
                     "IndConsideraRoisExe": {
                        "type": "property"
                     },
                     "TipModeloComercialSd": {
                        "type": "property"
                     },
                     "IndTipDatRetro": {
                        "type": "property"
                     }
                  }
               }
            },
            "SdAvRolObraFonoAudio": {
               "SdAvRolObraFonoAudio": {
                  "type": "class",
                  "members": {
                     "CodObraFonoAudio": {
                        "type": "property"
                     },
                     "TipCaracteristicaDist": {
                        "type": "property"
                     }
                  }
               }
            }
         },
         "services": {
            "CalculaFonogramaServices": {
               "CalculaFonogramaServices": {
                  "type": "class",
                  "members": {
                     "CalculaFonogramas": {
                        "type": "method",
                        "raw": "public async Task CalculaFonogramas(AudioVisualGloboplay audioVisual)\n        {\n            if (audioVisual != null)\n            {\n                bool deveReterPorSemRegistros =\n                    !(audioVisual.CodCapiEpisodio == null && audioVisual.IndSituacaoAudiovisual.Trim() == \"P\") &&\n                    !(audioVisual.ObrasMusicais.Count() < 1 && audioVisual.CodCapiEpisodio != null);\n\n                if (deveReterPorSemRegistros)\n                {\n                    var consolidacaoFinal = ConsolidacaoUtils.GerarConsolidacao(audioVisual);\n\n                    consolidacaoFinal.DadosConsolidacaoAA.CodConsolidDistrib = audioVisual.CodigoCosolidacaoAA.Value;\n                    consolidacaoFinal.DadosConsolidacaoCC.CodConsolidDistrib = audioVisual.CodigoCosolidacaoCC.Value;\n                    consolidacaoFinal.DadosConsolidacaoDtlAA.CodConsolidDistribDtl = audioVisual.CodigoCosolidacaoAADtl.Value;\n                    consolidacaoFinal.DadosConsolidacaoDtlCC.CodConsolidDistribDtl = audioVisual.CodigoCosolidacaoCCDtl.Value;\n\n                    foreach (var fonograma in audioVisual.Fonogramas)\n                    {\n\n                        if (fonograma?.TipSituacaoFono == \"L\")\n                        {\n                            if (audioVisual.TitularesFonograma.Where(x => x.CodFonograma == fonograma.Fonograma).Any())\n                            {\n                                var listaTitularesFonograma = audioVisual.TitularesFonograma.Where(x => x.CodFonograma == fonograma.Fonograma).ToList().DistinctBy(f => f.CodFonogramaTitular);\n                                \n                                \n                                \n                                foreach (var titular in listaTitularesFonograma)\n                                {\n                                    if (titular.CodTitularIdentificado != null)\n                                        await _retencaoService.RetencaoPorTitularFonogramaComPendência(audioVisual, titular, fonograma, consolidacaoFinal.ConsolidacaoCC, \"TDP\", consolidacaoFinal.DadosConsolidacaoDtlCC);\n                                    else if (titular.TitularComPendenciaNaRepresentacao())\n                                        await _retencaoService.RetencaoPorTitularFonogramaComPendência(audioVisual, titular, fonograma, consolidacaoFinal.ConsolidacaoCC, \"TPI\", consolidacaoFinal.DadosConsolidacaoDtlCC);\n                                    else\n                                    {\n                                        await _distribuirVerba.DistribuirVerbaFonograma(audioVisual, fonograma, consolidacaoFinal.ConsolidacaoCC, titular, \"CC\", consolidacaoFinal.DadosConsolidacaoDtlCC);\n                                    }\n                                }\n                            }\n                            else\n                            {\n                                await _retencaoService.RetencaoPorOFonogramaComPendência(audioVisual, fonograma, consolidacaoFinal.ConsolidacaoCC, \"FPI\", consolidacaoFinal.DadosConsolidacaoDtlCC);\n                            }\n                        }\n                        else\n                            await _retencaoService.RetencaoPorOFonogramaComPendência(audioVisual, fonograma, consolidacaoFinal.ConsolidacaoCC, \"FPI\", consolidacaoFinal.DadosConsolidacaoDtlCC);\n                    }\n                }\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorTitularFonogramaComPendência"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorTitularFonogramaComPendência"
                           },
                           {
                              "type": "IDistribuirVerba",
                              "method": "DistribuirVerbaFonograma"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorOFonogramaComPendência"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorOFonogramaComPendência"
                           },
                           {
                              "type": "IndSituacaoAudiovisual",
                              "method": "Trim"
                           },
                           {
                              "type": "ObrasMusicais",
                              "method": "Count"
                           },
                           {
                              "type": "ConsolidacaoUtils",
                              "method": "GerarConsolidacao"
                           },
                           {
                              "type": "TitularesFonograma",
                              "method": "Where"
                           },
                           {
                              "type": "TitularesFonograma",
                              "method": "Where"
                           },
                           {
                              "type": "titular",
                              "method": "TitularComPendenciaNaRepresentacao"
                           }
                        ]
                     },
                     "CalculaFonogramasV2": {
                        "type": "method",
                        "raw": "public async Task CalculaFonogramasV2(AudioVisualGloboplay audioVisual)\n        {\n            if (audioVisual == null) return;\n\n            bool deveReterPorSemRegistros =\n                !(audioVisual.CodCapiEpisodio == null && audioVisual.IndSituacaoAudiovisual.Trim() == \"P\") &&\n                !(audioVisual.ObrasMusicais.Count() < 1 && audioVisual.CodCapiEpisodio != null);\n\n            if (!deveReterPorSemRegistros) return;\n\n            var consolidacaoFinal = ConsolidacaoUtils.GerarConsolidacao(audioVisual);\n\n            consolidacaoFinal.DadosConsolidacaoAA.CodConsolidDistrib = audioVisual.CodigoCosolidacaoAA.Value;\n            consolidacaoFinal.DadosConsolidacaoCC.CodConsolidDistrib = audioVisual.CodigoCosolidacaoCC.Value;\n            consolidacaoFinal.DadosConsolidacaoDtlAA.CodConsolidDistribDtl = audioVisual.CodigoCosolidacaoAADtl.Value;\n            consolidacaoFinal.DadosConsolidacaoDtlCC.CodConsolidDistribDtl = audioVisual.CodigoCosolidacaoCCDtl.Value;\n\n            var fonogramas = audioVisual.Fonogramas.ToList();\n            var verbaConexa = (audioVisual.Competencia.VlrVerbaConexa * audioVisual.VlrFatorDistribuicao) / audioVisual.Competencia.VerbaTotal;\n\n            context.ChangeTracker.Clear(); // Melhorar a performance de tracking\n\n            // Usar uma única transação para todas as operações de banco de dados\n            //using var transaction = await context.Database.BeginTransactionAsync();\n            try\n            {\n                foreach (var fonograma in fonogramas)\n                {\n                    if (fonograma == null) continue; // Continuar em vez de retornar\n\n                    var categoria = fonograma.CaracteristicaDistribuicao;\n                    var consolidacao = consolidacaoFinal.ConsolidacaoCC.FirstOrDefault(c => c.Categoria == categoria);\n\n                    if (consolidacao == null) continue; // Continuar em vez de retornar\n\n                    var rendimentoFonograma = (long)audioVisual.NroFatorDistribuicao * fonograma.QtdDuracaoMusica * consolidacao.Ponto;\n                    var rendimento = CalcularRendimento(audioVisual, fonograma, consolidacaoFinal.ConsolidacaoCC);\n\n                    if (fonograma.TipSituacaoFono == \"L\")\n                    {\n                        var titularesFonograma = audioVisual.TitularesFonograma\n                            .Where(x => x.CodFonograma == fonograma.Fonograma)\n                            .DistinctBy(f => f.CodFonogramaTitular)\n                            .ToList();\n\n                        if (!titularesFonograma.Any())\n                        {\n                            // Se não houver titulares, aplica-se a retenção para o fonograma sem titular\n                            await RetencaoFonogramaSemTitular(audioVisual, fonograma, consolidacaoFinal, rendimentoFonograma);\n                            return;\n                        }\n\n                        // Se houver titulares, aplica-se a distribuição ou retenção com pendência\n                        await VerificarTrackingConsolidacao(consolidacaoFinal);\n\n                        var tasks = titularesFonograma.Select(titular =>\n                        {\n                            if (titular.CodTitularIdentificado != null || titular.TitularComPendenciaNaRepresentacao())\n                            {\n                                return RetencaoTitularComPendenciaAsync(audioVisual, titular, fonograma, consolidacaoFinal, verbaConexa, rendimentoFonograma);\n                            }\n                            else\n                            {\n                                return DistribuirVerbaFonogramaAsync(audioVisual, fonograma, titular, consolidacaoFinal, rendimentoFonograma);\n                            }\n                        });\n\n                        await Task.WhenAll(tasks); // Executa todas as tarefas de forma paralela\n                    }\n                    else\n                    {\n                        await _retencaoService.RetencaoPorOFonogramaComPendênciaV2(\n                            audioVisual,\n                            fonograma,\n                            consolidacaoFinal.ConsolidacaoCC,\n                            \"FPI\",\n                            consolidacaoFinal.DadosConsolidacaoDtlCC,\n                            rendimentoFonograma\n                        );\n                    }\n                }\n\n                await context.SaveChangesAsync();\n                //await transaction.CommitAsync(); // Commit em todas as mudanças\n            }\n            catch\n            {\n                //await transaction.RollbackAsync();\n                throw; // Garantir rollback em caso de falha\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorOFonogramaComPendênciaV2"
                           },
                           {
                              "type": "IndSituacaoAudiovisual",
                              "method": "Trim"
                           },
                           {
                              "type": "ObrasMusicais",
                              "method": "Count"
                           },
                           {
                              "type": "ConsolidacaoUtils",
                              "method": "GerarConsolidacao"
                           },
                           {
                              "type": "Fonogramas",
                              "method": "ToList"
                           },
                           {
                              "type": "ChangeTracker",
                              "method": "Clear"
                           },
                           {
                              "type": "Database",
                              "method": "BeginTransactionAsync"
                           },
                           {
                              "type": "ConsolidacaoCC",
                              "method": "FirstOrDefault"
                           },
                           {
                              "type": "titularesFonograma",
                              "method": "Any"
                           },
                           {
                              "type": "titularesFonograma",
                              "method": "Select"
                           },
                           {
                              "type": "titular",
                              "method": "TitularComPendenciaNaRepresentacao"
                           },
                           {
                              "type": "Task",
                              "method": "WhenAll"
                           },
                           {
                              "type": "context",
                              "method": "SaveChangesAsync"
                           },
                           {
                              "type": "transaction",
                              "method": "CommitAsync"
                           },
                           {
                              "type": "transaction",
                              "method": "RollbackAsync"
                           }
                        ]
                     },
                     "VerificarTrackingConsolidacao": {
                        "type": "method",
                        "raw": "private async Task VerificarTrackingConsolidacao(ConsolidacaoDTO consolidacaoFinal)\n        {\n            var trackedEntity = context.ChangeTracker\n                .Entries<DistConsolidacaoDtl>()\n                .FirstOrDefault(e => e.Entity.CodConsolidDistribDtl == consolidacaoFinal.DadosConsolidacaoDtlCC.CodConsolidDistribDtl);\n\n            if (trackedEntity == null)\n            {\n                context.DistConsolidacaoDtl.Attach(consolidacaoFinal.DadosConsolidacaoDtlCC);\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           }
                        ]
                     },
                     "RetencaoTitularComPendenciaAsync": {
                        "type": "method",
                        "raw": "private async Task RetencaoTitularComPendenciaAsync(AudioVisualGloboplay audioVisual, TitularFonograma titular, MusicaAudio? fonograma, ConsolidacaoDTO consolidacaoFinal, decimal verbaConexa, decimal rendimentoFonograma)\n        {\n            var tipoPendencia = titular.CodTitularIdentificado != null ? \"TDP\" : \"TPI\";\n\n            var distRetido = _retencaoService.RetencaoPorTitularFonogramaComPendenciaV2(\n                audioVisual,\n                titular,\n                fonograma,\n                consolidacaoFinal.ConsolidacaoCC,\n                tipoPendencia,\n                consolidacaoFinal.DadosConsolidacaoDtlCC,\n                verbaConexa,\n                rendimentoFonograma\n            );\n\n            await context.DistRetido.AddAsync(distRetido);\n        }",
                        "dependencies": [
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorTitularFonogramaComPendenciaV2"
                           },
                           {
                              "type": "DistRetido",
                              "method": "AddAsync"
                           }
                        ]
                     },
                     "DistribuirVerbaFonogramaAsync": {
                        "type": "method",
                        "raw": "private async Task DistribuirVerbaFonogramaAsync(AudioVisualGloboplay audioVisual, MusicaAudio? fonograma, TitularFonograma titular, ConsolidacaoDTO consolidacaoFinal, decimal rendimento)\n        {\n            var resultado = _distribuirVerba.DistribuirVerbaFonogramaV2(\n                audioVisual,\n                fonograma,\n                consolidacaoFinal.ConsolidacaoCC,\n                titular,\n                \"CC\",\n                consolidacaoFinal.DadosConsolidacaoDtlCC,\n                rendimento\n            );\n\n            if (resultado.Associacao != null)\n                await context.DistAssociacao.AddAsync(resultado.Associacao);\n\n            if (resultado.Distribuicao != null)\n                await context.DistTitular.AddAsync(resultado.Distribuicao);\n\n            if (resultado.Titular != null)\n                await context.DemonstrativoTitular.AddAsync(resultado.Titular);\n        }",
                        "dependencies": [
                           {
                              "type": "IDistribuirVerba",
                              "method": "DistribuirVerbaFonogramaV2"
                           },
                           {
                              "type": "DistAssociacao",
                              "method": "AddAsync"
                           },
                           {
                              "type": "DistTitular",
                              "method": "AddAsync"
                           },
                           {
                              "type": "DemonstrativoTitular",
                              "method": "AddAsync"
                           }
                        ]
                     },
                     "RetencaoFonogramaSemTitular": {
                        "type": "method",
                        "raw": "private async Task RetencaoFonogramaSemTitular(AudioVisualGloboplay audioVisual, MusicaAudio? fonograma, ConsolidacaoDTO consolidacaoFinal, decimal rendimentoFonograma)\n        {\n            await _retencaoService.RetencaoPorOFonogramaComPendênciaV2(\n                audioVisual,\n                fonograma,\n                consolidacaoFinal.ConsolidacaoCC,\n                \"FPI\",\n                consolidacaoFinal.DadosConsolidacaoDtlCC,\n                rendimentoFonograma\n            );\n        }",
                        "dependencies": [
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorOFonogramaComPendênciaV2"
                           }
                        ]
                     }
                  }
               }
            },
            "CalculaObraService": {
               "CalculaObraService": {
                  "type": "class",
                  "members": {
                     "CalculaObrasMusicais": {
                        "type": "method",
                        "raw": "public async Task CalculaObrasMusicais(AudioVisualGloboplay audioVisual)\n        {\n\n            if (audioVisual != null)\n            {\n                bool deveReterPorSemRegistros =\n                   !(audioVisual.CodCapiEpisodio == null && audioVisual.IndSituacaoAudiovisual.Trim() == \"P\") &&\n                   !(audioVisual.ObrasMusicais.Count() < 1 && audioVisual.CodCapiEpisodio != null);\n\n                if (deveReterPorSemRegistros)\n                {\n                    var consolidacaoFinal = ConsolidacaoUtils.GerarConsolidacao(audioVisual);\n\n                    consolidacaoFinal.DadosConsolidacaoAA.CodConsolidDistrib = audioVisual.CodigoCosolidacaoAA.Value;\n                    consolidacaoFinal.DadosConsolidacaoCC.CodConsolidDistrib = audioVisual.CodigoCosolidacaoCC.Value;\n                    consolidacaoFinal.DadosConsolidacaoDtlAA.CodConsolidDistribDtl = audioVisual.CodigoCosolidacaoAADtl.Value;\n                    consolidacaoFinal.DadosConsolidacaoDtlCC.CodConsolidDistribDtl = audioVisual.CodigoCosolidacaoCCDtl.Value;\n\n                    foreach (var obra in audioVisual.ObrasMusicais)\n                    {\n                        if (obra?.TipSituacaoCadastral == \"ID\")\n                        {\n                            if (audioVisual.TitularesObra.Where(x => x.CodObraMusEcad == obra.CodObraMusEcad).Count() >= 1)\n                            {\n                                var listaTitularesObra = audioVisual.TitularesObra.Where(x => x.CodObraMusEcad == obra.CodObraMusEcad).ToList().DistinctBy(f => f.CodObraTitular);\n\n                                foreach (var titular in listaTitularesObra)\n                                {\n                                    if (titular.CodTitularIdentificado != null)\n                                        await _retencaoService.RetencaoPorTitularObraComPendência(audioVisual, titular, obra, consolidacaoFinal.ConsolidacaoAA, \"TDP\", consolidacaoFinal.DadosConsolidacaoDtlAA);\n                                    else if (titular.TitularComPendenciaNaRepresentacao())\n                                        await _retencaoService.RetencaoPorTitularObraComPendência(audioVisual, titular, obra, consolidacaoFinal.ConsolidacaoAA, \"TPI\", consolidacaoFinal.DadosConsolidacaoDtlAA);\n                                    else\n                                        await _distribuirVerba.DistribuirVerbaObra(audioVisual, obra, consolidacaoFinal.ConsolidacaoAA, titular, \"AA\", consolidacaoFinal.DadosConsolidacaoDtlAA);\n                                }\n                            }\n                            else\n                            {\n                                await _retencaoService.RetencaoPorObraMusicalComPendência(audioVisual, obra, consolidacaoFinal.ConsolidacaoAA, \"OPI\", consolidacaoFinal.DadosConsolidacaoDtlAA);\n                            }\n                        }\n                        else\n                            await _retencaoService.RetencaoPorObraMusicalComPendência(audioVisual, obra, consolidacaoFinal.ConsolidacaoAA, \"OPI\", consolidacaoFinal.DadosConsolidacaoDtlAA);\n                    }\n                }\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorTitularObraComPendência"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorTitularObraComPendência"
                           },
                           {
                              "type": "IDistribuirVerba",
                              "method": "DistribuirVerbaObra"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorObraMusicalComPendência"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorObraMusicalComPendência"
                           },
                           {
                              "type": "IndSituacaoAudiovisual",
                              "method": "Trim"
                           },
                           {
                              "type": "ObrasMusicais",
                              "method": "Count"
                           },
                           {
                              "type": "ConsolidacaoUtils",
                              "method": "GerarConsolidacao"
                           },
                           {
                              "type": "TitularesObra",
                              "method": "Where"
                           },
                           {
                              "type": "TitularesObra",
                              "method": "Where"
                           },
                           {
                              "type": "titular",
                              "method": "TitularComPendenciaNaRepresentacao"
                           }
                        ]
                     },
                     "CalculaObrasMusicaisV2": {
                        "type": "method",
                        "raw": "public async Task CalculaObrasMusicaisV2(AudioVisualGloboplay audioVisual)\n        {\n            context.ChangeTracker.Clear();\n\n            if (audioVisual != null)\n            {\n                bool deveReterPorSemRegistros =\n                   !(audioVisual.CodCapiEpisodio == null && audioVisual.IndSituacaoAudiovisual.Trim() == \"P\") &&\n                   !(audioVisual.ObrasMusicais.Count() < 1 && audioVisual.CodCapiEpisodio != null);\n\n                if (deveReterPorSemRegistros)\n                {\n                    var consolidacaoFinal = ConsolidacaoUtils.GerarConsolidacao(audioVisual);\n\n                    consolidacaoFinal.DadosConsolidacaoAA.CodConsolidDistrib = audioVisual.CodigoCosolidacaoAA.Value;\n                    consolidacaoFinal.DadosConsolidacaoCC.CodConsolidDistrib = audioVisual.CodigoCosolidacaoCC.Value;\n                    consolidacaoFinal.DadosConsolidacaoDtlAA.CodConsolidDistribDtl = audioVisual.CodigoCosolidacaoAADtl.Value;\n                    consolidacaoFinal.DadosConsolidacaoDtlCC.CodConsolidDistribDtl = audioVisual.CodigoCosolidacaoCCDtl.Value;\n\n                    var trackedEntity = context.ChangeTracker\n                    .Entries<DistConsolidacaoDtl>()\n                    .FirstOrDefault(e => e.Entity.CodConsolidDistribDtl == consolidacaoFinal.DadosConsolidacaoDtlAA.CodConsolidDistribDtl);\n\n                        if (trackedEntity == null)\n                        {\n                            context.DistConsolidacaoDtl.Attach(consolidacaoFinal.DadosConsolidacaoDtlAA);\n                        }\n\n                    foreach (var obra in audioVisual.ObrasMusicais)\n                    {\n                        if (obra?.TipSituacaoCadastral == \"ID\")\n                        {\n                            if (audioVisual.TitularesObra.Where(x => x.CodObraMusEcad == obra.CodObraMusEcad).Count() >= 1)\n                            {\n                                var listaTitularesObra = audioVisual.TitularesObra.Where(x => x.CodObraMusEcad == obra.CodObraMusEcad).ToList().DistinctBy(f => f.CodObraTitular);\n\n                                var verbaAutoral = (audioVisual.Competencia.VlrVerbaAutoral * audioVisual.VlrFatorDistribuicao) / audioVisual.Competencia.VerbaTotal;\n\n                                var rendimentoObra = (decimal)audioVisual.NroFatorDistribuicao * obra.QtdDuracaoMusica * consolidacaoFinal.ConsolidacaoAA\n                                                                                                            .Where(x => x.Categoria == obra.CaracteristicaDistribuicao)\n                                                                                                                .First().Ponto;\n                                foreach (var titular in listaTitularesObra)\n                                {\n                                    if (titular.CodTitularIdentificado != null)\n                                    {\n                                        var distRetido = _retencaoService.RetencaoPorTitularObraComPendênciaV2(audioVisual, titular, obra, consolidacaoFinal.ConsolidacaoAA, \"TDP\", consolidacaoFinal.DadosConsolidacaoDtlAA, verbaAutoral, rendimentoObra);\n                                        await context.DistRetido.AddAsync(distRetido);\n                                    }\n                                    else if (titular.TitularComPendenciaNaRepresentacao())\n                                    {\n                                        var distRetido = _retencaoService.RetencaoPorTitularObraComPendênciaV2(audioVisual, titular, obra, consolidacaoFinal.ConsolidacaoAA, \"TPI\", consolidacaoFinal.DadosConsolidacaoDtlAA, verbaAutoral, rendimentoObra);\n                                        await context.DistRetido.AddAsync(distRetido);\n                                    }\n                                    else\n                                    {\n                                        var resultado = _distribuirVerba.DistribuirVerbaObraV2(audioVisual, obra, consolidacaoFinal.ConsolidacaoAA, titular, \"AA\", consolidacaoFinal.DadosConsolidacaoDtlAA, rendimentoObra);\n\n                                        if (resultado.Associacao != null)\n                                            await context.DistAssociacao.AddAsync(resultado.Associacao);\n\n                                        if (resultado.Distribuicao != null)\n                                            await context.DistTitular.AddAsync(resultado.Distribuicao);\n\n                                        if (resultado.Titular != null)\n                                            await context.DemonstrativoTitular.AddAsync(resultado.Titular);\n                                    }\n                                }\n                            }\n                            else\n                            {\n                                await _retencaoService.RetencaoPorObraMusicalComPendência(audioVisual, obra, consolidacaoFinal.ConsolidacaoAA, \"OPI\", consolidacaoFinal.DadosConsolidacaoDtlAA);\n                            }\n                        }\n                        else\n                            await _retencaoService.RetencaoPorObraMusicalComPendência(audioVisual, obra, consolidacaoFinal.ConsolidacaoAA, \"OPI\", consolidacaoFinal.DadosConsolidacaoDtlAA);\n                    }\n\n                    await context.SaveChangesAsync();\n                }\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorTitularObraComPendênciaV2"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorTitularObraComPendênciaV2"
                           },
                           {
                              "type": "IDistribuirVerba",
                              "method": "DistribuirVerbaObraV2"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorObraMusicalComPendência"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorObraMusicalComPendência"
                           },
                           {
                              "type": "ChangeTracker",
                              "method": "Clear"
                           },
                           {
                              "type": "IndSituacaoAudiovisual",
                              "method": "Trim"
                           },
                           {
                              "type": "ObrasMusicais",
                              "method": "Count"
                           },
                           {
                              "type": "ConsolidacaoUtils",
                              "method": "GerarConsolidacao"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "TitularesObra",
                              "method": "Where"
                           },
                           {
                              "type": "TitularesObra",
                              "method": "Where"
                           },
                           {
                              "type": "DistRetido",
                              "method": "AddAsync"
                           },
                           {
                              "type": "titular",
                              "method": "TitularComPendenciaNaRepresentacao"
                           },
                           {
                              "type": "DistRetido",
                              "method": "AddAsync"
                           },
                           {
                              "type": "DistAssociacao",
                              "method": "AddAsync"
                           },
                           {
                              "type": "DistTitular",
                              "method": "AddAsync"
                           },
                           {
                              "type": "DemonstrativoTitular",
                              "method": "AddAsync"
                           },
                           {
                              "type": "context",
                              "method": "SaveChangesAsync"
                           }
                        ]
                     }
                  }
               }
            },
            "CalcularRolService": {
               "CalcularRolService": {
                  "type": "class",
                  "members": {
                     "CalculaEGeraRetencao": {
                        "type": "method",
                        "raw": "public async Task CalculaEGeraRetencao(AudioVisualGloboplay audioVisual)\n        {\n            if (audioVisual != null)\n            {\n                \n                var consolidacaoFinal = ConsolidacaoUtils.GerarConsolidacao(audioVisual);\n\n                if (audioVisual.CodCapiEpisodio == null && audioVisual.IndSituacaoAudiovisual.Trim() == \"P\")\n                    await _retencaoService.RetencaoPorAudiovisualSemRegistrosSemCache(audioVisual, \"API\", consolidacaoFinal.DadosConsolidacaoDtlAA, consolidacaoFinal.DadosConsolidacaoDtlCC);\n                else if (audioVisual.ObrasMusicais.Count() < 1 && audioVisual.CodCapiEpisodio != null)\n                    await _retencaoService.RetencaoPorAudiovisualSemRegistrosSemCache(audioVisual, \"CPI\", consolidacaoFinal.DadosConsolidacaoDtlAA, consolidacaoFinal.DadosConsolidacaoDtlCC);\n                else\n                {\n                    await context.AddAsync(consolidacaoFinal.DadosConsolidacaoAA);\n                    await context.AddAsync(consolidacaoFinal.DadosConsolidacaoDtlAA);\n\n                    await context.AddAsync(consolidacaoFinal.DadosConsolidacaoCC);\n                    await context.AddAsync(consolidacaoFinal.DadosConsolidacaoDtlCC);\n                }\n\n                //TODO: mover isso para buscar os dados uma vez apenas no woeker\n                //var r = await context.SdAvRolObraFonoAudio.Where(x => x.CodObraFonoAudio == audioVisual.CodObraFonoAudio).ExecuteUpdateAsync(setters => setters\n                //                                                                                            .SetProperty(r => r.VlrFatorDistribuicao, audioVisual.VlrFatorDistribuicao));\n\n                var sdAvRolObraFonoAudioRecords = await context.SdAvRolObraFonoAudio\n                    .Where(x => x.CodObraFonoAudio == audioVisual.CodObraFonoAudio)\n                    .ToListAsync();\n\n                foreach (var record in sdAvRolObraFonoAudioRecords)\n                {\n                    record.VlrFatorDistribuicao = audioVisual.VlrFatorDistribuicao;\n                }\n\n\n                await context.SaveChangesAsync();\n\n                //_cacheService.Adicionar(consolidacaoFinal.DadosConsolidacaoDtlAA);\n                //_cacheService.Adicionar(consolidacaoFinal.DadosConsolidacaoDtlCC);\n\n                audioVisual.CodigoCosolidacaoAA = consolidacaoFinal.DadosConsolidacaoAA.CodConsolidDistrib;\n                audioVisual.CodigoCosolidacaoCC = consolidacaoFinal.DadosConsolidacaoCC.CodConsolidDistrib;\n                audioVisual.CodigoCosolidacaoCCDtl = consolidacaoFinal.DadosConsolidacaoDtlCC.CodConsolidDistribDtl;\n                audioVisual.CodigoCosolidacaoAADtl = consolidacaoFinal.DadosConsolidacaoDtlAA.CodConsolidDistribDtl;\n\n                await context.AddAsync(InsertDistRolOrigemExecucao(audioVisual));\n\n                if (consolidacaoFinal.ConsolidacaoAA != null && consolidacaoFinal.ConsolidacaoAA.Count() > 0)\n                {\n                    await context.DistPonto.AddRangeAsync(InsertDistPonto(audioVisual, consolidacaoFinal.ConsolidacaoAA, consolidacaoFinal.DadosConsolidacaoDtlAA.CodConsolidDistribDtl));\n                    await context.DistExecucaoSumario.AddRangeAsync(InsertDistExecucaoSumario(audioVisual, consolidacaoFinal.ConsolidacaoAA, consolidacaoFinal.DadosConsolidacaoDtlAA.CodConsolidDistribDtl));\n                    await context.DistConsolidacaoAud.AddRangeAsync(InsertConsolidacaoAUD(audioVisual, consolidacaoFinal.ConsolidacaoAA, consolidacaoFinal.DadosConsolidacaoDtlAA.CodConsolidDistribDtl));\n                }\n\n                if (consolidacaoFinal.ConsolidacaoCC != null && consolidacaoFinal.ConsolidacaoCC.Count() > 0)\n                {\n                    await context.DistPonto.AddRangeAsync(InsertDistPonto(audioVisual, consolidacaoFinal.ConsolidacaoCC, consolidacaoFinal.DadosConsolidacaoDtlCC.CodConsolidDistribDtl));\n                    await context.DistExecucaoSumario.AddRangeAsync(InsertDistExecucaoSumario(audioVisual, consolidacaoFinal.ConsolidacaoCC, consolidacaoFinal.DadosConsolidacaoDtlCC.CodConsolidDistribDtl));\n                    await context.DistConsolidacaoAud.AddRangeAsync(InsertConsolidacaoAUD(audioVisual, consolidacaoFinal.ConsolidacaoCC, consolidacaoFinal.DadosConsolidacaoDtlCC.CodConsolidDistribDtl));\n                }\n\n                await context.SaveChangesAsync();\n\n                await SendMessageToTopic(audioVisual);\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorAudiovisualSemRegistrosSemCache"
                           },
                           {
                              "type": "IRetencaoService",
                              "method": "RetencaoPorAudiovisualSemRegistrosSemCache"
                           },
                           {
                              "type": "ICacheService",
                              "method": "Adicionar"
                           },
                           {
                              "type": "ICacheService",
                              "method": "Adicionar"
                           },
                           {
                              "type": "ConsolidacaoUtils",
                              "method": "GerarConsolidacao"
                           },
                           {
                              "type": "IndSituacaoAudiovisual",
                              "method": "Trim"
                           },
                           {
                              "type": "ObrasMusicais",
                              "method": "Count"
                           },
                           {
                              "type": "context",
                              "method": "AddAsync"
                           },
                           {
                              "type": "context",
                              "method": "AddAsync"
                           },
                           {
                              "type": "context",
                              "method": "AddAsync"
                           },
                           {
                              "type": "context",
                              "method": "AddAsync"
                           },
                           {
                              "type": "SdAvRolObraFonoAudio",
                              "method": "Where"
                           },
                           {
                              "type": "context",
                              "method": "SaveChangesAsync"
                           },
                           {
                              "type": "context",
                              "method": "AddAsync"
                           },
                           {
                              "type": "ConsolidacaoAA",
                              "method": "Count"
                           },
                           {
                              "type": "DistPonto",
                              "method": "AddRangeAsync"
                           },
                           {
                              "type": "DistExecucaoSumario",
                              "method": "AddRangeAsync"
                           },
                           {
                              "type": "DistConsolidacaoAud",
                              "method": "AddRangeAsync"
                           },
                           {
                              "type": "ConsolidacaoCC",
                              "method": "Count"
                           },
                           {
                              "type": "DistPonto",
                              "method": "AddRangeAsync"
                           },
                           {
                              "type": "DistExecucaoSumario",
                              "method": "AddRangeAsync"
                           },
                           {
                              "type": "DistConsolidacaoAud",
                              "method": "AddRangeAsync"
                           },
                           {
                              "type": "context",
                              "method": "SaveChangesAsync"
                           }
                        ]
                     },
                     "SendMessageToTopic": {
                        "type": "method",
                        "raw": "private async Task SendMessageToTopic(AudioVisualGloboplay audioVisual)\n        {\n            var message = System.Text.Json.JsonSerializer.Serialize(audioVisual);\n\n            if (string.IsNullOrEmpty(message))\n            {\n                _logger.LogError(\"Message to send to the queue is null or empty.\");\n                return;\n            }\n\n            try\n            {\n                var busMessage = new ServiceBusMessage(message);\n\n                await sender.SendMessageAsync(busMessage);\n\n                Console.WriteLine($\"Message sent: {message}\");\n\n                _logger.LogInformation(\"Message sent to the queue: {message}\", message);\n            }\n            catch\n            {\n                throw;\n            }\n            finally\n            {\n                if (sender != null)\n                {\n                    await sender.CloseAsync();\n                }\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "ILogger",
                              "method": "LogError"
                           },
                           {
                              "type": "ILogger",
                              "method": "LogInformation"
                           },
                           {
                              "type": "JsonSerializer",
                              "method": "Serialize"
                           },
                           {
                              "type": "string",
                              "method": "IsNullOrEmpty"
                           },
                           {
                              "type": "sender",
                              "method": "SendMessageAsync"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "sender",
                              "method": "CloseAsync"
                           }
                        ]
                     },
                     "TemFonogramasComMaisDe50Titulares": {
                        "type": "method",
                        "raw": "private bool TemFonogramasComMaisDe50Titulares(AudioVisualGloboplay audioVisual)\n        {\n            // Verificar se há fonogramas ou titulares nulos\n            if (audioVisual.Fonogramas == null || audioVisual.TitularesFonograma == null)\n            {\n                return false;\n            }\n\n            // Criar um HashSet com os códigos dos fonogramas válidos para busca rápida\n            var codigosFonogramas = new HashSet<long>(\n                audioVisual.Fonogramas.Where(f => f != null).Select(f => f.Fonograma.Value)\n            );\n\n            if (codigosFonogramas.Count == 0)\n            {\n                return false;\n            }\n\n            // Agrupar os titulares por CodFonograma e verificar se algum grupo tem mais de 50 titulares\n            var fonogramasComMaisDe50Titulares = audioVisual.TitularesFonograma\n                .Where(t => codigosFonogramas.Contains(t.CodFonograma))  // Apenas titulares que estão no HashSet de fonogramas\n                .GroupBy(t => t.CodFonograma)  // Agrupa por CodFonograma\n                .Any(g => g.Count() > 50);     // Verifica se algum grupo tem mais de 50 titulares\n\n            return fonogramasComMaisDe50Titulares;\n        }",
                        "dependencies": [
                           {
                              "type": "Fonogramas",
                              "method": "Where"
                           },
                           {
                              "type": "codigosFonogramas",
                              "method": "Contains"
                           },
                           {
                              "type": "g",
                              "method": "Count"
                           }
                        ]
                     }
                  }
               },
               "ConsolidacaoDTO": {
                  "type": "class",
                  "members": {
                     "ConsolidacaoCC": {
                        "type": "property"
                     },
                     "ConsolidacaoAA": {
                        "type": "property"
                     },
                     "DadosConsolidacaoAA": {
                        "type": "property"
                     },
                     "DadosConsolidacaoDtlAA": {
                        "type": "property"
                     },
                     "DadosConsolidacaoCC": {
                        "type": "property"
                     },
                     "DadosConsolidacaoDtlCC": {
                        "type": "property"
                     },
                     "Create": {
                        "type": "method",
                        "raw": "public static ConsolidacaoDTO Create(IEnumerable<ConsolidacaoCC> consolidacaoCC,\n                IEnumerable<ConsolidacaoAA> consolidacaoAA,\n                DistConsolidacao dadosConsolidacaoAA,\n                DistConsolidacaoDtl dadosConsolidacaoDtlAA,\n                DistConsolidacao dadosConsolidacaoCC,\n                DistConsolidacaoDtl dadosConsolidacaoDtlCC\n                )\n            {\n                return new ConsolidacaoDTO(consolidacaoCC, consolidacaoAA, dadosConsolidacaoAA, dadosConsolidacaoDtlAA, dadosConsolidacaoCC, dadosConsolidacaoDtlCC);\n            }"
                     },
                     "InsertConsolidacaoAUD": {
                        "type": "method",
                        "raw": "private IEnumerable<DistConsolidacaoAud> InsertConsolidacaoAUD(AudioVisualGloboplay audioVisual, IEnumerable<IConsolidacao> consolidacao, Int64 codConsolidacaoDtl)\n        {\n\n            return consolidacao.DistinctBy(x => x.Categoria).Select(x =>\n               new DistConsolidacaoAud()\n               {\n                   CodConsolidDistribDtl = codConsolidacaoDtl,\n                   TipCaracteristicaDist = x.Categoria,\n                   QtdTotSegundos = x.SomaExecucaoDasCaracteristica\n               }\n           ).ToList();\n        }",
                        "dependencies": [
                           {
                              "type": "IEnumerable<IConsolidacao>",
                              "method": "DistinctBy"
                           }
                        ]
                     },
                     "InsertDistRolOrigemExecucao": {
                        "type": "method",
                        "raw": "private DistRolOrigemExecucao InsertDistRolOrigemExecucao(AudioVisualGloboplay audioVisual)\n        {\n            var distRolOrigemExec = new DistRolOrigemExecucao()\n            {\n                CodDistribuicao = audioVisual.CodDistribuicao,\n                CodRolMusical = audioVisual.CodRolMusical,\n                CodFonteRol = audioVisual.CodFonteRol,\n                CodTipRol = audioVisual.CodTipRol,\n                CodOrigemRol = audioVisual.CodOrigemRol,\n                CodUsuario = audioVisual.CodUsuario,\n                DatInicioRol = audioVisual.DatInicioRol,\n                DatFimRol = audioVisual.DatFimRol,\n                CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                NroFatorDistribuicao = audioVisual.NroFatorDistribuicao,\n                VlrFatorDistribuicao = audioVisual.VlrFatorDistribuicao,\n                DatExibicaoAudio = audioVisual.DatExibicaoAudio,\n                TipCaracteristicaDist = audioVisual.TipCaracteristicadist,\n                CodObraFonoAudio = audioVisual.CodObraFonoAudio,\n                IndRolRetroativo = \"\",\n                NomInterprete = \"\"\n            };\n            return distRolOrigemExec;\n        }"
                     },
                     "InsertDistPonto": {
                        "type": "method",
                        "raw": "private IEnumerable<DistPonto> InsertDistPonto(AudioVisualGloboplay audioVisual, IEnumerable<IConsolidacao> consolidacao, Int64 codConsolidacaoDtl)\n        {\n            return consolidacao.DistinctBy(x => x.Categoria).Select(x =>\n                new DistPonto()\n                {\n                    CodDistribuicao = audioVisual.CodDistribuicao,\n                    TipParteRepresentada = x.TipParteRepresentada,\n                    VlrPonto = x.Ponto,\n                    TipCaracteristicaDist = x.Categoria,\n                    CodConsoliddistribdtl = codConsolidacaoDtl,\n                    IndPontoSemVerba = \"N\",\n                    TipOrigemExec = \"\",\n                    IndInterprete = \"\"\n                }\n            ).ToList();\n        }",
                        "dependencies": [
                           {
                              "type": "IEnumerable<IConsolidacao>",
                              "method": "DistinctBy"
                           }
                        ]
                     },
                     "InsertDistExecucaoSumario": {
                        "type": "method",
                        "raw": "private IEnumerable<DistExecucaoSumario> InsertDistExecucaoSumario(AudioVisualGloboplay audioVisual, IEnumerable<IConsolidacao> consolidacao, Int64 codConsolidacaoDtl)\n        {\n            return consolidacao.DistinctBy(x => x.Categoria).Select(x =>\n                new DistExecucaoSumario()\n                {\n                    CodDistribuicao = audioVisual.CodDistribuicao,\n                    TipParteRepresentada = x.TipParteRepresentada,\n                    TipCaracteristicaDist = x.Categoria,\n                    NroPesoCaracteristicaDist = x.PesoDaCategoria,\n                    NroExecucoes = x.TotalExecucoes,\n                    NroExecucoesComPesoTotal = x.TotalExecucoesXPesoCategoria,\n                    CodConsolidDistribDtl = codConsolidacaoDtl,\n                    TipOrigemExec = \"\"\n                }\n            ).ToList();\n        }",
                        "dependencies": [
                           {
                              "type": "IEnumerable<IConsolidacao>",
                              "method": "DistinctBy"
                           }
                        ]
                     }
                  }
               }
            },
            "ConsolidacaoService": {
               "ConsolidacaoCacheService": {
                  "type": "class",
                  "members": {
                     "CarregarCache": {
                        "type": "method",
                        "raw": "public async Task CarregarCache()\n        {\n            // Se não estiver em cache, carrega do banco de dados\n            var consolidacoes = await _context.DistConsolidacaoDtl.AsNoTracking().ToListAsync();\n\n            // Armazena no cache\n            _cache.Set(CacheKey, consolidacoes, _cacheOptions);\n        }",
                        "dependencies": [
                           {
                              "type": "ICache",
                              "method": "Set"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "AsNoTracking"
                           }
                        ]
                     },
                     "BuscarConsolidacao": {
                        "type": "method",
                        "raw": "public DistConsolidacaoDtl BuscarConsolidacao(long id)\n        {\n            // Tenta obter os dados do cache\n            if (_cache.TryGetValue(CacheKey, out IEnumerable<DistConsolidacaoDtl> consolidacoes))\n            {\n                return consolidacoes.FirstOrDefault(x => x.CodConsolidDistribDtl == id);\n            }\n\n            // Se os dados não estiverem no cache, retorna null ou outra lógica\n            return null;\n        }",
                        "dependencies": [
                           {
                              "type": "ICache",
                              "method": "TryGetValue"
                           },
                           {
                              "type": "consolidacoes",
                              "method": "FirstOrDefault"
                           }
                        ]
                     },
                     "Adicionar": {
                        "type": "method",
                        "raw": "public void Adicionar(DistConsolidacaoDtl consolidacao)\n        {\n            if (_cache.TryGetValue(CacheKey, out IList<DistConsolidacaoDtl> consolidacoes))\n            {\n                // Cria uma nova lista baseada na lista cacheada\n                var consolidacoesAtualizadas = new List<DistConsolidacaoDtl>(consolidacoes);\n\n                // Verifica se o item já existe na lista\n                if (!consolidacoesAtualizadas.Any(f => f.CodConsolidDistribDtl == consolidacao.CodConsolidDistribDtl))\n                {\n                    // Adiciona o novo item\n                    consolidacoesAtualizadas.Add(consolidacao);\n                }\n\n                // Atualiza o cache com a lista modificada\n                _cache.Set(CacheKey, consolidacoesAtualizadas, _cacheOptions);\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "ICache",
                              "method": "TryGetValue"
                           },
                           {
                              "type": "ICache",
                              "method": "Set"
                           },
                           {
                              "type": "consolidacoesAtualizadas",
                              "method": "Any"
                           },
                           {
                              "type": "consolidacoesAtualizadas",
                              "method": "Add"
                           }
                        ]
                     }
                  }
               }
            },
            "DistribuirVerbaService": {
               "DistribuirVerbaService": {
                  "type": "class",
                  "members": {
                     "DistribuirVerbaFonogramaV2": {
                        "type": "method",
                        "raw": "public DistribuicaoResult DistribuirVerbaFonogramaV2(AudioVisualGloboplay audioVisual\n                                            , MusicaAudio obra\n                                            , IEnumerable<ConsolidacaoCC> consolidacoesCC\n                                            , TitularFonograma titular\n                                            , string tipParteRepresentada\n                                            , DistConsolidacaoDtl consolidacaoDtlCC, decimal rendimento)\n        {\n\n            return DistribuirVerbaV2(audioVisual, obra, consolidacoesCC, titular, tipParteRepresentada, consolidacaoDtlCC, titularFono =>\n            {\n                return new DistTitular\n                {\n                    CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                    CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                    CodFonograma = obra.Fonograma,\n                    CodObraMusEcad = obra.CodObraMusEcad,\n                    CodTitularEcad = titular.CodTitularEcad,\n                    CodCategoria = titular.CodCategoria,\n                    CodSubcategoria = titular.CodSubCategoria,\n                    DatProcessamento = DateTime.UtcNow,\n                    PctParticipacao = titular.PctParticipacao,\n                    PctRendimento = titular.PctParticipacao,\n                    NroExecucoes = audioVisual.NroFatorDistribuicao,\n                    QtdSegundos = obra.QtdDuracaoMusica,\n                    VlrTitConvPctVerba = 0,\n                    TipCaracteristicaDist = obra.CaracteristicaDistribuicao,\n                    NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //202653, //258493855\n                    IndLancamento = \"C\",\n                    IndDesdobradoParam = \"N\"\n                };\n            }, rendimento);\n        }"
                     },
                     "DistribuirVerbaFonograma": {
                        "type": "method",
                        "raw": "public async Task DistribuirVerbaFonograma(AudioVisualGloboplay audioVisual\n                                            , MusicaAudio obra\n                                            , IEnumerable<ConsolidacaoCC> consolidacoesCC\n                                            , TitularFonograma titular\n                                            , string tipParteRepresentada\n                                            , DistConsolidacaoDtl consolidacaoDtlCC)\n        {                                \n\n            await DistribuirVerba(audioVisual, obra, consolidacoesCC, titular, tipParteRepresentada, consolidacaoDtlCC, titularFono =>\n            {\n                return new DistTitular\n                {\n                    CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                    CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                    CodFonograma = obra.Fonograma,\n                    CodObraMusEcad = obra.CodObraMusEcad,\n                    CodTitularEcad = titular.CodTitularEcad,\n                    CodCategoria = titular.CodCategoria,\n                    CodSubcategoria = titular.CodSubCategoria,\n                    DatProcessamento = DateTime.UtcNow,\n                    PctParticipacao = titular.PctParticipacao,\n                    PctRendimento = titular.PctParticipacao,\n                    NroExecucoes = audioVisual.NroFatorDistribuicao,\n                    QtdSegundos = obra.QtdDuracaoMusica,\n                    VlrTitConvPctVerba = 0,\n                    TipCaracteristicaDist = obra.CaracteristicaDistribuicao,\n                    NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //202653, //258493855\n                    IndLancamento = \"C\",\n                    IndDesdobradoParam = \"N\"\n                };\n            });\n        }"
                     },
                     "DistribuirVerbaObra": {
                        "type": "method",
                        "raw": "public async Task DistribuirVerbaObra(AudioVisualGloboplay audioVisual,MusicaAudio obra, IEnumerable<ConsolidacaoAA> consolidacoesAA\n            , TitularObra titular, string tipParteRepresentada, DistConsolidacaoDtl consolidacaoDtlAA)\n        {\n            await DistribuirVerba(audioVisual, obra, consolidacoesAA, titular, tipParteRepresentada, consolidacaoDtlAA, titularObra =>\n            {\n                return new DistTitular\n                {\n                    CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                    CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                    CodFonograma = obra.Fonograma,\n                    CodObraMusEcad = obra.CodObraMusEcad,\n                    CodTitularEcad = titular.CodTitularEcad,\n                    CodCategoria = titular.CodCategoria,\n                    CodSubcategoria = titular.CodSubCategoria,\n                    DatProcessamento = DateTime.UtcNow,\n                    PctParticipacao = titular.PctParticipacao,\n                    PctRendimento = titular.PctParticipacao,\n                    NroExecucoes = audioVisual.NroFatorDistribuicao,\n                    QtdSegundos = obra.QtdDuracaoMusica,\n                    VlrTitConvPctVerba = 0,\n                    TipCaracteristicaDist = obra.CaracteristicaDistribuicao,\n                    NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                    IndLancamento = \"C\",\n                    IndDesdobradoParam = \"N\"\n                };\n            });\n        }"
                     },
                     "DistribuirVerbaObraV2": {
                        "type": "method",
                        "raw": "public DistribuicaoResult DistribuirVerbaObraV2(AudioVisualGloboplay audioVisual, MusicaAudio obra, IEnumerable<ConsolidacaoAA> consolidacoesAA\n            , TitularObra titular, string tipParteRepresentada, DistConsolidacaoDtl consolidacaoDtlAA, decimal rendimento)\n        {\n            return DistribuirVerbaV2(audioVisual, obra, consolidacoesAA, titular, tipParteRepresentada, consolidacaoDtlAA, titularObra =>\n            {\n                return new DistTitular\n                {\n                    CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                    CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                    CodFonograma = obra.Fonograma,\n                    CodObraMusEcad = obra.CodObraMusEcad,\n                    CodTitularEcad = titular.CodTitularEcad,\n                    CodCategoria = titular.CodCategoria,\n                    CodSubcategoria = titular.CodSubCategoria,\n                    DatProcessamento = DateTime.UtcNow,\n                    PctParticipacao = titular.PctParticipacao,\n                    PctRendimento = titular.PctParticipacao,\n                    NroExecucoes = audioVisual.NroFatorDistribuicao,\n                    QtdSegundos = obra.QtdDuracaoMusica,\n                    VlrTitConvPctVerba = 0,\n                    TipCaracteristicaDist = obra.CaracteristicaDistribuicao,\n                    NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                    IndLancamento = \"C\",\n                    IndDesdobradoParam = \"N\"\n                };\n            }, rendimento);\n        }"
                     },
                     "DistribuirVerbaAssociacaoObra": {
                        "type": "method",
                        "raw": "public async Task DistribuirVerbaAssociacaoObra(Int64 codDistTitular, decimal rendimentoObra, AudioVisualGloboplay audioVisual, TitularObra titularObra)\n        {\n            await DistribuirVerbaAssociacao(codDistTitular, rendimentoObra, audioVisual, titularObra);\n        }"
                     },
                     "DistribuirVerbaAssociacaoFonograma": {
                        "type": "method",
                        "raw": "public async Task DistribuirVerbaAssociacaoFonograma(Int64 codDistTitular, decimal rendimentoObra, AudioVisualGloboplay audioVisual, TitularFonograma titularFonograma)\n        {\n            await DistribuirVerbaAssociacao(codDistTitular, rendimentoObra, audioVisual, titularFonograma);\n        }"
                     },
                     "CalcularValorRendimentoIndividual": {
                        "type": "method",
                        "raw": "public decimal CalcularValorRendimentoIndividual(int nroExecucoes, int qtdSegundos, decimal valorPonto)\n        {\n            return (nroExecucoes * qtdSegundos * valorPonto);\n        }"
                     },
                     "GravarRelDemonstrativo": {
                        "type": "method",
                        "raw": "public RelDemonstrativoTitular GravarRelDemonstrativo(AudioVisualGloboplay audioVisual, ITitular titular, MusicaAudio musicaaudio\n            , DistTitular distTitular, decimal valorSociedade, string parteRepresentada)\n        {\n\n            var datInicioCompetenciaDist = new DateTime(2021, 10, 01);\n            var datFimCompetenciaDist = new DateTime(2021, 12, 31);\n\n            var autor = new TitularObra();\n\n            if(parteRepresentada == \"AA\" && musicaaudio.CodObraMusEcad != null)\n                autor = audioVisual.GetAutor(musicaaudio.CodObraMusEcad);\n\n            var rel = new RelDemonstrativoTitular();\n\n            rel.CodDistTitular = distTitular.CodDistTitular;\n            rel.CodSociedade = titular.Representacao?.IndNacionalCol == \"N\" ? titular.Representacao.CodSociedadeRepresenta : titular.Representacao?.CodSociedade;\n            rel.SglSociedade = titular.Representacao?.IndNacionalCol == \"N\" ? titular.Representacao.SglSociedadeRepresenta : titular.Representacao?.SglSociedade;\n            rel.CodCaeSoc = titular.Representacao?.CodCaeSoc;\n            rel.CodSociedadeRep = titular.Representacao?.CodSociedadeRepresenta == null ? null : titular.Representacao.CodSociedadeRepresenta;\n            rel.SglSociedadeRep = titular.Representacao?.SglSociedadeRepresenta;\n            rel.CodCaeSocRep = titular.Representacao?.CodCaeSocRep;\n            rel.TipLancamento = \"D\";\n            rel.IndLancamento = \"C\";\n            rel.TipPagamento = \"D\";\n            rel.CodRubrica = 3991; // audioVisual.Competencia.CodRubrica (nao mapeado);\n            rel.DscRubrica = \"GLOBOPLAY\";\n            rel.NomRubricaIngles = \"GLOBOPLAY\";\n            rel.TipReferenciaRub = \"SA\";\n            rel.CodDistribuicao = audioVisual.CodDistribuicao;\n            rel.TipDistribuicao = \"D\";\n            rel.DatRepasse = new DateTime(2022, 05, 25);\n            rel.DatInicioCompetenciaDist = datInicioCompetenciaDist;\n            rel.DatFimCompetenciaDist = datFimCompetenciaDist;\n            rel.DatPeriodoDist = $\"{datInicioCompetenciaDist.Month}/{datInicioCompetenciaDist.Year} A {datFimCompetenciaDist.Month}/{datFimCompetenciaDist.Year}\";\n            rel.MesPagamento = \"05/2022\";\n            rel.CodObraAudioEcad = audioVisual.CodObraAudioEcad;\n            rel.CodCapiEpisodio = musicaaudio.CodCapEpisodio;\n            rel.CodObraMuseCad = musicaaudio.CodObraMusEcad;\n            rel.CodFonograma = musicaaudio.Fonograma;\n            rel.OrdenaFono = musicaaudio.Fonograma != 0 ? 1 : 0;\n            rel.NroExecucoes = distTitular.NroExecucoes * musicaaudio.QtdDuracaoMusica;\n            rel.PctParticipacaoTit = titular.PctParticipacao;\n            rel.VlrTitular = distTitular.VlrTitular;\n            rel.VlrCorrecaoTitular = distTitular.VlrTitCorrecao;\n            rel.CodParteRepresentada = parteRepresentada;\n            rel.CodCategoria = titular.CodCategoria;\n            rel.DscCategoria = titular.DescricaoCategoria;\n            rel.CodTitularEcad = titular.CodTitularEcad;\n            rel.NomTitular = titular.NomTitular;\n            rel.NomNameTitular = titular.NomNameTitular;\n            rel.NomBuscaTit = titular.NomBusca;\n            rel.TipPessoa = titular.TipoPessoa;\n            rel.CodCaeTit = titular.CodCae;\n            rel.CodCgc = titular.CodCgc;\n            rel.CodCpf = titular.CodCpf;\n            rel.NomPseudoTitular = titular.PseudoNome;\n            rel.CodObraFonoReal = parteRepresentada == \"AA\" ? musicaaudio.CodObraMusEcad : musicaaudio.Fonograma;\n            rel.VlrRendimentoObra = distTitular.VlrRendimento;\n            rel.NomTituloObra = musicaaudio.NomTitulo;\n\n            if (parteRepresentada == \"AA\" && autor != null)\n            {\n                rel.CodTitAutor = autor.CodTitularEcad;\n                var nomeAutor = autor.NomTitular;\n                //TODO: AJUSTAR COLUNA NO BANCO\n                rel.NomAutorObra = nomeAutor.Length > 45 ? nomeAutor.Substring(0, 45) : nomeAutor;\n                rel.NomNomeAutor = autor.NomNameTitular;\n            }\n\n            var nomeInterprete = musicaaudio.Fonograma != null && titular.CodCategoria?.Trim() == \"I\" ? audioVisual.GetInterpretes(musicaaudio.Fonograma.Value) : string.Empty;\n            rel.NomInterpreteObra = nomeInterprete.Length > 100 ? nomeInterprete.Substring(0, 100) : nomeInterprete;\n\n            rel.GraIsrc = musicaaudio.GetIsrcOuGra();\n            rel.NomTituloAudioOrig = audioVisual.NomTituloOrig;\n            rel.NomTituloAudioTrad = audioVisual.NomTituloTrad;\n            rel.NroCapituloAudio = audioVisual.NroCapEpisodio;\n            rel.NomCapituloAudioOrig = audioVisual.NomCapEpisodioOrig;\n            rel.CodSubcategoria = titular.CodSubCategoria;\n            rel.DscSubcategoria = titular.DescricaoSubCategoria;\n            rel.TipGrupo = \"©\";\n            rel.CodCaracteristicaDist = distTitular.TipCaracteristicaDist;\n            //rel.TipExecucao = distTitular.TipCaracteristicaDist;\n            rel.VlrSocietario = valorSociedade;\n            rel.PctPartMusico = distTitular.PctParticipacaoMusico;\n            rel.PctRendimento = distTitular.PctRendimento;\n            rel.NroExecRefDg = distTitular.NroExecRefdg;\n            rel.TipAmostra = \"M\";\n            rel.TipExecucao = \"S\";\n            //Se Tipo Amostra da Rubrica = ‘M’;preencher com ‘S’; senão; preencher com ‘O’\n            rel.NumPesoProgramacao = distTitular.NroPesoProgramacao;\n            rel.IndCableRetransmission = \"N\";\n            rel.TipPagamentoRubrica = \"D\";\n\n\n\n            _context.DemonstrativoTitular.Add(rel);\n            return rel;\n        }",
                        "dependencies": [
                           {
                              "type": "audioVisual",
                              "method": "GetAutor"
                           },
                           {
                              "type": "nomeAutor",
                              "method": "Substring"
                           },
                           {
                              "type": "audioVisual",
                              "method": "GetInterpretes"
                           },
                           {
                              "type": "nomeInterprete",
                              "method": "Substring"
                           },
                           {
                              "type": "musicaaudio",
                              "method": "GetIsrcOuGra"
                           },
                           {
                              "type": "DemonstrativoTitular",
                              "method": "Add"
                           }
                        ]
                     },
                     "GravarRelDemonstrativoV2": {
                        "type": "method",
                        "raw": "public RelDemonstrativoTitular GravarRelDemonstrativoV2(AudioVisualGloboplay audioVisual, ITitular titular, MusicaAudio musicaaudio\n            , DistTitular distTitular, decimal valorSociedade, string parteRepresentada)\n        {\n\n            var datInicioCompetenciaDist = new DateTime(2021, 10, 01);\n            var datFimCompetenciaDist = new DateTime(2021, 12, 31);\n\n            var autor = new TitularObra();\n\n            if (parteRepresentada == \"AA\" && musicaaudio.CodObraMusEcad != null)\n                autor = audioVisual.GetAutor(musicaaudio.CodObraMusEcad);\n\n            var rel = new RelDemonstrativoTitular();\n\n            rel.CodDistTitular = distTitular.CodDistTitular;\n            rel.CodSociedade = titular.Representacao?.IndNacionalCol == \"N\" ? titular.Representacao.CodSociedadeRepresenta : titular.Representacao?.CodSociedade;\n            rel.SglSociedade = titular.Representacao?.IndNacionalCol == \"N\" ? titular.Representacao.SglSociedadeRepresenta : titular.Representacao?.SglSociedade;\n            rel.CodCaeSoc = titular.Representacao?.CodCaeSoc;\n            rel.CodSociedadeRep = titular.Representacao?.CodSociedadeRepresenta == null ? null : titular.Representacao.CodSociedadeRepresenta;\n            rel.SglSociedadeRep = titular.Representacao?.SglSociedadeRepresenta;\n            rel.CodCaeSocRep = titular.Representacao?.CodCaeSocRep;\n            rel.TipLancamento = \"D\";\n            rel.IndLancamento = \"C\";\n            rel.TipPagamento = \"D\";\n            rel.CodRubrica = 3991; // audioVisual.Competencia.CodRubrica (nao mapeado);\n            rel.DscRubrica = \"GLOBOPLAY\";\n            rel.NomRubricaIngles = \"GLOBOPLAY\";\n            rel.TipReferenciaRub = \"SA\";\n            rel.CodDistribuicao = audioVisual.CodDistribuicao;\n            rel.TipDistribuicao = \"D\";\n            rel.DatRepasse = new DateTime(2022, 05, 25);\n            rel.DatInicioCompetenciaDist = datInicioCompetenciaDist;\n            rel.DatFimCompetenciaDist = datFimCompetenciaDist;\n            rel.DatPeriodoDist = $\"{datInicioCompetenciaDist.Month}/{datInicioCompetenciaDist.Year} A {datFimCompetenciaDist.Month}/{datFimCompetenciaDist.Year}\";\n            rel.MesPagamento = \"05/2022\";\n            rel.CodObraAudioEcad = audioVisual.CodObraAudioEcad;\n            rel.CodCapiEpisodio = musicaaudio.CodCapEpisodio;\n            rel.CodObraMuseCad = musicaaudio.CodObraMusEcad;\n            rel.CodFonograma = musicaaudio.Fonograma;\n            rel.OrdenaFono = musicaaudio.Fonograma != 0 ? 1 : 0;\n            rel.NroExecucoes = distTitular.NroExecucoes * musicaaudio.QtdDuracaoMusica;\n            rel.PctParticipacaoTit = titular.PctParticipacao;\n            rel.VlrTitular = distTitular.VlrTitular;\n            rel.VlrCorrecaoTitular = distTitular.VlrTitCorrecao;\n            rel.CodParteRepresentada = parteRepresentada;\n            rel.CodCategoria = titular.CodCategoria;\n            rel.DscCategoria = titular.DescricaoCategoria;\n            rel.CodTitularEcad = titular.CodTitularEcad;\n            rel.NomTitular = titular.NomTitular;\n            rel.NomNameTitular = titular.NomNameTitular;\n            rel.NomBuscaTit = titular.NomBusca;\n            rel.TipPessoa = titular.TipoPessoa;\n            rel.CodCaeTit = titular.CodCae;\n            rel.CodCgc = titular.CodCgc;\n            rel.CodCpf = titular.CodCpf;\n            rel.NomPseudoTitular = titular.PseudoNome;\n            rel.CodObraFonoReal = parteRepresentada == \"AA\" ? musicaaudio.CodObraMusEcad : musicaaudio.Fonograma;\n            rel.VlrRendimentoObra = distTitular.VlrRendimento;\n            rel.NomTituloObra = musicaaudio.NomTitulo;\n\n            if (parteRepresentada == \"AA\" && autor != null)\n            {\n                rel.CodTitAutor = autor.CodTitularEcad;\n                var nomeAutor = autor.NomTitular;\n                //TODO: AJUSTAR COLUNA NO BANCO\n                rel.NomAutorObra = nomeAutor.Length > 45 ? nomeAutor.Substring(0, 45) : nomeAutor;\n                rel.NomNomeAutor = autor.NomNameTitular;\n            }\n\n            var nomeInterprete = musicaaudio.Fonograma != null && titular.CodCategoria?.Trim() == \"I\" ? audioVisual.GetInterpretes(musicaaudio.Fonograma.Value) : string.Empty;\n            rel.NomInterpreteObra = nomeInterprete.Length > 100 ? nomeInterprete.Substring(0, 100) : nomeInterprete;\n\n            rel.GraIsrc = musicaaudio.GetIsrcOuGra();\n            rel.NomTituloAudioOrig = audioVisual.NomTituloOrig;\n            rel.NomTituloAudioTrad = audioVisual.NomTituloTrad;\n            rel.NroCapituloAudio = audioVisual.NroCapEpisodio;\n            rel.NomCapituloAudioOrig = audioVisual.NomCapEpisodioOrig;\n            rel.CodSubcategoria = titular.CodSubCategoria;\n            rel.DscSubcategoria = titular.DescricaoSubCategoria;\n            rel.TipGrupo = \"©\";\n            rel.CodCaracteristicaDist = distTitular.TipCaracteristicaDist;\n            //rel.TipExecucao = distTitular.TipCaracteristicaDist;\n            rel.VlrSocietario = valorSociedade;\n            rel.PctPartMusico = distTitular.PctParticipacaoMusico;\n            rel.PctRendimento = distTitular.PctRendimento;\n            rel.NroExecRefDg = distTitular.NroExecRefdg;\n            rel.TipAmostra = \"M\";\n            rel.TipExecucao = \"S\";\n            //Se Tipo Amostra da Rubrica = ‘M’;preencher com ‘S’; senão; preencher com ‘O’\n            rel.NumPesoProgramacao = distTitular.NroPesoProgramacao;\n            rel.IndCableRetransmission = \"N\";\n            rel.TipPagamentoRubrica = \"D\";\n\n            return rel;\n        }",
                        "dependencies": [
                           {
                              "type": "audioVisual",
                              "method": "GetAutor"
                           },
                           {
                              "type": "nomeAutor",
                              "method": "Substring"
                           },
                           {
                              "type": "audioVisual",
                              "method": "GetInterpretes"
                           },
                           {
                              "type": "nomeInterprete",
                              "method": "Substring"
                           },
                           {
                              "type": "musicaaudio",
                              "method": "GetIsrcOuGra"
                           }
                        ]
                     }
                  }
               }
            },
            "RetencaoService": {
               "RetencaoService": {
                  "type": "class",
                  "members": {
                     "RetencaoPorTitularFonogramaComPendência": {
                        "type": "method",
                        "raw": "public async Task RetencaoPorTitularFonogramaComPendência(AudioVisualGloboplay audioVisual\n                                                                , TitularFonograma titular\n                                                                , MusicaAudio fonograma\n                                                                , IEnumerable<ConsolidacaoCC> consolidacoesCC\n                                                                , string sigla\n                                                                , DistConsolidacaoDtl consolidacaoDtlCC)\n        {\n            var verbaConexa = CalcularVerbaParaDistribuicaoDoAudioVisual(audioVisual.Competencia.VlrVerbaConexa\n                                                            , audioVisual.VlrFatorDistribuicao\n                                                            , audioVisual.Competencia.VerbaTotal);\n\n            var rendimentoFonograma = (long) audioVisual.NroFatorDistribuicao * fonograma.QtdDuracaoMusica * consolidacoesCC\n                                                                                       .Where(x => x.Categoria == fonograma.CaracteristicaDistribuicao)\n                                                                                           .First().Ponto;\n            rendimentoFonograma = rendimentoFonograma;\n\n            var valorTitular = (rendimentoFonograma * titular.PctParticipacao) / 100;\n\n\n            #region parte autoral\n            //var distConsolidacaoDtl = await _context.DistConsolidacaoDtl.FirstAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoCCDtl);\n\n            var consolidacao = await _context.DistConsolidacaoDtl\n            .FirstOrDefaultAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoCCDtl.Value);\n\n            //var consolidacao = _consolidacaoCacheService.BuscarConsolidacao(audioVisual.CodigoCosolidacaoCCDtl.Value);\n\n            var trackedEntity = _context.ChangeTracker.Entries<DistConsolidacaoDtl>().FirstOrDefault(e => e.Entity.CodConsolidDistribDtl == consolidacao.CodConsolidDistribDtl);\n\n            if (trackedEntity == null)\n            {\n                _context.DistConsolidacaoDtl.Attach(consolidacao);\n            }\n\n            //_context.DistConsolidacaoDtl.Attach(consolidacao);\n\n            DistRetido distRetidoCC = new()\n            {\n                CodConsolidDistribDtl = consolidacao,\n                CodObraAudioEcad = fonograma.CodObraAudioEcad,\n                CodCapiEpisodio = fonograma.CodCapEpisodio,\n                CodFonograma = fonograma.Fonograma,\n                CodTitularEcad = titular.CodTitularEcad,\n                CodCategoria = titular.CodCategoria,\n                CodSubcategoria = titular.CodSubCategoria,\n                SglMotivoRetencao = sigla,\n                DatProcessamento = DateTime.UtcNow,\n                //NroExecucoes = audioVisual.NroFatorDistribuicao,\n                QtdSegundos = fonograma.QtdDuracaoMusica,\n                PctParticipacao = titular.PctParticipacao,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrSociedade = valorTitular * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                VlrRendimento = rendimentoFonograma,\n                VlrTitular = (rendimentoFonograma * titular.PctParticipacao) / 100,\n                TipCaracteristicaDist = fonograma.CaracteristicaDistribuicao,\n                PctRendimento = titular.PctParticipacao,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\"\n            };\n            #endregion\n\n            _context.DistRetido.Add(distRetidoCC);\n            await _context.SaveChangesAsync();\n        }",
                        "dependencies": [
                           {
                              "type": "IConsolidacaoCacheService",
                              "method": "BuscarConsolidacao"
                           },
                           {
                              "type": "IContext",
                              "method": "SaveChangesAsync"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "FirstAsync"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistRetido",
                              "method": "Add"
                           }
                        ]
                     },
                     "RetencaoPorTitularFonogramaComPendenciaV2": {
                        "type": "method",
                        "raw": "public DistRetido RetencaoPorTitularFonogramaComPendenciaV2(AudioVisualGloboplay audioVisual\n            , TitularFonograma titular\n            , MusicaAudio fonograma\n            , IEnumerable<ConsolidacaoCC> consolidacoesCC\n            , string sigla,\n            DistConsolidacaoDtl consolidacaoDtlCC, \n            decimal verbaConexa, \n            decimal rendimentoFonograma)\n        {\n            \n            var valorTitular = (rendimentoFonograma * titular.PctParticipacao) / 100;\n\n            #region parte autoral\n\n            //_context.DistConsolidacaoDtl.Attach(consolidacao);\n\n            DistRetido distRetidoCC = new()\n            {\n                CodConsolidDistribDtl = consolidacaoDtlCC,\n                CodObraAudioEcad = fonograma.CodObraAudioEcad,\n                CodCapiEpisodio = fonograma.CodCapEpisodio,\n                CodFonograma = fonograma.Fonograma,\n                CodTitularEcad = titular.CodTitularEcad,\n                CodCategoria = titular.CodCategoria,\n                CodSubcategoria = titular.CodSubCategoria,\n                SglMotivoRetencao = sigla,\n                DatProcessamento = DateTime.UtcNow,\n                //NroExecucoes = audioVisual.NroFatorDistribuicao,\n                QtdSegundos = fonograma.QtdDuracaoMusica,\n                PctParticipacao = titular.PctParticipacao,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrSociedade = valorTitular * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                VlrRendimento = rendimentoFonograma,\n                VlrTitular = (rendimentoFonograma * titular.PctParticipacao) / 100,\n                TipCaracteristicaDist = fonograma.CaracteristicaDistribuicao,\n                PctRendimento = titular.PctParticipacao,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\"\n            };\n            #endregion\n\n            return distRetidoCC;\n        }",
                        "dependencies": [
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           }
                        ]
                     },
                     "RetencaoPorTitularObraComPendência": {
                        "type": "method",
                        "raw": "public async Task RetencaoPorTitularObraComPendência(AudioVisualGloboplay audioVisual\n                                                            , TitularObra titular\n                                                            , MusicaAudio obra\n                                                            , IEnumerable<ConsolidacaoAA> consolidacoesAA\n                                                            , string sigla\n                                                            , DistConsolidacaoDtl consolidacaoDtlAA)\n        {\n            var verbaAutoral = CalcularVerbaParaDistribuicaoDoAudioVisual(audioVisual.Competencia.VlrVerbaAutoral\n                                                                        , audioVisual.VlrFatorDistribuicao\n                                                                        , audioVisual.Competencia.VerbaTotal);\n\n            var rendimentoObra = (decimal) audioVisual.NroFatorDistribuicao * obra.QtdDuracaoMusica * consolidacoesAA\n                                                                                        .Where(x => x.Categoria == obra.CaracteristicaDistribuicao)\n                                                                                            .First().Ponto;\n\n            var valorTitular = (rendimentoObra * titular.PctParticipacao) / 100;\n\n            #region parte autoral\n\n            //var distConsolidacaoDtl = await _context.DistConsolidacaoDtl.FirstAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoAADtl);\n            //consolidacaoDtlAA.CodConsolidDistribDtl = audioVisual.CodigoCosolidacaoAADtl.Value;\n\n            consolidacaoDtlAA = await _context.DistConsolidacaoDtl\n                .FirstOrDefaultAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoAADtl.Value);\n\n            //consolidacaoDtlAA = _consolidacaoCacheService.BuscarConsolidacao(audioVisual.CodigoCosolidacaoAADtl.Value);\n\n            var trackedEntity = _context.ChangeTracker.Entries<DistConsolidacaoDtl>().FirstOrDefault(e => e.Entity.CodConsolidDistribDtl == consolidacaoDtlAA.CodConsolidDistribDtl);\n\n            if (trackedEntity == null)\n            {\n                _context.DistConsolidacaoDtl.Attach(consolidacaoDtlAA);\n            }\n\n            //_context.DistConsolidacaoDtl.Attach(consolidacaoDtlAA);\n\n            DistRetido distRetidoAA = new()\n            {\n                CodConsolidDistribDtl = consolidacaoDtlAA,\n                CodObraAudioEcad = obra.CodObraAudioEcad,\n                CodObraMusEcad = obra.CodObraMusEcad,\n                CodCapiEpisodio = obra.CodCapEpisodio,\n                CodFonograma = obra.Fonograma,\n                CodTitularEcad = titular.CodTitularEcad,\n                CodCategoria = titular.CodCategoria,\n                CodSubcategoria = titular.CodSubCategoria,\n                SglMotivoRetencao = sigla,\n                DatProcessamento = DateTime.UtcNow,\n                //NroExecucoes = audioVisual.NroFatorDistribuicao,\n                QtdSegundos = obra.QtdDuracaoMusica,\n                PctParticipacao = titular.PctParticipacao,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrSociedade = valorTitular * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                VlrRendimento = rendimentoObra,\n                VlrTitular = (rendimentoObra * titular.PctParticipacao) / 100,\n                TipCaracteristicaDist = obra.CaracteristicaDistribuicao,\n                PctRendimento = titular.PctParticipacao,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\"\n            };\n\n            //_context.DistConsolidacaoDtl.Attach(distRetidoAA.CodConsolidDistribDtl);\n            #endregion\n\n            _context.DistRetido.Add(distRetidoAA);\n            await _context.SaveChangesAsync();\n        }",
                        "dependencies": [
                           {
                              "type": "IConsolidacaoCacheService",
                              "method": "BuscarConsolidacao"
                           },
                           {
                              "type": "IContext",
                              "method": "SaveChangesAsync"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "FirstAsync"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistRetido",
                              "method": "Add"
                           }
                        ]
                     },
                     "RetencaoPorTitularObraComPendênciaV2": {
                        "type": "method",
                        "raw": "public DistRetido RetencaoPorTitularObraComPendênciaV2(AudioVisualGloboplay audioVisual\n                                                            , TitularObra titular\n                                                            , MusicaAudio obra\n                                                            , IEnumerable<ConsolidacaoAA> consolidacoesAA\n                                                            , string sigla\n                                                            , DistConsolidacaoDtl consolidacaoDtlAA, decimal verbaAutoral, decimal rendimentoObra)\n        {\n            var valorTitular = (rendimentoObra * titular.PctParticipacao) / 100;\n\n            #region parte autoral\n\n\n            DistRetido distRetidoAA = new()\n            {\n                CodConsolidDistribDtl = consolidacaoDtlAA,\n                CodObraAudioEcad = obra.CodObraAudioEcad,\n                CodObraMusEcad = obra.CodObraMusEcad,\n                CodCapiEpisodio = obra.CodCapEpisodio,\n                CodFonograma = obra.Fonograma,\n                CodTitularEcad = titular.CodTitularEcad,\n                CodCategoria = titular.CodCategoria,\n                CodSubcategoria = titular.CodSubCategoria,\n                SglMotivoRetencao = sigla,\n                DatProcessamento = DateTime.UtcNow,\n                //NroExecucoes = audioVisual.NroFatorDistribuicao,\n                QtdSegundos = obra.QtdDuracaoMusica,\n                PctParticipacao = titular.PctParticipacao,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrSociedade = valorTitular * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                VlrRendimento = rendimentoObra,\n                VlrTitular = (rendimentoObra * titular.PctParticipacao) / 100,\n                TipCaracteristicaDist = obra.CaracteristicaDistribuicao,\n                PctRendimento = titular.PctParticipacao,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\"\n            };\n\n            return distRetidoAA;\n            #endregion\n        }"
                     },
                     "RetencaoPorOFonogramaComPendência": {
                        "type": "method",
                        "raw": "public async Task RetencaoPorOFonogramaComPendência(AudioVisualGloboplay audioVisual, MusicaAudio fonograma, IEnumerable<ConsolidacaoCC> consolidacaoCC, string sigla, DistConsolidacaoDtl consolidacaoDtlCC)\n        {\n            var valoresCalculados = (long) audioVisual.NroFatorDistribuicao * fonograma.QtdDuracaoMusica * consolidacaoCC.First(c => c.Categoria == fonograma.CaracteristicaDistribuicao).Ponto;\n\n            //var distConsolidacaoDtl = await _context.DistConsolidacaoDtl.FirstAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoCCDtl);\n\n            //consolidacaoDtlCC = _consolidacaoCacheService.BuscarConsolidacao(audioVisual.CodigoCosolidacaoCCDtl.Value);\n            //_context.DistConsolidacaoDtl.Attach(consolidacaoDtlCC);\n\n            consolidacaoDtlCC = await _context.DistConsolidacaoDtl\n                .FirstOrDefaultAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoCCDtl.Value);\n\n            var trackedEntity = _context.ChangeTracker.Entries<DistConsolidacaoDtl>().FirstOrDefault(e => e.Entity.CodConsolidDistribDtl == consolidacaoDtlCC.CodConsolidDistribDtl);\n\n            if (trackedEntity == null)\n            {\n                _context.DistConsolidacaoDtl.Attach(consolidacaoDtlCC);\n            }\n\n            DistRetido distRetido = new()\n            {\n                CodConsolidDistribDtl = consolidacaoDtlCC,\n                CodObraAudioEcad = fonograma.CodObraAudioEcad,\n                CodCapiEpisodio = fonograma.CodCapEpisodio,\n                CodFonograma = fonograma.Fonograma,\n                SglMotivoRetencao = sigla,\n                DatProcessamento = DateTime.UtcNow,\n                //NroExecucoes = audioVisual.NroFatorDistribuicao,\n                QtdSegundos = fonograma.QtdDuracaoMusica,\n                PctParticipacao = 100.0M,\n                VlrTitular = valoresCalculados,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrRendimento = valoresCalculados,\n                VlrSociedade = valoresCalculados * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                TipCaracteristicaDist = fonograma.CaracteristicaDistribuicao,\n                PctRendimento = 100.0M,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\",\n                CodCategoria = \"\",\n                CodSubcategoria = \"\"\n            };\n\n            _context.DistRetido.Add(distRetido);\n            \n            await _context.SaveChangesAsync();\n        }",
                        "dependencies": [
                           {
                              "type": "IConsolidacaoCacheService",
                              "method": "BuscarConsolidacao"
                           },
                           {
                              "type": "IContext",
                              "method": "SaveChangesAsync"
                           },
                           {
                              "type": "IEnumerable<ConsolidacaoCC>",
                              "method": "First"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "FirstAsync"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistRetido",
                              "method": "Add"
                           }
                        ]
                     },
                     "RetencaoPorOFonogramaComPendênciaV2": {
                        "type": "method",
                        "raw": "public async Task RetencaoPorOFonogramaComPendênciaV2(AudioVisualGloboplay audioVisual, MusicaAudio fonograma, IEnumerable<ConsolidacaoCC> consolidacaoCC, string sigla, DistConsolidacaoDtl consolidacaoDtlCC, decimal valoresCalculados)\n        {\n\n            DistRetido distRetido = new()\n            {\n                CodConsolidDistribDtl = consolidacaoDtlCC,\n                CodObraAudioEcad = fonograma.CodObraAudioEcad,\n                CodCapiEpisodio = fonograma.CodCapEpisodio,\n                CodFonograma = fonograma.Fonograma,\n                SglMotivoRetencao = sigla,\n                DatProcessamento = DateTime.UtcNow,\n                //NroExecucoes = audioVisual.NroFatorDistribuicao,\n                QtdSegundos = fonograma.QtdDuracaoMusica,\n                PctParticipacao = 100.0M,\n                VlrTitular = valoresCalculados,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrRendimento = valoresCalculados,\n                VlrSociedade = valoresCalculados * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                TipCaracteristicaDist = fonograma.CaracteristicaDistribuicao,\n                PctRendimento = 100.0M,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\",\n                CodCategoria = \"\",\n                CodSubcategoria = \"\"\n            };\n\n            await _context.DistRetido.AddAsync(distRetido);\n        }",
                        "dependencies": [
                           {
                              "type": "DistRetido",
                              "method": "AddAsync"
                           }
                        ]
                     },
                     "RetencaoPorObraMusicalComPendência": {
                        "type": "method",
                        "raw": "public async Task RetencaoPorObraMusicalComPendência(AudioVisualGloboplay audioVisual, MusicaAudio obraMusical, IEnumerable<ConsolidacaoAA> consolidacaoAA, string sigla, DistConsolidacaoDtl consolidacaoDtlAA)\n        {\n\n           var valoresCalculados = (long) audioVisual.NroFatorDistribuicao * obraMusical.QtdDuracaoMusica * consolidacaoAA.First(c => c.Categoria == obraMusical.CaracteristicaDistribuicao).Ponto;\n\n            consolidacaoDtlAA = await _context.DistConsolidacaoDtl\n            .FirstOrDefaultAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoAADtl.Value);\n            //consolidacaoDtlAA = _consolidacaoCacheService.BuscarConsolidacao(audioVisual.CodigoCosolidacaoAADtl.Value);\n            //_context.DistConsolidacaoDtl.Attach(consolidacaoDtlAA);\n\n            var trackedEntity = _context.ChangeTracker.Entries<DistConsolidacaoDtl>().FirstOrDefault(e => e.Entity.CodConsolidDistribDtl == consolidacaoDtlAA.CodConsolidDistribDtl);\n\n            if (trackedEntity == null)\n            {\n                _context.DistConsolidacaoDtl.Attach(consolidacaoDtlAA);\n            }\n\n            DistRetido distRetido = new()\n            {\n                CodConsolidDistribDtl = consolidacaoDtlAA,\n                CodObraAudioEcad = obraMusical.CodObraAudioEcad,\n                CodCapiEpisodio = obraMusical.CodCapEpisodio,\n                CodFonograma = obraMusical.Fonograma,\n                CodObraMusEcad = obraMusical.CodObraMusEcad,\n                SglMotivoRetencao = sigla,\n                DatProcessamento = DateTime.UtcNow,\n                //NroExecucoes = audioVisual.NroFatorDistribuicao,\n                QtdSegundos = obraMusical.QtdDuracaoMusica,\n                PctParticipacao = 100.0M,\n                VlrTitular = valoresCalculados,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrRendimento = valoresCalculados,\n                VlrSociedade = valoresCalculados * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                TipCaracteristicaDist = obraMusical.CaracteristicaDistribuicao,\n                PctRendimento = 100.0M,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\",\n                CodCategoria = \"\",\n                CodSubcategoria = \"\"\n            };\n\n            _context.DistRetido.Add(distRetido);\n            await _context.SaveChangesAsync();\n        }",
                        "dependencies": [
                           {
                              "type": "IConsolidacaoCacheService",
                              "method": "BuscarConsolidacao"
                           },
                           {
                              "type": "IContext",
                              "method": "SaveChangesAsync"
                           },
                           {
                              "type": "IEnumerable<ConsolidacaoAA>",
                              "method": "First"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistRetido",
                              "method": "Add"
                           }
                        ]
                     },
                     "RetencaoPorAudiovisualSemRegistros": {
                        "type": "method",
                        "raw": "public async Task RetencaoPorAudiovisualSemRegistros(AudioVisualGloboplay audioVisual, string sigla, DistConsolidacaoDtl distConsolidacaoDtlAA, DistConsolidacaoDtl distConsolidacaoDtlCC)\n        {\n            var verbaAutoral = CalcularVerbaParaDistribuicaoDoAudioVisual(audioVisual.Competencia.VlrVerbaAutoral\n                                                                            , audioVisual.VlrFatorDistribuicao\n                                                                            , audioVisual.Competencia.VerbaTotal);\n            var verbaConexa = CalcularVerbaParaDistribuicaoDoAudioVisual(audioVisual.Competencia.VlrVerbaConexa\n                                                                       , audioVisual.VlrFatorDistribuicao\n                                                                       , audioVisual.Competencia.VerbaTotal);\n\n            #region parte autoral\n\n            //var distConsolidacaoAADtl = await _context.DistConsolidacaoDtl.FirstAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoAADtl);\n\n\n            distConsolidacaoDtlAA = await _context.DistConsolidacaoDtl\n            .FirstOrDefaultAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoAADtl.Value);\n\n            //distConsolidacaoDtlAA = _consolidacaoCacheService.BuscarConsolidacao(audioVisual.CodigoCosolidacaoAADtl.Value);\n\n            distConsolidacaoDtlAA.TipSituacaoExecucao = \"R\";\n            distConsolidacaoDtlAA.SglMotivoRetencao = sigla;\n\n            distConsolidacaoDtlCC = await _context.DistConsolidacaoDtl\n            .FirstOrDefaultAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoCCDtl.Value);\n            //distConsolidacaoDtlCC = _consolidacaoCacheService.BuscarConsolidacao(audioVisual.CodigoCosolidacaoCCDtl.Value);\n\n            distConsolidacaoDtlCC.TipSituacaoExecucao = \"R\";\n            distConsolidacaoDtlCC.SglMotivoRetencao = sigla;\n\n            var trackedEntity = _context.ChangeTracker.Entries<DistConsolidacaoDtl>().FirstOrDefault(e => e.Entity.CodConsolidDistribDtl == distConsolidacaoDtlAA.CodConsolidDistribDtl);\n\n            if (trackedEntity == null)\n            {\n                _context.DistConsolidacaoDtl.Attach(distConsolidacaoDtlAA);\n            }\n\n            trackedEntity = _context.ChangeTracker.Entries<DistConsolidacaoDtl>().FirstOrDefault(e => e.Entity.CodConsolidDistribDtl == distConsolidacaoDtlCC.CodConsolidDistribDtl);\n\n            if (trackedEntity == null)\n            {\n                _context.DistConsolidacaoDtl.Attach(distConsolidacaoDtlCC);\n            }\n\n            //_context.DistConsolidacaoDtl.Attach(distConsolidacaoDtlAA);\n            //_context.DistConsolidacaoDtl.Attach(distConsolidacaoDtlCC);\n\n\n            DistRetido distRetidoAA = new()\n            {\n                CodConsolidDistribDtl = distConsolidacaoDtlAA,\n                CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                VlrRendimento = verbaAutoral,\n                VlrTitular = verbaAutoral,\n                SglMotivoRetencao = sigla,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrSociedade = verbaAutoral * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                TipCaracteristicaDist = \"DM\",\n                DatProcessamento = DateTime.UtcNow,\n                PctParticipacao = 100,\n                PctRendimento = 100,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\"\n            };\n            #endregion\n\n            #region parte conexa\n\n            DistRetido distRetidoCC = new DistRetido()\n            {\n                CodConsolidDistribDtl = distConsolidacaoDtlCC,\n                CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                VlrRendimento = verbaConexa,\n                VlrTitular = verbaConexa,\n                SglMotivoRetencao = sigla,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrSociedade = verbaConexa * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                TipCaracteristicaDist = \"DM\",\n                DatProcessamento = DateTime.UtcNow,\n                PctParticipacao = 100,\n                PctRendimento = 100,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\"\n            };\n            #endregion\n\n            _context.DistRetido.Add(distRetidoAA);\n            _context.DistRetido.Add(distRetidoCC);\n\n            _context.Update(distConsolidacaoDtlAA);\n            _context.Update(distConsolidacaoDtlCC);\n\n            await _context.SaveChangesAsync();\n        }",
                        "dependencies": [
                           {
                              "type": "IConsolidacaoCacheService",
                              "method": "BuscarConsolidacao"
                           },
                           {
                              "type": "IConsolidacaoCacheService",
                              "method": "BuscarConsolidacao"
                           },
                           {
                              "type": "IContext",
                              "method": "Update"
                           },
                           {
                              "type": "IContext",
                              "method": "Update"
                           },
                           {
                              "type": "IContext",
                              "method": "SaveChangesAsync"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "FirstAsync"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistRetido",
                              "method": "Add"
                           },
                           {
                              "type": "DistRetido",
                              "method": "Add"
                           }
                        ]
                     },
                     "RetencaoPorAudiovisualSemRegistrosSemCache": {
                        "type": "method",
                        "raw": "public async Task RetencaoPorAudiovisualSemRegistrosSemCache(AudioVisualGloboplay audioVisual, string sigla, DistConsolidacaoDtl distConsolidacaoDtlAA, DistConsolidacaoDtl distConsolidacaoDtlCC)\n        {\n            var verbaAutoral = CalcularVerbaParaDistribuicaoDoAudioVisual(audioVisual.Competencia.VlrVerbaAutoral\n                                                                            , audioVisual.VlrFatorDistribuicao\n                                                                            , audioVisual.Competencia.VerbaTotal);\n            var verbaConexa = CalcularVerbaParaDistribuicaoDoAudioVisual(audioVisual.Competencia.VlrVerbaConexa\n                                                                       , audioVisual.VlrFatorDistribuicao\n                                                                       , audioVisual.Competencia.VerbaTotal);\n\n            #region parte autoral\n\n            //var distConsolidacaoAADtl = await _context.DistConsolidacaoDtl.FirstAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoAADtl);\n\n\n            //distConsolidacaoDtlAA = await _context.DistConsolidacaoDtl\n            //.FirstOrDefaultAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoAADtl.Value);\n\n            //distConsolidacaoDtlAA = _consolidacaoCacheService.BuscarConsolidacao(audioVisual.CodigoCosolidacaoAADtl.Value);\n\n            distConsolidacaoDtlAA.TipSituacaoExecucao = \"R\";\n            distConsolidacaoDtlAA.SglMotivoRetencao = sigla;\n\n            //distConsolidacaoDtlCC = await _context.DistConsolidacaoDtl\n            //.FirstOrDefaultAsync(x => x.CodConsolidDistribDtl == audioVisual.CodigoCosolidacaoCCDtl.Value);\n            //distConsolidacaoDtlCC = _consolidacaoCacheService.BuscarConsolidacao(audioVisual.CodigoCosolidacaoCCDtl.Value);\n\n            distConsolidacaoDtlCC.TipSituacaoExecucao = \"R\";\n            distConsolidacaoDtlCC.SglMotivoRetencao = sigla;\n\n            //_context.DistConsolidacaoDtl.Attach(distConsolidacaoDtlAA);\n            //_context.DistConsolidacaoDtl.Attach(distConsolidacaoDtlCC);\n\n\n            DistRetido distRetidoAA = new()\n            {\n                CodConsolidDistribDtl = distConsolidacaoDtlAA,\n                CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                VlrRendimento = verbaAutoral,\n                VlrTitular = verbaAutoral,\n                SglMotivoRetencao = sigla,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrSociedade = verbaAutoral * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                TipCaracteristicaDist = \"DM\",\n                DatProcessamento = DateTime.UtcNow,\n                PctParticipacao = 100,\n                PctRendimento = 100,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\"\n            };\n            #endregion\n\n            #region parte conexa\n\n            DistRetido distRetidoCC = new DistRetido()\n            {\n                CodConsolidDistribDtl = distConsolidacaoDtlCC,\n                CodObraAudioEcad = audioVisual.CodObraAudioEcad,\n                CodCapiEpisodio = audioVisual.CodCapiEpisodio,\n                VlrRendimento = verbaConexa,\n                VlrTitular = verbaConexa,\n                SglMotivoRetencao = sigla,\n                IndDesdobradoParam = \"N\",\n                DatUltimaCorrecao = new DateTime(2022, 05, 25),\n                VlrSociedade = verbaConexa * (audioVisual.Competencia.VlrVerbaSocietaria / (audioVisual.Competencia.VlrVerbaAutoral + audioVisual.Competencia.VlrVerbaConexa)),\n                TipCaracteristicaDist = \"DM\",\n                DatProcessamento = DateTime.UtcNow,\n                PctParticipacao = 100,\n                PctRendimento = 100,\n                NroExecRefdg = (int)audioVisual.SomaFatorDistribuicao, //258493855\n                TipOrigemExec = \"S\"\n            };\n            #endregion\n\n\n            distRetidoAA.CodCategoria = string.IsNullOrEmpty(distRetidoAA.CodCategoria) ? \"\" : distRetidoAA.CodCategoria;\n            distRetidoAA.CodSubcategoria = string.IsNullOrEmpty(distRetidoAA.CodSubcategoria) ? \"\" : distRetidoAA.CodSubcategoria;\n\n            distRetidoCC.CodCategoria = string.IsNullOrEmpty(distRetidoCC.CodCategoria) ? \"\" : distRetidoCC.CodCategoria;\n            distRetidoCC.CodSubcategoria = string.IsNullOrEmpty(distRetidoCC.CodSubcategoria) ? \"\" : distRetidoCC.CodSubcategoria;\n\n            _context.DistRetido.Add(distRetidoAA);\n            _context.DistRetido.Add(distRetidoCC);\n\n            //_context.Update(distConsolidacaoDtlAA);\n            //_context.Update(distConsolidacaoDtlCC);\n\n            await _context.SaveChangesAsync();\n        }",
                        "dependencies": [
                           {
                              "type": "IConsolidacaoCacheService",
                              "method": "BuscarConsolidacao"
                           },
                           {
                              "type": "IConsolidacaoCacheService",
                              "method": "BuscarConsolidacao"
                           },
                           {
                              "type": "IContext",
                              "method": "Update"
                           },
                           {
                              "type": "IContext",
                              "method": "Update"
                           },
                           {
                              "type": "IContext",
                              "method": "SaveChangesAsync"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "FirstAsync"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "DistConsolidacaoDtl",
                              "method": "Attach"
                           },
                           {
                              "type": "string",
                              "method": "IsNullOrEmpty"
                           },
                           {
                              "type": "string",
                              "method": "IsNullOrEmpty"
                           },
                           {
                              "type": "string",
                              "method": "IsNullOrEmpty"
                           },
                           {
                              "type": "string",
                              "method": "IsNullOrEmpty"
                           },
                           {
                              "type": "DistRetido",
                              "method": "Add"
                           },
                           {
                              "type": "DistRetido",
                              "method": "Add"
                           }
                        ]
                     },
                     "CalcularVerbaParaDistribuicaoDoAudioVisual": {
                        "type": "method",
                        "raw": "public decimal CalcularVerbaParaDistribuicaoDoAudioVisual(decimal Verba, decimal vlrFatorDistribuicao, decimal verbaTotal)\n        {\n            return  (Verba * vlrFatorDistribuicao) / verbaTotal;\n        }"
                     }
                  }
               }
            }
         },
         "ValueObjects": {
            "Consolidacao": {
               "ConsolidacaoAA": {
                  "type": "class",
                  "members": {
                     "CodAudioVisual": {
                        "type": "property"
                     },
                     "OcorrenciasAudiovisual": {
                        "type": "property"
                     },
                     "ExecucoesMusica": {
                        "type": "property"
                     },
                     "Categoria": {
                        "type": "property"
                     },
                     "TotalExecucoes": {
                        "type": "property"
                     },
                     "TotalExecucoesXPesoCategoria": {
                        "type": "property"
                     },
                     "SomaExecucaoDasCaracteristica": {
                        "type": "property"
                     },
                     "Ponto": {
                        "type": "property"
                     }
                  }
               },
               "ConsolidacaoCC": {
                  "type": "class",
                  "members": {
                     "CodAudioVisual": {
                        "type": "property"
                     },
                     "OcorrenciasAudiovisual": {
                        "type": "property"
                     },
                     "ExecucoesMusica": {
                        "type": "property"
                     },
                     "Categoria": {
                        "type": "property"
                     },
                     "TotalExecucoes": {
                        "type": "property"
                     },
                     "TotalExecucoesXPesoCategoria": {
                        "type": "property"
                     },
                     "SomaExecucaoDasCaracteristica": {
                        "type": "property"
                     },
                     "Ponto": {
                        "type": "property"
                     }
                  }
               }
            },
            "EnumHelper": {
               "EnumHelper": {
                  "type": "class",
                  "members": {}
               }
            }
         }
      },
      "EcadGloboPlay.Domain.Tests": {
         "RetencaoServiceTest": {
            "RetencaoServiceTests": {
               "type": "class",
               "members": {
                  "RetencaoPorTitularObraComPendência_ShouldAddRecords": {
                     "type": "method",
                     "raw": "public void RetencaoPorTitularObraComPendência_ShouldAddRecords()\n        {\n            // Arrange\n            var audioVisual = new AudioVisualGloboplay { CodDistribuicao = 123, NroFatorDistribuicao = 1, VlrFatorDistribuicao = 1.0M, Competencia = new Competencia { VlrVerbaAutoral = 100.0M } };\n            var titular = new TitularObra { CodTitularEcad = 1, PctParticipacao = 50.0M, CodCategoria = \"A\", CodSubCategoria = \"B\" };\n            var obra = new MusicaAudio { CodObraMusEcad = 1, QtdDuracaoMusica = 60, CaracteristicaDistribuicao = \"X\" };\n            var consolidacoesAA = new List<ConsolidacaoAA> { new ConsolidacaoAA { Categoria = \"X\", Ponto = 1.0M } };\n\n            // Act\n            _service.RetencaoPorTitularObraComPendência(audioVisual, titular, obra, consolidacoesAA, \"SIGLA\");\n\n            // Assert\n            _mockContext.Verify(m => m.DistConsolidacao.Add(It.IsAny<DistConsolidacao>()), Times.Once());\n            _mockContext.Verify(m => m.DistConsolidacaoDtl.Add(It.IsAny<DistConsolidacaoDtl>()), Times.Once());\n            _mockContext.Verify(m => m.DistRetido.Add(It.IsAny<DistRetido>()), Times.Once());\n            _mockContext.Verify(m => m.SaveChanges(), Times.Once());\n        }",
                     "dependencies": [
                        {
                           "type": "IService",
                           "method": "RetencaoPorTitularObraComPendência"
                        },
                        {
                           "type": "IMockContext",
                           "method": "Verify"
                        },
                        {
                           "type": "IMockContext",
                           "method": "Verify"
                        },
                        {
                           "type": "IMockContext",
                           "method": "Verify"
                        },
                        {
                           "type": "IMockContext",
                           "method": "Verify"
                        },
                        {
                           "type": "DistConsolidacao",
                           "method": "Add"
                        },
                        {
                           "type": "Times",
                           "method": "Once"
                        },
                        {
                           "type": "DistConsolidacaoDtl",
                           "method": "Add"
                        },
                        {
                           "type": "Times",
                           "method": "Once"
                        },
                        {
                           "type": "DistRetido",
                           "method": "Add"
                        },
                        {
                           "type": "Times",
                           "method": "Once"
                        },
                        {
                           "type": "m",
                           "method": "SaveChanges"
                        },
                        {
                           "type": "Times",
                           "method": "Once"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboplay.DomainRead": {
         "data": {
            "DapperDAO": {
               "MusicaAudioDTO": {
                  "type": "class",
                  "members": {
                     "cod_musicaaudio": {
                        "type": "property"
                     },
                     "cod_obraaudioecad": {
                        "type": "property"
                     },
                     "cod_fonograma": {
                        "type": "property"
                     },
                     "cod_obramusecad": {
                        "type": "property"
                     },
                     "cod_pout_pourrit": {
                        "type": "property"
                     },
                     "nro_ocorrencia": {
                        "type": "property"
                     },
                     "pct_peso": {
                        "type": "property"
                     },
                     "cod_capiepisodio": {
                        "type": "property"
                     },
                     "cod_caracteristica": {
                        "type": "property"
                     },
                     "qtd_duracaomusica": {
                        "type": "property"
                     },
                     "dat_inclusao": {
                        "type": "property"
                     }
                  }
               },
               "DapperDAO": {
                  "type": "class",
                  "members": {
                     "GetConnection": {
                        "type": "method",
                        "raw": "public SqlConnection GetConnection()\n        {\n            return new SqlConnection(_connectionString);\n        }"
                     },
                     "GetCompetenciaGloboplay": {
                        "type": "method",
                        "raw": "public async Task<Competencia> GetCompetenciaGloboplay()\n        {\n            using (var connection = GetConnection())\n                return await connection.QueryFirstAsync<Competencia>(\"SELECT * FROM dbo.VW_COMPETENCIA\");\n        }"
                     },
                     "InsertDistribuicao": {
                        "type": "method",
                        "raw": "public async Task<int> InsertDistribuicao(DadosDistribuicao distribuicao)\n        {\n            using (var connection = GetConnection())\n            {\n\n                var query = @\"\n                INSERT INTO dbo.DISTRIBUICAO \n                (\n                    cod_competencia,\n                    dat_distribuicao,\n                    vlr_verbaautoral,\n                    vlr_verbaconexa,\n                    vlr_verbasocietario\n                )\n                OUTPUT INSERTED.cod_distribuicao\n                VALUES\n                (\n                    @CodCompetencia,\n                    @DatDistribuicao,\n                    @VlrVerbaAutoral,\n                    @VlrVerbaConexa,\n                    @VlrVerbaSocietario\n                );\";\n\n                var parametros = new\n                {\n                    distribuicao.CodCompetencia,\n                    distribuicao.DatDistribuicao,\n                    distribuicao.VlrVerbaAutoral,\n                    distribuicao.VlrVerbaConexa,\n                    distribuicao.VlrVerbaSocietario\n                };\n\n                var codDistribuicao = await connection.QuerySingleAsync<int>(query, parametros);\n                return codDistribuicao;\n            }\n        }"
                     },
                     "InsertDistribuicaoROL": {
                        "type": "method",
                        "raw": "public async Task<int> InsertDistribuicaoROL(int codDistribuicao, long codRolMusical)\n        {\n            using (var connection = GetConnection())\n            {\n\n                var query = @\"\n                INSERT INTO dbo.DIST_ROL \n                (\n                    cod_distribuicao,\n                    cod_rolmusical\n                )\n                OUTPUT INSERTED.cod_distrol\n                VALUES\n                (\n                    @codDistribuicao,\n                    @codRolMusical                   \n                );\";\n\n                var parametros = new\n                {\n                    codDistribuicao,\n                    codRolMusical\n                };\n\n                var codDistRol = await connection.QuerySingleAsync<int>(query, parametros);\n                return codDistRol;\n            }\n        }"
                     },
                     "StreamDetalhesRelataorioDemonstrativoTitularAsync": {
                        "type": "method",
                        "raw": "public async Task StreamDetalhesRelataorioDemonstrativoTitularAsync(HeaderDemonstrativoTitular header, Func<DetalhesDemonstrativoTitular, Task> processItem)\n        {\n            using (var connection = GetConnection())\n            {\n                var query = @\"\n        SELECT \n            convert(varchar, cod_obrafonoreal) + ' - ' + nom_tituloobra as ObraMusical,\n            dsc_rubrica as Rubrica,\n            dat_periododist as Periodo,\n            VLR_RENDOBRA as Rendimento,\n            pct_participacaotit as Percentual,\n            VLR_TITULAR as Rateio,\n            nro_execucoes as Execucoes,\n            COD_CATEGORIA as Cat,\n            cod_caracteristicadist as Car,\n            NOM_TITULOAUDIOORIG as ObraAudiovisual,\n            NRO_CAPITULOAUDIO + ' - ' + NOM_CAPITULOAUDIOORIG as Capitulo,\n            GRA_ISRC as Isrc,\n            sgl_sociedade as SiglaSociedade,\n            mes_pagamento as MesAno,\n            cod_titularecad as TitularidadeEcad\n        FROM REL_DEMONSTRATIVO_TITULAR\n        WHERE sgl_sociedade = @SiglaSociedade AND mes_pagamento = @MesAno AND cod_titularecad = @TitularidadeEcad\";\n\n                var parameters = new\n                {\n                    SiglaSociedade = header.Associacao,\n                    MesAno = header.MesAno,\n                    TitularidadeEcad = header.Codigo\n                };\n\n                // Stream results one row at a time\n                var reader = await connection.ExecuteReaderAsync(query, parameters);\n                while (await reader.ReadAsync())\n                {\n                    var detalhe = new DetalhesDemonstrativoTitular\n                    {\n                        ObraMusical = reader[\"ObraMusical\"].ToString(),\n                        Rubrica = reader[\"Rubrica\"].ToString(),\n                        Periodo = reader[\"Periodo\"].ToString(),\n                        Rendimento = reader[\"Rendimento\"].ToString(),\n                        Percentual = reader[\"Percentual\"].ToString(),\n                        Rateio = reader[\"Rateio\"].ToString(),\n                        Execucoes = reader[\"Execucoes\"].ToString(),\n                        Cat = reader[\"Cat\"].ToString(),\n                        Car = reader[\"Car\"].ToString(),\n                        ObraAudiovisual = reader[\"ObraAudiovisual\"].ToString(),\n                        Capitulo = reader[\"Capitulo\"].ToString(),\n                        Isrc = reader[\"Isrc\"].ToString(),\n                        SiglaSociedade = reader[\"SiglaSociedade\"].ToString(),\n                        MesAno = reader[\"MesAno\"].ToString(),\n                        TitularidadeEcad = reader[\"TitularidadeEcad\"].ToString()\n                    };\n\n                    await processItem(detalhe); // Process each row one by one\n                }\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "connection",
                              "method": "ExecuteReaderAsync"
                           },
                           {
                              "type": "reader",
                              "method": "ReadAsync"
                           }
                        ]
                     },
                     "GetDetalhesRelataorioDemonstrativoTitularStreamAsync": {
                        "type": "method",
                        "raw": "public async IAsyncEnumerable<DetalhesDemonstrativoTitular> GetDetalhesRelataorioDemonstrativoTitularStreamAsync(HeaderDemonstrativoTitular header)\n        {\n            using (var connection = GetConnection())\n            {\n                var query = @\"\n            SELECT \n                convert(varchar, cod_obrafonoreal) + ' - ' + nom_tituloobra as ObraMusical,\n                dsc_rubrica as Rubrica,\n                dat_periododist as Periodo,\n                VLR_RENDOBRA as Rendimento,\n                pct_participacaotit as Percentual,\n                VLR_TITULAR as Rateio,\n                nro_execucoes as Execucoes,\n                COD_CATEGORIA as Cat,\n                cod_caracteristicadist as Car,\n                NOM_TITULOAUDIOORIG as ObraAudiovisual,\n                NRO_CAPITULOAUDIO + ' - ' + NOM_CAPITULOAUDIOORIG as Capitulo,\n                GRA_ISRC as Isrc,\n                sgl_sociedade as SiglaSociedade,\n                mes_pagamento as MesAno,\n                cod_titularecad as TitularidadeEcad\n            FROM REL_DEMONSTRATIVO_TITULAR\n            WHERE \n                sgl_sociedade = @SiglaSociedade\n                AND mes_pagamento = @MesAno\n                AND cod_titularecad = @TitularidadeEcad\";\n\n                var parameters = new\n                {\n                    SiglaSociedade = header.Associacao,\n                    MesAno = header.MesAno,\n                    TitularidadeEcad = header.Codigo\n                };\n\n                using (DbDataReader reader = await connection.ExecuteReaderAsync(query, parameters, null, 700))\n                {\n                    while (await reader.ReadAsync())\n                    {\n                        var detalhe = new DetalhesDemonstrativoTitular\n                        {\n                            ObraMusical = reader[\"ObraMusical\"].ToString(),\n                            Rubrica = reader[\"Rubrica\"].ToString(),\n                            Periodo = reader[\"Periodo\"].ToString(),\n                            Rendimento = reader[\"Rendimento\"].ToString(),\n                            Percentual = reader[\"Percentual\"].ToString(),\n                            Rateio = reader[\"Rateio\"].ToString(),\n                            Execucoes = reader[\"Execucoes\"].ToString(),\n                            Cat = reader[\"Cat\"].ToString(),\n                            Car = reader[\"Car\"].ToString(),\n                            ObraAudiovisual = reader[\"ObraAudiovisual\"].ToString(),\n                            Capitulo = reader[\"Capitulo\"].ToString(),\n                            Isrc = reader[\"Isrc\"].ToString(),\n                            SiglaSociedade = reader[\"SiglaSociedade\"].ToString(),\n                            MesAno = reader[\"MesAno\"].ToString(),\n                            TitularidadeEcad = reader[\"TitularidadeEcad\"].ToString()\n                        };\n\n                        yield return detalhe; // Retorna um item por vez conforme o stream de dados\n                    }\n                }\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "connection",
                              "method": "ExecuteReaderAsync"
                           },
                           {
                              "type": "reader",
                              "method": "ReadAsync"
                           }
                        ]
                     },
                     "AtualizarDadosCompetenciaAsync": {
                        "type": "method",
                        "raw": "public async Task AtualizarDadosCompetenciaAsync()\n        {\n            using (var connection = GetConnection())\n            {\n                var query = @\"UPDATE [dbo].[DIST_COMPETENCIA]\n                              SET [ind_processado] = 'S'\n                              WHERE cod_rubrica = 3991 AND dat_repasse = '2022-05-25'\";\n                await connection.ExecuteAsync(query);\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "connection",
                              "method": "ExecuteAsync"
                           }
                        ]
                     },
                     "AtualizarDadosDistribuicaoAsync": {
                        "type": "method",
                        "raw": "public async Task AtualizarDadosDistribuicaoAsync()\n        {\n            using (var connection = GetConnection())\n            {\n                var querySumValorTitularDistribuicao = @\"SELECT SUM(vlr_titular) as sumValorTitularDistribuicao FROM DIST_TITULAR\";\n                var sumValorTitularDistribuicao = await connection.QuerySingleAsync<long>(querySumValorTitularDistribuicao);\n\n                var querySumValorTitularRetido = @\"SELECT SUM(vlr_titular) as sumValorTitularRetido FROM DIST_RETIDO\";\n                var sumValorTitularRetido = await connection.QuerySingleAsync<long>(querySumValorTitularRetido);\n\n                var querySumValorAssociacaoDistribuicao = @\"SELECT SUM(vlr_associacao) as sumValorAssociacaoDistribuicao FROM DIST_ASSOCIACAO\";\n                var sumValorAssociacaoDistribuicao = await connection.QuerySingleAsync<long>(querySumValorAssociacaoDistribuicao);\n\n                var querySumValorSociedadeRetido = @\"SELECT SUM(vlr_sociedade) as sumValorSociedadeRetido FROM DIST_RETIDO\";\n                var sumValorSociedadeRetido = await connection.QuerySingleAsync<long>(querySumValorSociedadeRetido);\n\n                var queryAtualizarDistribuicao = @\"DECLARE \n                                                        @ValorAutoral DECIMAL(18, 9),\n                                                        @ValorConexa DECIMAL(18, 9),\n                                                        @ValorAssociacao DECIMAL(18, 9),\n                                                        @SomaTitularAutoral DECIMAL(18, 9),\n\t                                                    @SomaTitularConexa DECIMAL(18, 9),\n                                                        @SomaTitularAutoralRetido DECIMAL(18, 9),\n\t                                                    @SomaTitularConexaRetido DECIMAL(18, 9),\n                                                        @SomaAssociacao DECIMAL(18, 9),\n                                                        @SomaAssociacaoRetido DECIMAL(18, 9),\n                                                        @DiferencaAutoral DECIMAL(18, 9),\n                                                        @DiferencaConexa DECIMAL(18, 9),\n                                                        @DiferencaAssociacao DECIMAL(18, 9);\n\n                                                    SELECT \n                                                        @ValorAutoral = VlrVerbaAutoral, \n                                                        @ValorConexa = VlrVerbaConexa, \n                                                        @ValorAssociacao = VlrVerbaSocietaria\n                                                    FROM \n                                                        VW_COMPETENCIA;\n\n                                                ---------- SOMA TITULAR AUTORAL ----------\n                                                    SELECT \n                                                        @SomaTitularAutoral = ISNULL(SUM(vlr_titular), 0)\n                                                    FROM \n                                                        DIST_TITULAR DTA\n\t                                                JOIN DIST_CONSOLIDACAO_DTL DTLA ON DTA.cod_consoliddistribdtl = DTLA.cod_consoliddistribdtl AND DTLA.tip_parterepresentada = 'AA'\n              \n\n                                                ---------- SOMA TITULAR CONEXA ----------\n                                                    SELECT \n                                                        @SomaTitularConexa = ISNULL(SUM(vlr_titular), 0)\n                                                    FROM \n                                                        DIST_TITULAR DTC\n\t                                                JOIN DIST_CONSOLIDACAO_DTL DTLC ON DTC.cod_consoliddistribdtl = DTLC.cod_consoliddistribdtl AND DTLC.tip_parterepresentada = 'CC'\n\n\n                                                ---------- SOMA RETIDO AUTORAL ----------\n                                                    SELECT \n                                                        @SomaTitularAutoralRetido = ISNULL(SUM(vlr_titular), 0),\n                                                        @SomaAssociacaoRetido = ISNULL(SUM(vlr_sociedade), 0)\n                                                    FROM \n                                                        DIST_RETIDO DRA\n\t                                                JOIN DIST_CONSOLIDACAO_DTL DTLRA ON DRA.cod_consoliddistribdtl = DTLRA.cod_consoliddistribdtl AND DTLRA.tip_parterepresentada = 'AA'\n\n                                                ---------- SOMA RETIDO CONEXA ----------\n\t                                                SELECT \n\t\t                                                @SomaTitularConexaRetido = ISNULL(SUM(vlr_titular), 0)\n\t                                                FROM \n\t\t                                                DIST_RETIDO DRC\n\t                                                JOIN DIST_CONSOLIDACAO_DTL DTLRC ON DRC.cod_consoliddistribdtl = DTLRC.cod_consoliddistribdtl AND DTLRC.tip_parterepresentada = 'CC'\n\n                                                ---------- SOMA ASSOCIACAO RETIDO ----------\n                                                    SELECT \n                                                        @SomaAssociacaoRetido = ISNULL(SUM(vlr_sociedade), 0)\n                                                    FROM \n                                                        DIST_RETIDO;\n\n                                                ---------- SOMA ASSOCIACAO ----------\n                                                    SELECT\n\t                                                    @SomaAssociacao = ISNULL(SUM(vlr_associacao),0)\n                                                    FROM\n\t                                                    DIST_ASSOCIACAO\n\n                                                ---------- CALCULAR DIFERENCA ----------\n                                                    SET @DiferencaAutoral = @ValorAutoral - (@SomaTitularAutoral + @SomaTitularAutoralRetido);\n                                                    SET @DiferencaConexa = @ValorConexa - (@SomaTitularConexa + @SomaTitularConexaRetido);\n                                                    SET @DiferencaAssociacao = @ValorAssociacao - (@SomaAssociacao + @SomaAssociacaoRetido);\n\t\n                                                    UPDATE [dbo].[DISTRIBUICAO]\n                                                        SET [vlr_diferencaverbaautoral] = @DiferencaAutoral,\n                                                            [vlr_diferencaverbaconexa] = @DiferencaConexa,\n                                                            [vlr_diferencaverbasocietario] = @DiferencaAssociacao,\n                                                            [ind_processado] = 'S'\n                                                    WHERE cod_distribuicao = (SELECT TOP 1 cod_distribuicao FROM [dbo].[DISTRIBUICAO] ORDER BY cod_distribuicao DESC)\";\n\n                await connection.ExecuteAsync(queryAtualizarDistribuicao, new\n                {\n                    sumValorTitularDistribuicao,\n                    sumValorTitularRetido,\n                    sumValorAssociacaoDistribuicao,\n                    sumValorSociedadeRetido\n                });\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "connection",
                              "method": "ExecuteAsync"
                           }
                        ]
                     }
                  }
               }
            }
         },
         "ReadModels": {
            "AudioVisualGloboplay": {
               "AudioVisual": {
                  "type": "class",
                  "members": {
                     "CodObraAudioEcad": {
                        "type": "property"
                     },
                     "NroFatorDistribuicao": {
                        "type": "property"
                     },
                     "VlrFatorDistribuicao": {
                        "type": "property"
                     },
                     "SomaFatorDistribuicao": {
                        "type": "property"
                     },
                     "VlrPonto": {
                        "type": "property"
                     },
                     "NomTituloOrig": {
                        "type": "property"
                     },
                     "NomTituloTrad": {
                        "type": "property"
                     },
                     "IndSituacaoAudiovisual": {
                        "type": "property"
                     },
                     "NomCapEpisodioOrig": {
                        "type": "property"
                     },
                     "NomCapEpisodioTraduzido": {
                        "type": "property"
                     },
                     "Competencia": {
                        "type": "property"
                     },
                     "Fonogramas": {
                        "type": "property"
                     },
                     "ObrasMusicais": {
                        "type": "property"
                     },
                     "TitularesFonograma": {
                        "type": "property"
                     },
                     "TitularesObra": {
                        "type": "property"
                     },
                     "CodDistribuicao": {
                        "type": "property"
                     },
                     "CodDistRol": {
                        "type": "property"
                     },
                     "CodRolMusical": {
                        "type": "property"
                     },
                     "DatExibicaoAudio": {
                        "type": "property"
                     },
                     "CodObraFonoAudio": {
                        "type": "property"
                     },
                     "DatInicioRol": {
                        "type": "property"
                     },
                     "DatFimRol": {
                        "type": "property"
                     },
                     "CodFonteRol": {
                        "type": "property"
                     },
                     "CodTipRol": {
                        "type": "property"
                     },
                     "CodOrigemRol": {
                        "type": "property"
                     },
                     "CodUsuario": {
                        "type": "property"
                     },
                     "TipCaracteristicadist": {
                        "type": "property"
                     }
                  }
               }
            },
            "Competencia": {
               "Competencia": {
                  "type": "class",
                  "members": {
                     "CodCompetencia": {
                        "type": "property"
                     },
                     "VlrVerbaAutoral": {
                        "type": "property"
                     },
                     "VlrVerbaConexa": {
                        "type": "property"
                     },
                     "VlrVerbaSocietaria": {
                        "type": "property"
                     }
                  }
               }
            },
            "DadosDistribuicao": {
               "DadosDistribuicao": {
                  "type": "class",
                  "members": {
                     "CodDistribuicao": {
                        "type": "property"
                     },
                     "CodCompetencia": {
                        "type": "property"
                     },
                     "DatDistribuicao": {
                        "type": "property"
                     },
                     "VlrVerbaAutoral": {
                        "type": "property"
                     },
                     "VlrVerbaConexa": {
                        "type": "property"
                     },
                     "VlrVerbaSocietario": {
                        "type": "property"
                     }
                  }
               }
            },
            "DetalhesDemonstrativoTitular": {
               "DetalhesDemonstrativoTitular": {
                  "type": "class",
                  "members": {}
               }
            },
            "HeaderDemonstrativoTitular": {
               "HeaderDemonstrativoTitular": {
                  "type": "class",
                  "members": {}
               }
            },
            "MusicaAudio": {
               "MusicaAudio": {
                  "type": "class",
                  "members": {
                     "CaracteristicaDistribuicao": {
                        "type": "property"
                     },
                     "CaracteristicaRegistro": {
                        "type": "property"
                     },
                     "ParteRepresentada": {
                        "type": "property"
                     },
                     "QtdDuracaoMusica": {
                        "type": "property"
                     },
                     "CodObraAudioEcad": {
                        "type": "property"
                     },
                     "CodColetivo": {
                        "type": "property"
                     },
                     "TipSituacaoFono": {
                        "type": "property"
                     },
                     "CodIsrc": {
                        "type": "property"
                     },
                     "CodGra": {
                        "type": "property"
                     },
                     "TipSituacaoCadastral": {
                        "type": "property"
                     },
                     "NomTitulo": {
                        "type": "property"
                     }
                  }
               }
            },
            "SociedadeRepresentacao": {
               "SociedadeRepresentacao": {
                  "type": "class",
                  "members": {
                     "CodSociedade": {
                        "type": "property"
                     },
                     "CodTitularEcad": {
                        "type": "property"
                     },
                     "IndNacionalCol": {
                        "type": "property"
                     },
                     "SglSociedade": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     }
                  }
               }
            },
            "SociedadeTitular": {
               "SociedadeTitular": {
                  "type": "class",
                  "members": {
                     "CodSociedade": {
                        "type": "property"
                     },
                     "IndNacionalCol": {
                        "type": "property"
                     },
                     "SglSociedade": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     },
                     "SglSociedadeRepresenta": {
                        "type": "property"
                     },
                     "CodTitularEcad": {
                        "type": "property"
                     },
                     "DatRessoc": {
                        "type": "property"
                     },
                     "CodTitularIdentificado": {
                        "type": "property"
                     },
                     "IndSituacaoSociedade": {
                        "type": "property"
                     },
                     "IndSituacaoSociedadeRepresenta": {
                        "type": "property"
                     }
                  }
               }
            },
            "TitularFonograma": {
               "TitularFonograma": {
                  "type": "class",
                  "members": {
                     "CodTitularEcad": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     },
                     "CodSubCategoria": {
                        "type": "property"
                     },
                     "PctParticipacao": {
                        "type": "property"
                     },
                     "CodFonograma": {
                        "type": "property"
                     },
                     "IndSitTitular": {
                        "type": "property"
                     },
                     "CodColetivo": {
                        "type": "property"
                     },
                     "CodTitularIdentificado": {
                        "type": "property"
                     },
                     "NomTitular": {
                        "type": "property"
                     },
                     "NomNameTitular": {
                        "type": "property"
                     },
                     "NomBusca": {
                        "type": "property"
                     },
                     "TipoPessoa": {
                        "type": "property"
                     },
                     "CodCae": {
                        "type": "property"
                     },
                     "CodCgc": {
                        "type": "property"
                     },
                     "CodCpf": {
                        "type": "property"
                     },
                     "CodSociedade": {
                        "type": "property"
                     },
                     "PseudoNome": {
                        "type": "property"
                     },
                     "DescricaoCategoria": {
                        "type": "property"
                     },
                     "DescricaoSubCategoria": {
                        "type": "property"
                     },
                     "CodFonogramaTitular": {
                        "type": "property"
                     },
                     "Associacoes": {
                        "type": "property"
                     },
                     "Representacao": {
                        "type": "property"
                     }
                  }
               }
            },
            "TitularObra": {
               "TitularObra": {
                  "type": "class",
                  "members": {
                     "CodTitularEcad": {
                        "type": "property"
                     },
                     "CodObraMusEcad": {
                        "type": "property"
                     },
                     "CodCategoria": {
                        "type": "property"
                     },
                     "CodSubCategoria": {
                        "type": "property"
                     },
                     "PctParticipacao": {
                        "type": "property"
                     },
                     "CodObraTitular": {
                        "type": "property"
                     },
                     "IndSituacao": {
                        "type": "property"
                     },
                     "CodTitularIdentificado": {
                        "type": "property"
                     },
                     "NomTitular": {
                        "type": "property"
                     },
                     "NomNameTitular": {
                        "type": "property"
                     },
                     "NomBusca": {
                        "type": "property"
                     },
                     "TipoPessoa": {
                        "type": "property"
                     },
                     "CodCae": {
                        "type": "property"
                     },
                     "CodCgc": {
                        "type": "property"
                     },
                     "CodCpf": {
                        "type": "property"
                     },
                     "CodSociedade": {
                        "type": "property"
                     },
                     "DescricaoCategoria": {
                        "type": "property"
                     },
                     "DescricaoSubCategoria": {
                        "type": "property"
                     },
                     "PseudoNome": {
                        "type": "property"
                     },
                     "Representacao": {
                        "type": "property"
                     },
                     "Associacoes": {
                        "type": "property"
                     }
                  }
               }
            }
         },
         "services": {
            "AtualizarCompetenciaDistribuicaoService": {
               "AtualizarCompetenciaDistribuicaoService": {
                  "type": "class",
                  "members": {}
               }
            },
            "ObterDadosDemonstrativoTitularService": {
               "ObterDadosDemonstrativoTitularService": {
                  "type": "class",
                  "members": {
                     "Do": {
                        "type": "method",
                        "raw": "public async Task Do()\n    {\n        var stopWatch = Stopwatch.StartNew();\n\n        try\n        {\n            _logger.LogInformation(\"Início\");\n\n            var demonstrativos = await _dapperDAO.GetAllDetalhesRelataorioDemonstrativoTitular();\n            var headers = await _dapperDAO.GetHeaderRelataorioDemonstrativoTitular();\n\n            var totalHeaders = headers.Count();\n\n            _logger.LogInformation($\"{totalHeaders} headers to process\");\n\n            var headersWithDetails = headers.Select(header => System.Text.Json.JsonSerializer.Serialize(new HeaderDemonstrativoTitular\n            {\n                MesAno = header.MesAno,\n                Codigo = header.Codigo,\n                Associacao = header.Associacao,\n                Total = header.Total,\n                Nome = header.Nome,\n                Pseudonimo = header.Pseudonimo,\n                DetalhesDemonstrativoTitulares = demonstrativos\n                    .Where(d => d.MesAno == header.MesAno &&\n                                d.TitularidadeEcad == header.Codigo &&\n                                d.SiglaSociedade == header.Associacao)\n            }));\n\n\n            List<Task> tasks = new List<Task>();\n            var semaphore = new SemaphoreSlim(50);\n            var count = 1;\n\n            foreach (var header in headersWithDetails)\n            {\n                await semaphore.WaitAsync(); // Aguarda a liberação de um slot no semáforo\n                var currentCount = count; // Captura o valor atual de 'count' para exibição no log\n\n                tasks.Add(Task.Run(async () =>\n                {\n                    try\n                    {\n                        // Salva o JSON em um Blob no Azure Storage\n                        var blobUrl = await SaveToBlobAsync(header);\n\n                        _logger.LogInformation($\"Sent message with Blob URL for batch {currentCount}.\");\n\n                    }\n                    finally\n                    {\n                        semaphore.Release(); // Libera o semáforo após a execução\n                    }\n                }));\n\n                count++;\n            }\n\n            await Task.WhenAll(tasks);\n\n            _logger.LogInformation($\"Tempo até agora: {stopWatch.Elapsed.TotalMinutes}\");\n            _logger.LogInformation($\"{stopWatch.Elapsed.TotalMinutes} minutes - Processed all headers.\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError($\"{stopWatch.Elapsed.TotalMinutes} minutes - Error: {ex}\");\n        }\n        stopWatch.Stop();\n    }",
                        "dependencies": [
                           {
                              "type": "ILogger",
                              "method": "LogInformation"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "GetAllDetalhesRelataorioDemonstrativoTitular"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "GetHeaderRelataorioDemonstrativoTitular"
                           },
                           {
                              "type": "ILogger",
                              "method": "LogInformation"
                           },
                           {
                              "type": "ILogger",
                              "method": "LogInformation"
                           },
                           {
                              "type": "ILogger",
                              "method": "LogInformation"
                           },
                           {
                              "type": "ILogger",
                              "method": "LogInformation"
                           },
                           {
                              "type": "ILogger",
                              "method": "LogError"
                           },
                           {
                              "type": "Stopwatch",
                              "method": "StartNew"
                           },
                           {
                              "type": "headers",
                              "method": "Count"
                           },
                           {
                              "type": "headers",
                              "method": "Select"
                           },
                           {
                              "type": "JsonSerializer",
                              "method": "Serialize"
                           },
                           {
                              "type": "semaphore",
                              "method": "WaitAsync"
                           },
                           {
                              "type": "tasks",
                              "method": "Add"
                           },
                           {
                              "type": "Task",
                              "method": "Run"
                           },
                           {
                              "type": "semaphore",
                              "method": "Release"
                           },
                           {
                              "type": "Task",
                              "method": "WhenAll"
                           },
                           {
                              "type": "stopWatch",
                              "method": "Stop"
                           }
                        ]
                     },
                     "SaveToBlobAsync": {
                        "type": "method",
                        "raw": "private async Task<string> SaveToBlobAsync(string jsonPayload)\n    {\n        // Nome do container\n        var containerName = \"payloads\";\n\n        // Nome do arquivo (você pode alterar conforme sua lógica)\n        var blobName = $\"{Guid.NewGuid()}.json\";\n\n        // Acessa o container (cria o container se não existir)\n        var containerClient = _blobServiceClient.GetBlobContainerClient(containerName);\n\n        // Acessa o blob (arquivo JSON)\n        var blobClient = containerClient.GetBlobClient(blobName);\n\n        // Carrega o payload como stream para o blob\n        using var memoryStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(jsonPayload));\n        await blobClient.UploadAsync(memoryStream, true);\n\n        // Retorna o link para o blob (você pode ajustar o formato do URL se precisar de um SAS Token)\n        return blobClient.Uri.ToString();\n    }",
                        "dependencies": [
                           {
                              "type": "IBlobServiceClient",
                              "method": "GetBlobContainerClient"
                           },
                           {
                              "type": "Guid",
                              "method": "NewGuid"
                           },
                           {
                              "type": "containerClient",
                              "method": "GetBlobClient"
                           },
                           {
                              "type": "UTF8",
                              "method": "GetBytes"
                           },
                           {
                              "type": "blobClient",
                              "method": "UploadAsync"
                           },
                           {
                              "type": "Uri",
                              "method": "ToString"
                           }
                        ]
                     }
                  }
               }
            },
            "ObterDadosService": {
               "ObterDadosService": {
                  "type": "class",
                  "members": {
                     "Do": {
                        "type": "method",
                        "raw": "public async Task Do()\n        {\n            Competencia competencia;\n            competencia = await _dapperDAO.GetCompetenciaGloboplay();\n\n            IEnumerable<AudioVisual> audioVisuais;\n            audioVisuais = await _dapperDAO.GetAudioVisualGloboplay();\n\n            //var audioVisuaisParaRetencao = new List<AudioVisual>();\n            //var sociedadeRepresentacao = _dapperDAO.GetSociedadeRepresentacao().Result;\n            //audioVisuais = CalcularFatorDistribuicao(competencia, audioVisuais);\n            //var tasks = new List<Task>();\n            //int skip = 0;\n            //int take = 1000;\n\n\n            var dadosDistribuicao = new DadosDistribuicao\n            {\n                CodCompetencia = competencia.CodCompetencia,\n                DatDistribuicao = DateTime.UtcNow,\n                VlrVerbaAutoral = competencia.VlrVerbaAutoral,\n                VlrVerbaConexa = competencia.VlrVerbaConexa,\n                VlrVerbaSocietario = competencia.VlrVerbaSocietaria,\n\n            };\n            var codDistribuicao = await _dapperDAO.InsertDistribuicao(dadosDistribuicao);\n            var codDistRol = await _dapperDAO.InsertDistribuicaoROL(codDistribuicao, audioVisuais.First().CodRolMusical);\n\n            using (_telemetryClient.StartOperation<RequestTelemetry>(\"ServicebusClient\"))\n            {\n                _telemetryClient.TrackEvent(\"ServicebusClient\");\n                ServicebusClient sender = new ServicebusClient(_serviceBusConnection.ConnectionString, _serviceBusConnection.Queue);\n                await sender.SendMessagesAsync(CalcularFatorDistribuicao(competencia, audioVisuais), competencia, codDistribuicao, codDistRol);\n            }\n        }",
                        "dependencies": [
                           {
                              "type": "IDapperDAO",
                              "method": "GetCompetenciaGloboplay"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "GetAudioVisualGloboplay"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "GetSociedadeRepresentacao"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "InsertDistribuicao"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "InsertDistribuicaoROL"
                           },
                           {
                              "type": "ITelemetryClient",
                              "method": "TrackEvent"
                           },
                           {
                              "type": "audioVisuais",
                              "method": "First"
                           },
                           {
                              "type": "sender",
                              "method": "SendMessagesAsync"
                           }
                        ]
                     },
                     "ColetarEEnviarDados": {
                        "type": "method",
                        "raw": "private async Task<bool> ColetarEEnviarDados(IEnumerable<AudioVisual> audioVisuais, string taskNumber, Competencia competencia, IEnumerable<EcadGloboplay.DomainRead.models.SociedadeRepresentacao> sociedadeRepresentacao)\n        {           \n            //Stopwatch sw = Stopwatch.StartNew();\n            //var count = 0;\n            //Console.WriteLine($\"{taskNumber} - Inicio\");\n\n            //try\n            //{\n            //    //foreach (var audioVisual in audioVisuais)\n            //    //{\n            //    //    count++;\n            //    //    audioVisual.Competencia = competencia;\n            //    //    audioVisual.ObrasMusicais = await _dapperDAO.GetObrasMusicais(audioVisual.CodObraAudioEcad, audioVisual.CodCapiEpisodio);\n            //    //    audioVisual.Fonogramas = await _dapperDAO.GetFonogramas(audioVisual.CodObraAudioEcad, audioVisual.CodCapiEpisodio);\n\n            //    //    foreach (var obra in audioVisual.ObrasMusicais)\n            //    //    {\n            //    //        audioVisual.TitularesObra = await _dapperDAO.GetTitularObra((long)obra.CodObraMusEcad);\n\n            //            foreach (var titularObra in audioVisual.TitularesObra)\n            //            {\n            //                titularObra.Representacao = await _dapperDAO.GetTitularSociedade(titularObra.CodTitularEcad, titularObra.CodCategoria);\n            //            }\n            //        }\n\n            //    //    foreach (var fono in audioVisual.Fonogramas)\n            //    //    {\n            //    //        //audioVisual.TitularesFonograma = await _dapperDAO.GetTitularFonograma((long)fono.Fonograma);\n\n            //            foreach (var titularFono in audioVisual.TitularesFonograma)\n            //            {\n            //                titularFono.Representacao = await _dapperDAO.GetTitularSociedade(titularFono.CodTitularEcad, titularFono.CodCategoria);\n            //            }\n            //        }\n\n            //    //    var x = MessageClient.senderMessage(audioVisual, _serviceBusConnection);\n            //    //    Console.WriteLine($\" {taskNumber} - {count}  - {sw.Elapsed.TotalMinutes}\");\n            //    //}\n\n            //    //Console.WriteLine($\"{taskNumber} - Fim : {sw.ToString()}\");\n                \n            //}\n            //catch (Exception ex)\n            //{\n            //    Console.WriteLine(taskNumber + \" - \" + ex.Message);\n            //    return false;\n            //}\n\n            return true;\n        }",
                        "dependencies": [
                           {
                              "type": "IDapperDAO",
                              "method": "GetObrasMusicais"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "GetFonogramas"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "GetTitularObra"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "GetTitularSociedade"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "GetTitularFonograma"
                           },
                           {
                              "type": "IDapperDAO",
                              "method": "GetTitularSociedade"
                           },
                           {
                              "type": "Stopwatch",
                              "method": "StartNew"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "MessageClient",
                              "method": "senderMessage"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "sw",
                              "method": "ToString"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           }
                        ]
                     },
                     "CalcularFatorDistribuicao": {
                        "type": "method",
                        "raw": "public IEnumerable<AudioVisual> CalcularFatorDistribuicao(Competencia? competencia, IEnumerable<AudioVisual> audioVisuais)\n        {\n            var somaFatorDistribuicao = audioVisuais.Sum(x => x.NroFatorDistribuicao);\n            var verbaTotal = competencia.VlrVerbaAutoral + competencia.VlrVerbaConexa;\n            var ponto = verbaTotal / somaFatorDistribuicao;\n\n            return audioVisuais.Select(x =>\n                new AudioVisual\n                {\n                    CodCapiEpisodio = x.CodCapiEpisodio,\n                    CodObraAudioEcad = x.CodObraAudioEcad,\n                    NroFatorDistribuicao = x.NroFatorDistribuicao,\n                    VlrFatorDistribuicao = ponto * x.NroFatorDistribuicao,\n                    SomaFatorDistribuicao = somaFatorDistribuicao,\n                    VlrPonto = ponto,\n                    NomTituloOrig = x.NomTituloOrig,\n                    NomTituloTrad = x.NomTituloTrad,\n                    IndSituacaoAudiovisual = x.IndSituacaoAudiovisual,\n                    NroCapEpisodio = x.NroCapEpisodio,\n                    NomCapEpisodioOrig = x.NomCapEpisodioOrig,\n                    NomCapEpisodioTraduzido = x.NomCapEpisodioTraduzido,\n                    CodRolMusical = x.CodRolMusical,\n                    DatExibicaoAudio = x.DatExibicaoAudio,\n                    CodObraFonoAudio = x.CodObraFonoAudio,\n                    DatInicioRol = x.DatInicioRol,\n                    DatFimRol = x.DatFimRol,\n                    CodFonteRol = x.CodFonteRol,\n                    CodTipRol = x.CodTipRol,\n                    CodOrigemRol = x.CodOrigemRol,\n                    CodUsuario = x.CodUsuario,\n                    TipCaracteristicadist = x.TipCaracteristicadist\n                }\n            ).ToList();\n        }",
                        "dependencies": [
                           {
                              "type": "IEnumerable<AudioVisual>",
                              "method": "Sum"
                           },
                           {
                              "type": "IEnumerable<AudioVisual>",
                              "method": "Select"
                           }
                        ]
                     }
                  }
               }
            },
            "ServicebusClient": {
               "ServicebusClient": {
                  "type": "class",
                  "members": {
                     "SendMessagesAsync": {
                        "type": "method",
                        "raw": "public async Task SendMessagesAsync(IEnumerable<AudioVisual> messages, Competencia competencia, int codigoDistribuicao, int codDistRol)\n        {\n            var options = new ParallelOptions()\n            {\n                MaxDegreeOfParallelism = Environment.ProcessorCount\n            };\n\n            await Parallel.ForEachAsync(messages, options, async (message, token) =>\n            {\n                try\n                {\n                    message.Competencia = competencia;\n                    message.CodDistribuicao = codigoDistribuicao;\n\n                    ServiceBusMessage serviceBusMessage = new ServiceBusMessage(JsonSerializer.Serialize(message));\n\n                    await sender.SendMessageAsync(serviceBusMessage, token);\n                    Console.WriteLine($\"Message sent: {message}\");\n                }\n                catch (Exception ex)\n                {\n                    _telemetryClient.TrackTrace(ex.ToString());\n                    Console.WriteLine($\"Falhou: {ex.Message}\");\n                    throw;\n                }\n            });\n        }",
                        "dependencies": [
                           {
                              "type": "ITelemetryClient",
                              "method": "TrackTrace"
                           },
                           {
                              "type": "Parallel",
                              "method": "ForEachAsync"
                           },
                           {
                              "type": "JsonSerializer",
                              "method": "Serialize"
                           },
                           {
                              "type": "sender",
                              "method": "SendMessageAsync"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "ex",
                              "method": "ToString"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           }
                        ]
                     }
                  }
               }
            }
         }
      },
      "EcadGloboPlay.Fonograma": {
         "Program": {
            "Program": {
               "type": "class",
               "members": {}
            }
         },
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {
                  "ExecuteAsync": {
                     "type": "method",
                     "raw": "protected async override Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            if (fonogramas.Any() == false)\n            {\n\n                var fonogramasGloboplay = await _dao.GetFonogramasGloboplay();\n            }\n\n            await ProcessMessagesAsync();\n        }",
                     "dependencies": [
                        {
                           "type": "IDao",
                           "method": "GetFonogramasGloboplay"
                        },
                        {
                           "type": "fonogramas",
                           "method": "Any"
                        }
                     ]
                  },
                  "ProcessMessagesAsync": {
                     "type": "method",
                     "raw": "private async Task ProcessMessagesAsync()\n        {\n            ServiceBusReceiver receiver = _serviceBusClient.CreateReceiver(\"obrasmusicaisgloboplay\");\n\n            try\n            {\n                while (true)\n                {\n                    var messages = await receiver.ReceiveMessagesAsync(maxMessages: 100, maxWaitTime: TimeSpan.FromSeconds(1));\n\n                    if (messages.Any())\n                    {\n                        var processingTasks = new List<Task>();\n\n                        foreach (var message in messages)\n                        {\n                            processingTasks.Add(ProcessMessageAsync(receiver, message));\n                        }\n\n                        await Task.WhenAll(processingTasks);\n                    }\n                }\n            }\n            finally\n            {\n                await receiver.CloseAsync();\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "IServiceBusClient",
                           "method": "CreateReceiver"
                        },
                        {
                           "type": "receiver",
                           "method": "ReceiveMessagesAsync"
                        },
                        {
                           "type": "TimeSpan",
                           "method": "FromSeconds"
                        },
                        {
                           "type": "messages",
                           "method": "Any"
                        },
                        {
                           "type": "processingTasks",
                           "method": "Add"
                        },
                        {
                           "type": "Task",
                           "method": "WhenAll"
                        },
                        {
                           "type": "receiver",
                           "method": "CloseAsync"
                        }
                     ]
                  },
                  "ProcessMessageAsync": {
                     "type": "method",
                     "raw": "private async Task ProcessMessageAsync(ServiceBusReceiver receiver, ServiceBusReceivedMessage message)\n        {\n            try\n            {\n                var audioVisual = JsonConvert.DeserializeObject<AudioVisual>(message.Body.ToString());\n\n                // ALTERAR A CONDIÇÃO DO FILTRO ANTES DE RODAR\n                audioVisual.ObrasMusicais = fonogramas\n                                                .Where(x => x.CodObraAudioEcad == audioVisual.CodObraAudioEcad && x.CodCapEpisodio == audioVisual.CodCapiEpisodio)\n                                                .Select(y => new MusicaAudio\n                                                {\n                                                    CodColetivo = y.CodColetivo,\n                                                    TipSituacaoFono = y.TipSituacaoFono,\n                                                    CaracteristicaDistribuicao = y.CaracteristicaDistribuicao,\n                                                    CaracteristicaRegistro = y.CaracteristicaRegistro,\n                                                    CodCapEpisodio = y.CodCapEpisodio,\n                                                    CodGra = y.CodGra,\n                                                    CodIsrc = y.CodIsrc,\n                                                    CodObraAudioEcad = y.CodObraAudioEcad,\n                                                    CodObraMusEcad = y.CodObraMusEcad,\n                                                    Fonograma = y.Fonograma,\n                                                    ParteRepresentada = y.ParteRepresentada,\n                                                    QtdDuracaoMusica = y.QtdDuracaoMusica\n                                                }).ToList();\n\n                await SendMessageToQueue(JsonConvert.SerializeObject(audioVisual));\n                await receiver.CompleteMessageAsync(message);\n                Console.WriteLine($\"Mensagem processada.\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error processing message: {ex.Message}\");\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "Body",
                           "method": "ToString"
                        },
                        {
                           "type": "JsonConvert",
                           "method": "SerializeObject"
                        },
                        {
                           "type": "ServiceBusReceiver",
                           "method": "CompleteMessageAsync"
                        },
                        {
                           "type": "Console",
                           "method": "WriteLine"
                        },
                        {
                           "type": "Console",
                           "method": "WriteLine"
                        }
                     ]
                  },
                  "SendMessageToQueue": {
                     "type": "method",
                     "raw": "private async Task SendMessageToQueue(string message)\n        {\n            if (string.IsNullOrEmpty(message))\n            {\n                _logger.LogError(\"Message to send to the queue is null or empty.\");\n                return;\n            }\n\n            ServiceBusSender sender = _serviceBusClient.CreateSender(_outputQueueName);\n\n            try\n            {\n                ServiceBusMessage busMessage = new ServiceBusMessage(message);\n                await sender.SendMessageAsync(busMessage);\n\n                _logger.LogInformation(\"Message sent to the queue: {message}\", message);\n            }\n            finally\n            {\n                await sender.DisposeAsync();\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "IServiceBusClient",
                           "method": "CreateSender"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "string",
                           "method": "IsNullOrEmpty"
                        },
                        {
                           "type": "sender",
                           "method": "SendMessageAsync"
                        },
                        {
                           "type": "sender",
                           "method": "DisposeAsync"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboPlay.Fonogramas": {
         "GetFonogramas": {
            "GetFonogramas": {
               "type": "class",
               "members": {
                  "Run": {
                     "type": "method",
                     "raw": "public static async Task Run(\n            [ServiceBusTrigger(\"QueueName\", Connection = \"NamespaceConnectionString\")] string inputQueue,\n            [ServiceBus(\"OutputQueueName\", Connection = \"NamespaceConnectionString\")] IAsyncCollector<string> outputQueue,\n            ILogger log)\n        {\n            log.LogInformation($\"C# ServiceBus queue trigger function processed message: {inputQueue}\");\n\n            var _stringConnection = \"Server=tcp:ecadpodsynapse.sql.azuresynapse.net,1433;Initial Catalog=sqlpoolpocecad;Persist Security Info=False;User ID=sqladminuser;Password=sm#)Mg^xD}",
                     "dependencies": [
                        {
                           "type": "log",
                           "method": "LogInformation"
                        }
                     ]
                  }
               }
            }
         },
         "Startup": {
            "Startup": {
               "type": "class",
               "members": {
                  "Configure": {
                     "type": "method",
                     "raw": "public override void Configure(IFunctionsHostBuilder builder)\n    {\n        builder.Services.AddHttpClient();\n\n        var connectionServiceBus = \"Endpoint=sb://asb-poc-ecad.servicebus.windows.net/;SharedAccessKeyName=asb-poc-ecad-rule;SharedAccessKey=ngrfvgo+0qk8tNUj5UBWDRzT35L3UJtQc+ASbH3+kdI=\";\n        var queueServiceBus = \"fonogramasgloboplay\";\n\n        builder.Services.AddScoped<ServicebusClient>(x => new ServicebusClient(connectionServiceBus, queueServiceBus));\n        builder.Services.AddScoped<IObterDadosService, ObterDadosService>();\n    }",
                     "dependencies": [
                        {
                           "type": "Services",
                           "method": "AddHttpClient"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboplay.Infra": {
         "Data": {
            "AzureDbContext": {
               "AzureDbContext": {
                  "type": "class",
                  "members": {
                     "DistAssociacao": {
                        "type": "property"
                     },
                     "DistCompetencia": {
                        "type": "property"
                     },
                     "DistConsolidacao": {
                        "type": "property"
                     },
                     "DistConsolidacaoAud": {
                        "type": "property"
                     },
                     "DistConsolidacaoDtl": {
                        "type": "property"
                     },
                     "DistExecucaoSumario": {
                        "type": "property"
                     },
                     "DistPendente": {
                        "type": "property"
                     },
                     "DistPonto": {
                        "type": "property"
                     },
                     "DistRetido": {
                        "type": "property"
                     },
                     "DistRol": {
                        "type": "property"
                     },
                     "DistRolOrigemExecucao": {
                        "type": "property"
                     },
                     "DistTitular": {
                        "type": "property"
                     },
                     "Distribuicao": {
                        "type": "property"
                     },
                     "MotivoRetencao": {
                        "type": "property"
                     },
                     "DemonstrativoTitular": {
                        "type": "property"
                     },
                     "Rubrica": {
                        "type": "property"
                     },
                     "OnModelCreating": {
                        "type": "method",
                        "raw": "protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            ConfigureDistAssociacao(modelBuilder.Entity<DistAssociacao>());\n            ConfigureDistCompetencia(modelBuilder.Entity<DistCompetencia>());\n            ConfigureDistConsolidacao(modelBuilder.Entity<DistConsolidacao>());\n            ConfigureDistConsolidacaoAud(modelBuilder.Entity<DistConsolidacaoAud>());\n            ConfigureDistConsolidacaoDtl(modelBuilder.Entity<DistConsolidacaoDtl>());\n            ConfigureDistExecucaoSumario(modelBuilder.Entity<DistExecucaoSumario>());\n            ConfigureDistPendente(modelBuilder.Entity<DistPendente>());\n            ConfigureDistPonto(modelBuilder.Entity<DistPonto>());\n            ConfigureDistRetido(modelBuilder.Entity<DistRetido>());\n            ConfigureDistribuicao(modelBuilder.Entity<Distribuicao>());\n            ConfigureDistRol(modelBuilder.Entity<DistRol>());\n            ConfigureDistRolOrigemExecucao(modelBuilder.Entity<DistRolOrigemExecucao>());\n            ConfigureDistTitular(modelBuilder.Entity<DistTitular>());\n            ConfigureMotivoRetencao(modelBuilder.Entity<MotivoRetencao>());\n            ConfigureDemonstrativoTitular(modelBuilder.Entity<RelDemonstrativoTitular>());\n            ConfigureRubrica(modelBuilder.Entity<Rubrica>());\n\n            base.OnModelCreating(modelBuilder);\n        }",
                        "dependencies": [
                           {
                              "type": "base",
                              "method": "OnModelCreating"
                           }
                        ]
                     },
                     "ConfigureDistAssociacao": {
                        "type": "method",
                        "raw": "private void ConfigureDistAssociacao(EntityTypeBuilder<DistAssociacao> builder)\n        {\n            builder.ToTable(\"DIST_ASSOCIACAO\");\n            builder.HasKey(e => e.CodDistAssociacao);\n            builder.Property(e => e.CodDistAssociacao).HasColumnName(\"cod_distassociacao\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistAssociacao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistAssociacao>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistAssociacao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistCompetencia": {
                        "type": "method",
                        "raw": "private void ConfigureDistCompetencia(EntityTypeBuilder<DistCompetencia> builder)\n        {\n            builder.ToTable(\"DIST_COMPETENCIA\");\n            builder.HasKey(e => e);\n            builder.Property(e => e.CodCompetencia).HasColumnName(\"cod_competencia\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistCompetencia>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistCompetencia>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistCompetencia>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistConsolidacao": {
                        "type": "method",
                        "raw": "private void ConfigureDistConsolidacao(EntityTypeBuilder<DistConsolidacao> builder)\n        {\n            builder.ToTable(\"DIST_CONSOLIDACAO\");\n            builder.HasKey(e => e.CodConsolidDistrib);\n            builder.Property(e => e.CodConsolidDistrib).HasColumnName(\"cod_consoliddistrib\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistConsolidacao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacao>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistConsolidacaoAud": {
                        "type": "method",
                        "raw": "private void ConfigureDistConsolidacaoAud(EntityTypeBuilder<DistConsolidacaoAud> builder)\n        {\n            builder.ToTable(\"DIST_CONSOLIDACAO_AUD\");\n            builder.HasKey(e => e.CodConsolidDistribAudio);\n            builder.Property(e => e.CodConsolidDistribAudio).HasColumnName(\"cod_consoliddistribaudio\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoAud>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoAud>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoAud>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistConsolidacaoDtl": {
                        "type": "method",
                        "raw": "private void ConfigureDistConsolidacaoDtl(EntityTypeBuilder<DistConsolidacaoDtl> builder)\n        {\n            builder.ToTable(\"DIST_CONSOLIDACAO_DTL\");\n            builder.HasKey(e => e.CodConsolidDistribDtl);\n            builder.Property(e => e.CodConsolidDistribDtl).HasColumnName(\"cod_consoliddistribdtl\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoDtl>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoDtl>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistConsolidacaoDtl>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistExecucaoSumario": {
                        "type": "method",
                        "raw": "private void ConfigureDistExecucaoSumario(EntityTypeBuilder<DistExecucaoSumario> builder)\n        {\n            builder.ToTable(\"DIST_EXECUCAO_SUMARIO\");\n            builder.HasKey(e => e.CodDistExecucaoSumario);\n            builder.Property(e => e.CodDistExecucaoSumario).HasColumnName(\"cod_distexecucaosumario\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistExecucaoSumario>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistExecucaoSumario>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistExecucaoSumario>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistPendente": {
                        "type": "method",
                        "raw": "private void ConfigureDistPendente(EntityTypeBuilder<DistPendente> builder)\n        {\n            builder.ToTable(\"DIST_PENDENTE\");\n            builder.HasKey(e => e.CodDistPendente);\n            builder.Property(e => e.CodDistPendente).HasColumnName(\"cod_distpendente\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistPendente>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistPendente>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistPendente>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistPonto": {
                        "type": "method",
                        "raw": "private void ConfigureDistPonto(EntityTypeBuilder<DistPonto> builder)\n        {\n            builder.ToTable(\"DIST_PONTO\");\n            builder.HasKey(e => e.CodPontoDistribuicao);\n            builder.Property(e => e.CodPontoDistribuicao).HasColumnName(\"cod_pontodistribuicao\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistPonto>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistPonto>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistPonto>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistRetido": {
                        "type": "method",
                        "raw": "private void ConfigureDistRetido(EntityTypeBuilder<DistRetido> builder)\n        {\n            builder.ToTable(\"DIST_RETIDO\");\n            builder.HasKey(e => e.CodDistRetido);\n            builder.Property(e => e.CodDistRetido).HasColumnName(\"cod_distretido\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistRetido>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRetido>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRetido>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistribuicao": {
                        "type": "method",
                        "raw": "private void ConfigureDistribuicao(EntityTypeBuilder<Distribuicao> builder)\n        {\n            builder.ToTable(\"DISTRIBUICAO\");\n            builder.HasKey(e => e.CodDistribuicao);\n            builder.Property(e => e.CodDistribuicao).HasColumnName(\"cod_distribuicao\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<Distribuicao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<Distribuicao>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<Distribuicao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistRol": {
                        "type": "method",
                        "raw": "private void ConfigureDistRol(EntityTypeBuilder<DistRol> builder)\n        {\n            builder.ToTable(\"DIST_ROL\");\n            builder.HasKey(e => e.CodDistRol);\n            builder.Property(e => e.CodDistRol).HasColumnName(\"cod_distrol\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistRol>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRol>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRol>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistRolOrigemExecucao": {
                        "type": "method",
                        "raw": "private void ConfigureDistRolOrigemExecucao(EntityTypeBuilder<DistRolOrigemExecucao> builder)\n        {\n            builder.ToTable(\"DIST_ROLORIGEM_EXECUCAO\");\n            builder.HasKey(e => e.CodDistOrigemExecucao);\n            builder.Property(e => e.CodDistOrigemExecucao).HasColumnName(\"cod_distorigemexecucao\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistRolOrigemExecucao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRolOrigemExecucao>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistRolOrigemExecucao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDistTitular": {
                        "type": "method",
                        "raw": "private void ConfigureDistTitular(EntityTypeBuilder<DistTitular> builder)\n        {\n            builder.ToTable(\"DIST_TITULAR\");\n            builder.HasKey(e => e.CodDistTitular);\n            builder.Property(e => e.CodDistTitular).HasColumnName(\"cod_disttitular\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<DistTitular>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<DistTitular>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<DistTitular>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureMotivoRetencao": {
                        "type": "method",
                        "raw": "private void ConfigureMotivoRetencao(EntityTypeBuilder<MotivoRetencao> builder)\n        {\n            builder.ToTable(\"MOTIVO_RETENCAO\");\n            builder.HasKey(e => e.SglMotivoRetencao);\n            builder.Property(e => e.SglMotivoRetencao).HasColumnName(\"sgl_motivoretencao\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<MotivoRetencao>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<MotivoRetencao>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<MotivoRetencao>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureDemonstrativoTitular": {
                        "type": "method",
                        "raw": "private void ConfigureDemonstrativoTitular(EntityTypeBuilder<RelDemonstrativoTitular> builder)\n        {\n            builder.ToTable(\"REL_DEMONSTRATIVO_TITULAR\");\n            builder.HasKey(e => e.CodDistTitular);\n            builder.Property(e => e.CodDistTitular).HasColumnName(\"cod_disttitular\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<RelDemonstrativoTitular>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<RelDemonstrativoTitular>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<RelDemonstrativoTitular>",
                              "method": "Property"
                           }
                        ]
                     },
                     "ConfigureRubrica": {
                        "type": "method",
                        "raw": "private void ConfigureRubrica(EntityTypeBuilder<Rubrica> builder)\n        {\n            builder.ToTable(\"RUBRICA\");\n            builder.HasKey(e => e.CodRubrica);\n            builder.Property(e => e.CodRubrica).HasColumnName(\"cod_rubrica\");\n        }",
                        "dependencies": [
                           {
                              "type": "EntityTypeBuilder<Rubrica>",
                              "method": "ToTable"
                           },
                           {
                              "type": "EntityTypeBuilder<Rubrica>",
                              "method": "HasKey"
                           },
                           {
                              "type": "EntityTypeBuilder<Rubrica>",
                              "method": "Property"
                           }
                        ]
                     }
                  }
               }
            }
         },
         "Services": {
            "MessageClient": {
               "MessageClient": {
                  "type": "class",
                  "members": {
                     "senderMessage": {
                        "type": "method",
                        "raw": "public async Task<bool> senderMessage(dynamic message, string connectionString, string queue)\n        {\n            ServiceBusClient client;\n            ServiceBusSender sender;\n\n            var clientOptions = new ServiceBusClientOptions()\n            {\n                TransportType = ServiceBusTransportType.AmqpWebSockets\n            };\n            client = new ServiceBusClient(connectionString, clientOptions);\n            sender = client.CreateSender(queue);\n\n            using ServiceBusMessageBatch messageBatch = await sender.CreateMessageBatchAsync();\n            messageBatch.TryAddMessage(new ServiceBusMessage(JsonSerializer.Serialize(message)));\n\n            try\n            {\n                await sender.SendMessagesAsync(messageBatch);\n                Console.WriteLine($\"messages has been published to the queue.\");\n            }\n            finally\n            {\n                await sender.DisposeAsync();\n                await client.DisposeAsync();\n            }\n\n            return true;\n        }",
                        "dependencies": [
                           {
                              "type": "client",
                              "method": "CreateSender"
                           },
                           {
                              "type": "sender",
                              "method": "CreateMessageBatchAsync"
                           },
                           {
                              "type": "messageBatch",
                              "method": "TryAddMessage"
                           },
                           {
                              "type": "JsonSerializer",
                              "method": "Serialize"
                           },
                           {
                              "type": "sender",
                              "method": "SendMessagesAsync"
                           },
                           {
                              "type": "Console",
                              "method": "WriteLine"
                           },
                           {
                              "type": "sender",
                              "method": "DisposeAsync"
                           },
                           {
                              "type": "client",
                              "method": "DisposeAsync"
                           }
                        ]
                     }
                  }
               }
            },
            "RolProcessado": {
               "RolProcessado": {
                  "type": "class",
                  "members": {}
               }
            },
            "ServiceBusConnection": {
               "ServiceBusConnection": {
                  "type": "class",
                  "members": {}
               }
            }
         }
      },
      "EcadGloboplay.Monitor": {
         "Program": {
            "Program": {
               "type": "class",
               "members": {}
            }
         },
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {
                  "MonitoramentoObraFonograma": {
                     "type": "method",
                     "raw": "private async Task MonitoramentoObraFonograma(CancellationToken stoppingToken)\n        {\n            var iniciouExecucao = false;\n\n            try\n            {\n                using (_telemetryClient.StartOperation<RequestTelemetry>(\"ProcessandoAudioVisual\"))\n                {\n                    _telemetryClient.TrackEvent(\"MonitoramentoCalculoAtivo\", new Dictionary<string, string>\n                {\n                    { \"timestamp\", DateTime.UtcNow.ToString(\"o\") }\n                });\n                    _logger.LogInformation(\"MonitoramentoCalculoAtivo\");\n\n                    while (true)\n                    {\n\n                        var topicName = \"retencao-obra-fonograma\";\n                        var subscription1 = \"fonogramas\";\n                        var subscription2 = \"obrasmusicais\";\n\n                        // Verificar a primeira subscription\n                        var subscription1Details = await _adminClient.GetSubscriptionRuntimePropertiesAsync(topicName, subscription1);\n                        long subscription1MessageCount = subscription1Details.Value.ActiveMessageCount;\n\n                        // Verificar a segunda subscription\n                        var subscription2Details = await _adminClient.GetSubscriptionRuntimePropertiesAsync(topicName, subscription2);\n                        long subscription2MessageCount = subscription2Details.Value.ActiveMessageCount;\n\n\n                        if (subscription1MessageCount != 0 || subscription2MessageCount != 0)\n                        {\n                            _telemetryClient.TrackEvent(\"ExecucaoIniciada\", new Dictionary<string, string>\n                            {\n                                { \"timestamp\", DateTime.UtcNow.ToString(\"o\") }\n                            });\n                            _logger.LogInformation(\"ExecucaoIniciada\");\n                            iniciouExecucao = true;\n                        }\n                        else\n                        {\n                            if (iniciouExecucao)\n                            {\n                                iniciouExecucao = false;\n                                await Task.Delay(60000, stoppingToken);\n\n                                _telemetryClient.TrackEvent(\"FimProcessamento\", new Dictionary<string, string>\n                                {\n                                    { \"timestamp\", DateTime.UtcNow.ToString(\"o\") }\n                                });\n\n                                _logger.LogInformation(\"FimProcessamento\");\n                                await IniciarProcessamentoEspelhoDemonstrativo();\n                                _logger.LogInformation(\"Mensagens de paginação enviadas\");\n                            }\n                        }\n\n                        await Task.Delay(120000, stoppingToken);\n                    }\n                }\n            }\n            catch(Exception ex)\n            {\n                _logger.LogError(ex, \"Erro no MonitoramentoObraFonograma\");\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackEvent"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "IAdminClient",
                           "method": "GetSubscriptionRuntimePropertiesAsync"
                        },
                        {
                           "type": "IAdminClient",
                           "method": "GetSubscriptionRuntimePropertiesAsync"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackEvent"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackEvent"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "UtcNow",
                           "method": "ToString"
                        },
                        {
                           "type": "UtcNow",
                           "method": "ToString"
                        },
                        {
                           "type": "Task",
                           "method": "Delay"
                        },
                        {
                           "type": "UtcNow",
                           "method": "ToString"
                        },
                        {
                           "type": "Task",
                           "method": "Delay"
                        }
                     ]
                  },
                  "IniciarProcessamentoEspelhoDemonstrativo": {
                     "type": "method",
                     "raw": "private async Task IniciarProcessamentoEspelhoDemonstrativo()\n        {\n            using (_telemetryClient.StartOperation<RequestTelemetry>(\"ProcessandoAudioVisual\"))\n            {\n                _telemetryClient.TrackEvent(\"InicioProcessamentoPdf\", new Dictionary<string, string>\n                        {\n                            { \"timestamp\", DateTime.UtcNow.ToString(\"o\") }\n                        });\n            }\n\n            var subscription1Details = await _adminClient.GetSubscriptionRuntimePropertiesAsync(\"demonstrativos\", \"system\");\n\n            if(subscription1Details.Value.TotalMessageCount == 0)\n            {\n                var paginas = PaginacaoDemonstrativo.ObterPaginacaoEspelho();\n\n                foreach (var pagina in paginas)\n                {\n                    var payload = System.Text.Json.JsonSerializer.Serialize(pagina);\n                    await _sender.SendMessageAsync(new ServiceBusMessage(payload));\n                }\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackEvent"
                        },
                        {
                           "type": "IAdminClient",
                           "method": "GetSubscriptionRuntimePropertiesAsync"
                        },
                        {
                           "type": "ISender",
                           "method": "SendMessageAsync"
                        },
                        {
                           "type": "UtcNow",
                           "method": "ToString"
                        },
                        {
                           "type": "PaginacaoDemonstrativo",
                           "method": "ObterPaginacaoEspelho"
                        },
                        {
                           "type": "JsonSerializer",
                           "method": "Serialize"
                        }
                     ]
                  },
                  "MonitoramentoDemonstrativo": {
                     "type": "method",
                     "raw": "private async Task MonitoramentoDemonstrativo(CancellationToken stoppingToken)\n        {\n            using (_telemetryClient.StartOperation<RequestTelemetry>(\"ProcessandoAudioVisual\"))\n            {\n                try\n                {\n                    _telemetryClient.TrackEvent(\"MonitoramentoDemonstrativoAtivo\", new Dictionary<string, string>\n                    {\n                        { \"timestamp\", DateTime.UtcNow.ToString(\"o\") }\n                    });\n                    _logger.LogInformation(\"MonitoramentoDemonstrativoAtivo\");\n\n                    var iniciouExecucao = false;\n\n                    while (true)\n                    {\n                        var queueName = \"demonstrativo\";\n\n                        var subscription1Details = await _adminClient.GetQueueRuntimePropertiesAsync(queueName);\n                        long messageCount = subscription1Details.Value.ActiveMessageCount;\n\n                        if (messageCount != 0)\n                        {\n                            iniciouExecucao = true;\n                            _logger.LogInformation(\"Execucao do PDF Iniciada\");\n                        }\n                        else\n                        {\n                            if (iniciouExecucao)\n                            {\n                                iniciouExecucao = false;\n                                await Task.Delay(60000, stoppingToken);\n\n                                _telemetryClient.TrackEvent(\"FimProcessamentoPdf\", new Dictionary<string, string>\n                                {\n                                    { \"timestamp\", DateTime.UtcNow.ToString(\"o\") }\n                                });\n                                _logger.LogInformation(\"FimProcessamentoPdf\");\n                            }\n\n                        }\n\n                        await Task.Delay(60000, stoppingToken);\n                    }\n                }catch(Exception ex)\n                {\n                    _logger.LogError(ex, \"Erro no MonitoramentoDemonstrativo\");\n                }\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackEvent"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "IAdminClient",
                           "method": "GetQueueRuntimePropertiesAsync"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackEvent"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "UtcNow",
                           "method": "ToString"
                        },
                        {
                           "type": "Task",
                           "method": "Delay"
                        },
                        {
                           "type": "UtcNow",
                           "method": "ToString"
                        },
                        {
                           "type": "Task",
                           "method": "Delay"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboPlay.ObrasMusicais": {
         "GetObrasMusicais": {
            "GetObrasMusicais": {
               "type": "class",
               "members": {
                  "Run": {
                     "type": "method",
                     "raw": "public async Task Run(\n            [ServiceBusTrigger(\"audiovisualgloboplay\", Connection = \"ServiceBusConnection\")] string myQueueItem, ServiceBusMessageActions messageActions)\n        {\n            _logger.LogInformation($\"C# ServiceBus queue trigger function processed message: {myQueueItem}\");\n            ServiceBusReceivedMessage message = null;\n\n            try\n            {\n                message = JsonConvert.DeserializeObject<ServiceBusReceivedMessage>(myQueueItem);\n                // Processar a mensagem e consultar o banco de dados\n                var result = await ProcessMessageAsync(myQueueItem);\n                \n\n\n                // Enviar mensagem para a fila fonogramas\n                await SendMessageToQueue(JsonConvert.SerializeObject(result));\n                await messageActions.CompleteMessageAsync(message);\n            }\n            catch(Exception ex)\n            {\n                await messageActions.DeadLetterMessageAsync(message, ex.ToString());\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "JsonConvert",
                           "method": "SerializeObject"
                        },
                        {
                           "type": "messageActions",
                           "method": "CompleteMessageAsync"
                        },
                        {
                           "type": "messageActions",
                           "method": "DeadLetterMessageAsync"
                        },
                        {
                           "type": "ex",
                           "method": "ToString"
                        }
                     ]
                  },
                  "ProcessMessageAsync": {
                     "type": "method",
                     "raw": "private async Task<AudioVisual> ProcessMessageAsync(string message)\n        {\n            var data = JsonConvert.DeserializeObject<AudioVisual>(message);\n\n            data.ObrasMusicais = await _dao.GetObrasMusicais(data.CodObraAudioEcad, data.CodCapiEpisodio);\n\n            // Retornar o resultado do processamento\n            return data;\n        }",
                     "dependencies": [
                        {
                           "type": "IDao",
                           "method": "GetObrasMusicais"
                        }
                     ]
                  },
                  "SendMessageToQueue": {
                     "type": "method",
                     "raw": "private async Task SendMessageToQueue(string message)\n        {\n            if (string.IsNullOrEmpty(message))\n            {\n                _logger.LogError(\"Message to send to the queue is null or empty.\");\n                return;\n            }\n\n            ServiceBusSender sender = _serviceBusClient.CreateSender(OutputQueueName);\n\n            try\n            {\n                ServiceBusMessage busMessage = new ServiceBusMessage(message);\n                await sender.SendMessageAsync(busMessage);\n                _logger.LogInformation(\"Message sent to the queue: {message}\", message);\n            }\n            finally\n            {\n                await sender.DisposeAsync();\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "IServiceBusClient",
                           "method": "CreateSender"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "string",
                           "method": "IsNullOrEmpty"
                        },
                        {
                           "type": "sender",
                           "method": "SendMessageAsync"
                        },
                        {
                           "type": "sender",
                           "method": "DisposeAsync"
                        }
                     ]
                  }
               }
            }
         },
         "Startup": {
            "Startup": {
               "type": "class",
               "members": {
                  "Configure": {
                     "type": "method",
                     "raw": "public override void Configure(IFunctionsHostBuilder builder)\n    {\n        var context = builder.GetContext();\n        var configuration = builder.GetContext().Configuration;\n\n        builder.Services.AddHttpClient();\n\n        var _stringConnection = \"Server=tcp:ecadpodsynapse.sql.azuresynapse.net,1433;Initial Catalog=sqlpoolpocecad;Persist Security Info=False;User ID=sqladminuser;Password=sm#)Mg^xD}",
                     "dependencies": [
                        {
                           "type": "IFunctionsHostBuilder",
                           "method": "GetContext"
                        },
                        {
                           "type": "IFunctionsHostBuilder",
                           "method": "GetContext"
                        },
                        {
                           "type": "Services",
                           "method": "AddHttpClient"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboplay.ObrasMusicaisFunction": {
         "Function1": {
            "Function1": {
               "type": "class",
               "members": {
                  "Run": {
                     "type": "method",
                     "raw": "public void Run([ServiceBusTrigger(\"myqueue\", Connection = \"\")]string myQueueItem, ILogger log)\n        {\n            log.LogInformation($\"C# ServiceBus queue trigger function processed message: {myQueueItem}\");\n        }",
                     "dependencies": [
                        {
                           "type": "log",
                           "method": "LogInformation"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboplay.ProcessingFonogramasWorker": {
         "Program": {
            "Program": {
               "type": "class",
               "members": {}
            }
         },
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {
                  "StartProcessor": {
                     "type": "method",
                     "raw": "private async Task StartProcessor(CancellationToken cancellationToken)\n        {\n            SemaphoreSlim semaphore = new SemaphoreSlim(15);\n\n\n            //var receiver = _client.CreateReceiver(\"retencao-obra-fonograma-secundario\", \"fonogramas\", new ServiceBusReceiverOptions() { PrefetchCount = 100 });\n            var receiver = _client.CreateReceiver(\"retencao-obra-fonograma\", \"fonogramas\", new ServiceBusReceiverOptions() { PrefetchCount = 100, ReceiveMode = ServiceBusReceiveMode.ReceiveAndDelete });\n\n            int batchSize = 50;\n            TimeSpan maxWaitTime = TimeSpan.FromSeconds(15);\n\n            while (!cancellationToken.IsCancellationRequested)\n            {\n                List<ServiceBusReceivedMessage> accumulatedMessages = new List<ServiceBusReceivedMessage>();\n                DateTime startTime = DateTime.UtcNow;\n\n                while (accumulatedMessages.Count < batchSize && (DateTime.UtcNow - startTime) < maxWaitTime)\n                {\n                    var remainingTime = maxWaitTime - (DateTime.UtcNow - startTime);\n                    if (remainingTime <= TimeSpan.Zero)\n                    {\n                        break;\n                    }\n\n                    // Recebe mensagens com o tempo restante\n                    IReadOnlyList<ServiceBusReceivedMessage> messages = await receiver.ReceiveMessagesAsync(batchSize, remainingTime);\n\n                    if (messages != null && messages.Any())\n                    {\n                        accumulatedMessages.AddRange(messages);\n                    }\n                }\n\n                if (!accumulatedMessages.Any())\n                {\n                    Console.WriteLine(\"Nenhuma mensagem recebida. Tentando novamente...\");\n                    continue;\n                }\n\n                using (var scope = _scopeFactory.CreateScope())\n                {\n                    var cacheService = scope.ServiceProvider.GetRequiredService<IConsolidacaoCacheService>();\n                    await cacheService.CarregarCache();\n                }\n\n                List<Task> threads = new List<Task>();\n                // Processar cada mensagem em uma nova thread\n                foreach (var message in accumulatedMessages)\n                {\n                    //await semaphore.WaitAsync(cancellationToken); // Controla o número de threads\n                    //threads.Add(Task.Run(async () =>\n                    //{\n                    //    try\n                    //    {\n                    //        await ProcessMessageAsync(receiver, message);\n                    //    }\n                    //    catch (Exception ex)\n                    //    {\n                    //        _logger.LogError(ex, \"Falha no processamento das consolidacoes\");\n                    //        await SendToDeadletter(message.Body.ToString(), ex);\n                    //    }\n                    //    finally\n                    //    {\n                    //        semaphore.Release();\n                    //    }\n                    //}, cancellationToken));\n\n                    await ProcessMessageAsync(receiver, message);\n                }\n                \n                //await Task.WhenAll(threads);\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "IClient",
                           "method": "CreateReceiver"
                        },
                        {
                           "type": "IClient",
                           "method": "CreateReceiver"
                        },
                        {
                           "type": "IScopeFactory",
                           "method": "CreateScope"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "TimeSpan",
                           "method": "FromSeconds"
                        },
                        {
                           "type": "receiver",
                           "method": "ReceiveMessagesAsync"
                        },
                        {
                           "type": "messages",
                           "method": "Any"
                        },
                        {
                           "type": "accumulatedMessages",
                           "method": "AddRange"
                        },
                        {
                           "type": "accumulatedMessages",
                           "method": "Any"
                        },
                        {
                           "type": "Console",
                           "method": "WriteLine"
                        },
                        {
                           "type": "cacheService",
                           "method": "CarregarCache"
                        },
                        {
                           "type": "semaphore",
                           "method": "WaitAsync"
                        },
                        {
                           "type": "threads",
                           "method": "Add"
                        },
                        {
                           "type": "Task",
                           "method": "Run"
                        },
                        {
                           "type": "Body",
                           "method": "ToString"
                        },
                        {
                           "type": "semaphore",
                           "method": "Release"
                        },
                        {
                           "type": "Task",
                           "method": "WhenAll"
                        }
                     ]
                  },
                  "ProcessMessageAsync": {
                     "type": "method",
                     "raw": "private async Task ProcessMessageAsync(ServiceBusReceiver receiver, ServiceBusReceivedMessage message)\n        {\n            CancellationTokenSource renewalTokenSource = new CancellationTokenSource();\n            var messageBody = message.Body.ToString();\n\n            using (var operation = _telemetryClient.StartOperation<RequestTelemetry>(\"ProcessingFonogramasWorker\"))\n            {\n                try\n                {\n                    AudioVisualGloboplay? audioVisual = JsonSerializer.Deserialize<AudioVisualGloboplay>(messageBody);\n\n                    using (var scope = _scopeFactory.CreateScope())\n                    {\n                        var calcularRolService = scope.ServiceProvider.GetRequiredService<ICalculaFonogramaService>();\n                        await calcularRolService.CalculaFonogramas(audioVisual);\n\n                        if (audioVisual != null && audioVisual.Fonogramas != null && audioVisual.TitularesFonograma != null)\n                        {\n                            _telemetryClient.TrackEvent(\"ProcessamentoFonograma\", new Dictionary<string, string>\n                            {\n                                { \"fonogramas\", (audioVisual?.Fonogramas?.Count() ?? 0).ToString() },\n                                { \"titularesFonograma\", (audioVisual?.TitularesFonograma?.Count() ?? 0).ToString() },\n                                { \"codCapiEpisodio\", audioVisual?.CodCapiEpisodio?.ToString() },\n                                { \"codObraAudioEcad\", audioVisual?.CodObraAudioEcad.ToString() }\n                            });\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Falha no processamento dos fonogramas\");\n                    _telemetryClient.TrackException(ex);\n                    await SendToDeadletter(messageBody, ex);\n                }\n\n                _telemetryClient.StopOperation(operation);\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "IScopeFactory",
                           "method": "CreateScope"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackEvent"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackException"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "StopOperation"
                        },
                        {
                           "type": "Body",
                           "method": "ToString"
                        },
                        {
                           "type": "calcularRolService",
                           "method": "CalculaFonogramas"
                        },
                        {
                           "type": "CodObraAudioEcad",
                           "method": "ToString"
                        }
                     ]
                  },
                  "SendToDeadletter": {
                     "type": "method",
                     "raw": "private async Task SendToDeadletter(string message, Exception ex)\n        {\n            var deadLetterErrorDescription = ex.StackTrace;\n\n            if (ex.InnerException != null)\n                deadLetterErrorDescription += $\" {ex.InnerException.ToString()}\";\n\n            deadLetterErrorDescription = deadLetterErrorDescription?.Length > 4000 ?  deadLetterErrorDescription?.Substring(0, 4000) : deadLetterErrorDescription;\n\n            var failedMessage = new ServiceBusMessage(message)\n            {\n                ApplicationProperties = { { \"Exception\", ex.Message }, { \"StackTrace\", deadLetterErrorDescription } }\n            };\n\n            // Envie a mensagem para a fila de falhas personalizada\n            await _sender.SendMessageAsync(failedMessage);\n        }",
                     "dependencies": [
                        {
                           "type": "ISender",
                           "method": "SendMessageAsync"
                        },
                        {
                           "type": "InnerException",
                           "method": "ToString"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboplay.ProcessingFunction": {
         "Function1": {
            "ProcessAudioVisualFunction": {
               "type": "class",
               "members": {
                  "Run": {
                     "type": "method",
                     "raw": "public async Task Run(\n            [ServiceBusTrigger(\"globoplay-dist2\", Connection = \"ServiceBusConnection\")] string queueItem, ServiceBusMessageActions messageActions)\n        {\n            _logger.LogInformation($\"C# ServiceBus queue trigger function processed message: {queueItem}\");\n            ServiceBusReceivedMessage message = null;\n\n            try\n            {\n                var audioVisual = await ProcessMessageAsync(queueItem);\n                if (audioVisual != null)\n                {\n                    //await SendMessageToQueue(JsonSerializer.Serialize(audioVisual));\n                    await messageActions.CompleteMessageAsync(message);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error processing message.\");\n                if (message != null)\n                {\n                    await messageActions.DeadLetterMessageAsync(message, ex.ToString());\n                }\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "JsonSerializer",
                           "method": "Serialize"
                        },
                        {
                           "type": "messageActions",
                           "method": "CompleteMessageAsync"
                        },
                        {
                           "type": "messageActions",
                           "method": "DeadLetterMessageAsync"
                        },
                        {
                           "type": "ex",
                           "method": "ToString"
                        }
                     ]
                  },
                  "ProcessMessageAsync": {
                     "type": "method",
                     "raw": "private async Task<AudioVisualGloboplay> ProcessMessageAsync(string messageBody)\n        {\n            AudioVisualGloboplay? audioVisual = null;\n            try\n            {\n                audioVisual = JsonSerializer.Deserialize<AudioVisualGloboplay>(messageBody);\n                _logger.LogInformation($\"Iniciando processamento de audio visual {audioVisual.CodObraAudioEcad}\");\n\n                if (audioVisual != null)\n                {\n                    _calcularRolService.CalculaEGeraRetencao(audioVisual);\n                    _logger.LogInformation($\"Processamento finalizado - {audioVisual.CodObraAudioEcad}\");\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error processing message\");\n            }\n\n            return audioVisual;\n        }",
                     "dependencies": [
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "ICalcularRolService",
                           "method": "CalculaEGeraRetencao"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        }
                     ]
                  },
                  "SendMessageToQueue": {
                     "type": "method",
                     "raw": "private async Task SendMessageToQueue(string message)\n        //{\n        //    if (string.IsNullOrEmpty(message))\n        //    {\n        //        _logger.LogError(\"Message to send to the queue is null or empty.\");\n        //        return;\n        //    }\n\n        //    ServiceBusSender sender = _serviceBusClient.CreateSender(OutputQueueName);\n\n        //    try\n        //    {\n        //        ServiceBusMessage busMessage = new ServiceBusMessage(message);\n        //        await sender.SendMessageAsync(busMessage);\n        //        _logger.LogInformation(\"Message sent to the queue: {message}\", message);\n        //    }\n        //    finally\n        //    {\n        //        await sender.DisposeAsync();\n        //    }\n        //}",
                     "dependencies": [
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "IServiceBusClient",
                           "method": "CreateSender"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "string",
                           "method": "IsNullOrEmpty"
                        },
                        {
                           "type": "sender",
                           "method": "SendMessageAsync"
                        },
                        {
                           "type": "sender",
                           "method": "DisposeAsync"
                        }
                     ]
                  }
               }
            }
         },
         "Program": {
            "Function1": {
               "type": "class",
               "members": {
                  "Configure": {
                     "type": "method",
                     "raw": "public override void Configure(IFunctionsHostBuilder builder)\n    {\n        var context = builder.GetContext();\n        var configuration = builder.GetContext().Configuration;\n\n        builder.Services.AddHttpClient();\n\n        var _stringConnection = \"Server=tcp:sqlserverpocecad.database.windows.net,1433;Initial Catalog=azuresqlpocecad;Persist Security Info=False;User ID=sqladminuser;Password=y?ve}",
                     "dependencies": [
                        {
                           "type": "IFunctionsHostBuilder",
                           "method": "GetContext"
                        },
                        {
                           "type": "IFunctionsHostBuilder",
                           "method": "GetContext"
                        },
                        {
                           "type": "Services",
                           "method": "AddHttpClient"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboplay.ProcessingObrasMusicaisWorker": {
         "Program": {
            "Program": {
               "type": "class",
               "members": {}
            }
         },
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {
                  "StartProcessor": {
                     "type": "method",
                     "raw": "private async Task StartProcessor(CancellationToken cancellationToken)\n        {\n            //SemaphoreSlim semaphore = new SemaphoreSlim(15);\n\n            var receiver = _client.CreateReceiver(\"retencao-obra-fonograma\", \"obrasmusicais\", new ServiceBusReceiverOptions() { PrefetchCount = 100, ReceiveMode = ServiceBusReceiveMode.ReceiveAndDelete });\n            int batchSize = 50;\n            TimeSpan maxWaitTime = TimeSpan.FromSeconds(15);\n\n            while (!cancellationToken.IsCancellationRequested)\n            {\n                List<ServiceBusReceivedMessage> accumulatedMessages = new List<ServiceBusReceivedMessage>();\n                DateTime startTime = DateTime.UtcNow;\n\n                while (accumulatedMessages.Count < batchSize && (DateTime.UtcNow - startTime) < maxWaitTime)\n                {\n                    var remainingTime = maxWaitTime - (DateTime.UtcNow - startTime);\n                    if (remainingTime <= TimeSpan.Zero)\n                    {\n                        break;\n                    }\n\n                    // Recebe mensagens com o tempo restante\n                    IReadOnlyList<ServiceBusReceivedMessage> messages = await receiver.ReceiveMessagesAsync(batchSize, remainingTime);\n\n                    if (messages != null && messages.Any())\n                    {\n                        accumulatedMessages.AddRange(messages);\n                    }\n                }\n\n                if (!accumulatedMessages.Any())\n                {\n                    Console.WriteLine(\"Nenhuma mensagem recebida. Tentando novamente...\");\n                    continue;\n                }\n\n                using (var scope = _scopeFactory.CreateScope())\n                {\n                    var cacheService = scope.ServiceProvider.GetRequiredService<IConsolidacaoCacheService>();\n                    await cacheService.CarregarCache();\n                }\n\n                var tasks = new List<Task>();\n                // Processar cada mensagem em uma nova thread\n                foreach (var message in accumulatedMessages)\n                {\n                    //await semaphore.WaitAsync(cancellationToken); // Controla o número de threads\n                    //tasks.Add(Task.Run(async () =>\n                    //{\n                    //    try\n                    //    {\n                    //        await ProcessMessageAsync(receiver, message);\n                    //    }\n                    //    catch (Exception ex)\n                    //    {\n                    //        _logger.LogError(ex, \"Falha no processamento das consolidacoes\");\n                    //        await SendToDeadletter(message.Body.ToString(), ex);\n                    //    }\n                    //    finally\n                    //    {\n                    //        semaphore.Release();\n                    //    }\n                    //}, cancellationToken));\n                    try\n                    {\n                        await ProcessMessageAsync(receiver, message);\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogError(ex, \"Falha no processamento das consolidacoes\");\n                        await SendToDeadletter(message.Body.ToString(), ex);\n                    }\n                }\n\n                //await Task.WhenAll(tasks);\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "IClient",
                           "method": "CreateReceiver"
                        },
                        {
                           "type": "IScopeFactory",
                           "method": "CreateScope"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "TimeSpan",
                           "method": "FromSeconds"
                        },
                        {
                           "type": "receiver",
                           "method": "ReceiveMessagesAsync"
                        },
                        {
                           "type": "messages",
                           "method": "Any"
                        },
                        {
                           "type": "accumulatedMessages",
                           "method": "AddRange"
                        },
                        {
                           "type": "accumulatedMessages",
                           "method": "Any"
                        },
                        {
                           "type": "Console",
                           "method": "WriteLine"
                        },
                        {
                           "type": "cacheService",
                           "method": "CarregarCache"
                        },
                        {
                           "type": "semaphore",
                           "method": "WaitAsync"
                        },
                        {
                           "type": "tasks",
                           "method": "Add"
                        },
                        {
                           "type": "Task",
                           "method": "Run"
                        },
                        {
                           "type": "Body",
                           "method": "ToString"
                        },
                        {
                           "type": "semaphore",
                           "method": "Release"
                        },
                        {
                           "type": "Body",
                           "method": "ToString"
                        },
                        {
                           "type": "Task",
                           "method": "WhenAll"
                        }
                     ]
                  },
                  "ProcessMessageAsync": {
                     "type": "method",
                     "raw": "private async Task ProcessMessageAsync(ServiceBusReceiver receiver, ServiceBusReceivedMessage message)\n        {\n            CancellationTokenSource renewalTokenSource = new CancellationTokenSource();\n            var messageBody = message.Body.ToString();\n            \n            try\n            {\n                AudioVisualGloboplay? audioVisual = JsonSerializer.Deserialize<AudioVisualGloboplay>(messageBody);\n\n                using (var scope = _scopeFactory.CreateScope())\n                {\n                    using (var operation = _telemetryClient.StartOperation<RequestTelemetry>(\"ProcessingObrasWorker\"))\n                    {\n                        var calcularRolService = scope.ServiceProvider.GetRequiredService<ICalculaObraService>();\n                        await calcularRolService.CalculaObrasMusicais(audioVisual);\n\n                        if (audioVisual != null && audioVisual.ObrasMusicais != null)\n                        {\n                            _telemetryClient.TrackEvent(\"ProcessamentoObra\", new Dictionary<string, string>\n                            {\n                                { \"obras\", (audioVisual?.ObrasMusicais?.Count() ?? 0).ToString() },\n                                { \"codCapiEpisodio\", audioVisual?.CodCapiEpisodio?.ToString() },\n                                { \"codObraAudioEcad\", audioVisual?.CodObraAudioEcad.ToString() }\n                            });\n                        }\n                        _telemetryClient.StopOperation(operation);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Falha no processamento das obras\");\n                await SendToDeadletter(messageBody, ex);\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "IScopeFactory",
                           "method": "CreateScope"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackEvent"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "StopOperation"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "Body",
                           "method": "ToString"
                        },
                        {
                           "type": "calcularRolService",
                           "method": "CalculaObrasMusicais"
                        },
                        {
                           "type": "CodObraAudioEcad",
                           "method": "ToString"
                        }
                     ]
                  },
                  "SendToDeadletter": {
                     "type": "method",
                     "raw": "private async Task SendToDeadletter(string message, Exception ex)\n        {\n            var deadLetterErrorDescription = ex.StackTrace;\n\n            if (ex.InnerException != null)\n                deadLetterErrorDescription += $\" {ex.InnerException.ToString()}\";\n\n            deadLetterErrorDescription = deadLetterErrorDescription?.Length > 4000 ? deadLetterErrorDescription?.Substring(0, 4000) : deadLetterErrorDescription;\n\n            var failedMessage = new ServiceBusMessage(message)\n            {\n                ApplicationProperties = { { \"Exception\", ex.Message }, { \"StackTrace\", deadLetterErrorDescription } }\n            };\n\n            // Envie a mensagem para a fila de falhas personalizada\n            await _sender.SendMessageAsync(failedMessage);\n        }",
                     "dependencies": [
                        {
                           "type": "ISender",
                           "method": "SendMessageAsync"
                        },
                        {
                           "type": "InnerException",
                           "method": "ToString"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboplay.ProcessingWorker": {
         "Program": {
            "Program": {
               "type": "class",
               "members": {}
            }
         },
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {
                  "StartProcessor": {
                     "type": "method",
                     "raw": "private async Task StartProcessor(CancellationToken cancellationToken)\n        {\n            //SemaphoreSlim semaphore = new SemaphoreSlim(20);\n\n            var receiver = _client.CreateReceiver(\"retencao\", \"retencao\", new ServiceBusReceiverOptions() { PrefetchCount = 100, ReceiveMode = ServiceBusReceiveMode.ReceiveAndDelete });\n            int batchSize = 50;\n            TimeSpan maxWaitTime = TimeSpan.FromSeconds(15);\n\n\n            while (!cancellationToken.IsCancellationRequested)\n            {\n                List<ServiceBusReceivedMessage> accumulatedMessages = new List<ServiceBusReceivedMessage>();\n                DateTime startTime = DateTime.UtcNow;\n\n                while (accumulatedMessages.Count < batchSize && (DateTime.UtcNow - startTime) < maxWaitTime)\n                {\n                    var remainingTime = maxWaitTime - (DateTime.UtcNow - startTime);\n                    if (remainingTime <= TimeSpan.Zero)\n                    {\n                        break;\n                    }\n\n                    // Recebe mensagens com o tempo restante\n                    IReadOnlyList<ServiceBusReceivedMessage> messages = await receiver.ReceiveMessagesAsync(batchSize, remainingTime);\n\n                    if (messages != null && messages.Any())\n                    {\n                        accumulatedMessages.AddRange(messages);\n                    }\n                }\n\n                if (!accumulatedMessages.Any())\n                {\n                    Console.WriteLine(\"Nenhuma mensagem recebida. Tentando novamente...\");\n                    continue;\n                }\n\n                // Processar cada mensagem em uma nova thread\n                foreach (var message in accumulatedMessages)\n                {\n                    //await semaphore.WaitAsync(cancellationToken); // Controla o número de threads\n\n                    //_ = Task.Run(async () =>\n                    //{\n                    //    try\n                    //    {\n                    //        await ProcessMessageAsync(receiver, message);\n                    //    }\n                    //    catch (Exception ex)\n                    //    {\n                    //        _logger.LogError(ex, \"Falha no processamento das consolidacoes\");\n                    //        await SendToDeadletter(message.Body.ToString(), ex);\n                    //    }\n                    //    finally\n                    //    {\n                    //        semaphore.Release();\n                    //    }\n                    //}, cancellationToken);\n                    try\n                    {\n                        await ProcessMessageAsync(receiver, message);\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogError(ex, \"Falha no processamento das consolidacoes\");\n                        await SendToDeadletter(message.Body.ToString(), ex);\n                    }\n                }\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "IClient",
                           "method": "CreateReceiver"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "TimeSpan",
                           "method": "FromSeconds"
                        },
                        {
                           "type": "receiver",
                           "method": "ReceiveMessagesAsync"
                        },
                        {
                           "type": "messages",
                           "method": "Any"
                        },
                        {
                           "type": "accumulatedMessages",
                           "method": "AddRange"
                        },
                        {
                           "type": "accumulatedMessages",
                           "method": "Any"
                        },
                        {
                           "type": "Console",
                           "method": "WriteLine"
                        },
                        {
                           "type": "semaphore",
                           "method": "WaitAsync"
                        },
                        {
                           "type": "Task",
                           "method": "Run"
                        },
                        {
                           "type": "Body",
                           "method": "ToString"
                        },
                        {
                           "type": "semaphore",
                           "method": "Release"
                        },
                        {
                           "type": "Body",
                           "method": "ToString"
                        }
                     ]
                  },
                  "ProcessMessageAsync": {
                     "type": "method",
                     "raw": "private async Task ProcessMessageAsync(ServiceBusReceiver receiver, ServiceBusReceivedMessage message)\n        {\n            var messageBody = message.Body.ToString();\n\n            try\n            {    \n                AudioVisualGloboplay? audioVisual = JsonSerializer.Deserialize<AudioVisualGloboplay>(messageBody);\n\n                using (var scope = _scopeFactory.CreateScope())\n                {\n                    using (var operation = _telemetryClient.StartOperation<RequestTelemetry>(\"ProcessingRetencaoWorker\"))\n                    {\n                        var calcularRolService = scope.ServiceProvider.GetRequiredService<ICalcularRolService>();\n                        await calcularRolService.CalculaEGeraRetencao(audioVisual);\n\n                        _telemetryClient.TrackMetric(\"PayloadAudioVisual\", audioVisual.CodObraAudioEcad, new Dictionary<string, string> { { \"AudioVisual\", messageBody } });\n                        _telemetryClient.StopOperation(operation);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Falha no processamento das consolidacoes\");\n                await SendToDeadletter(messageBody, ex);\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "IScopeFactory",
                           "method": "CreateScope"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "TrackMetric"
                        },
                        {
                           "type": "ITelemetryClient",
                           "method": "StopOperation"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "Body",
                           "method": "ToString"
                        },
                        {
                           "type": "calcularRolService",
                           "method": "CalculaEGeraRetencao"
                        }
                     ]
                  },
                  "SendToDeadletter": {
                     "type": "method",
                     "raw": "private async Task SendToDeadletter(string message, Exception ex)\n        {\n            var deadLetterErrorDescription = ex.StackTrace;\n\n            if (ex.InnerException != null)\n                deadLetterErrorDescription += $\" {ex.InnerException.ToString()}\";\n\n            deadLetterErrorDescription = deadLetterErrorDescription?.Length > 4000 ? deadLetterErrorDescription?.Substring(0, 4000) : deadLetterErrorDescription;\n\n            var failedMessage = new ServiceBusMessage(message)\n            {\n                ApplicationProperties = { { \"Exception\", ex.Message }, { \"StackTrace\", deadLetterErrorDescription } }\n            };\n\n            // Envie a mensagem para a fila de falhas personalizada\n            await _sender.SendMessageAsync(failedMessage);\n        }",
                     "dependencies": [
                        {
                           "type": "ISender",
                           "method": "SendMessageAsync"
                        },
                        {
                           "type": "InnerException",
                           "method": "ToString"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboplay.RelatorioPerformance": {
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {}
            }
         }
      },
      "EcadGloboPlay.Test": {
         "CalculaFonogramaServicesTests": {
            "CalculaFonogramaServicesTests": {
               "type": "class",
               "members": {
                  "TesteCalculo": {
                     "type": "method",
                     "raw": "public async Task TesteCalculo()\n        {\n            try {\n                string[] fileNames = Directory.GetFiles(@\"D:\\deadletter\\Deadletter\\bin\\Debug\\net8.0\\arquivos\");\n\n                //var _retencaoLogger = new Mock<ILogger<RetencaoService>>();\n                //var retencaoService = new RetencaoService(_retencaoLogger.Object, _inMemoryDbContext, _cacheServiceMock.Object);\n\n                //var retencaoCalculo = new CalcularRolService(_loggerMock.Object, _inMemoryDbContext, retencaoService, _serviceBusClientMock.Object);\n\n                //var distLogger = new Mock<ILogger<DistribuirVerbaService>>();\n                //var distribuicao = new DistribuirVerbaService(_inMemoryDbContext, distLogger.Object, _cacheServiceMock.Object);\n                \n                //var fonogramaCalculo = new CalculaFonogramaServices(_loggerMock.Object, _inMemoryDbContext, retencaoService, distribuicao, _cacheServiceMock.Object);\n\n                //var obraCalculo = new CalculaObraService(_loggerMock.Object, _inMemoryDbContext, retencaoService, distribuicao, _cacheServiceMock.Object);\n\n                var count = 0;\n                var idFonograma = \"ba422de3-33f5-4fae-a4ab-4b6bf163bd99\";\n                var idObra = \"e6be47af-6bf5-4c65-bd0e-270d7dda834a\";\n\n                var tasks = fileNames.Select(async filePath =>\n                {\n                    var watch = new Stopwatch();\n                    watch.Start();\n                    // Criar um novo DbContext para cada tarefa, mas com o mesmo banco de dados em memória\n                    using (var context = CreateInMemoryDbContext())\n                    {\n                        var _retencaoLogger = new Mock<ILogger<RetencaoService>>();\n                        var retencaoService = new RetencaoService(_retencaoLogger.Object, context, _cacheServiceMock.Object);\n\n                        var retencaoCalculo = new CalcularRolService(_loggerMock.Object, context, retencaoService, _serviceBusClientMock.Object);\n\n                        var distLogger = new Mock<ILogger<DistribuirVerbaService>>();\n                        var distribuicao = new DistribuirVerbaService(context, distLogger.Object, _cacheServiceMock.Object);\n\n                        var fonogramaCalculo = new CalculaFonogramaServices(_loggerMock.Object, context, retencaoService, distribuicao, _cacheServiceMock.Object);\n                        var obraCalculo = new CalculaObraService(_loggerMock.Object, context, retencaoService, distribuicao, _cacheServiceMock.Object);\n\n                        // Processar o arquivo JSON\n                        string json = await File.ReadAllTextAsync(filePath);\n                        AudioVisualGloboplay? audioVisual = JsonSerializer.Deserialize<AudioVisualGloboplay>(json);\n\n                        // Executar os cálculos com os serviços\n                        await retencaoCalculo.CalculaEGeraRetencao(audioVisual);\n                        await fonogramaCalculo.CalculaFonogramasV2(audioVisual);\n                        await obraCalculo.CalculaObrasMusicaisV2(audioVisual);\n\n                        // Incrementar o contador de maneira thread-safe\n                        Interlocked.Increment(ref count);\n                    }\n                    watch.Stop();\n                    var totalTime = watch.ElapsedMilliseconds;\n                });\n\n                // Aguardar a conclusão de todas as tarefas\n                await Task.WhenAll(tasks);\n\n                using (var context = CreateInMemoryDbContext())\n                {\n                    var somaDistTitular = context.DistTitular.Sum(x => x.VlrTitular);\n                    var somarDistRetido = context.DistRetido.Sum(x => x.VlrTitular); // 1.640.688,87\n\n                    var query =\n                    from dr in context.DistRetido\n                    where context.DistConsolidacaoDtl\n                        .Any(dcd => dcd.CodConsolidDistribDtl == dr.CodConsolidDistribDtl.CodConsolidDistribDtl &&\n                                    context.DistConsolidacao\n                                        .Any(dc => dc.CodConsolidDistrib == dcd.CodConsolidDistrib))\n                    group dr by dr.SglMotivoRetencao into grouped\n                    select new\n                    {\n                        TotalPorRetencao = grouped.Count(),\n                        SglMotivoRetencao = grouped.Key\n                    };\n\n                    var qtdTiposRetencao = await query.ToListAsync();\n\n                    var somaCCDistribuido = await (\n                        from dr in context.DistTitular\n                        join dcd in context.DistConsolidacaoDtl on dr.CodConsolidDistribDtl equals dcd.CodConsolidDistribDtl\n                        where dcd.TipParteRepresentada == \"CC\"\n                        select dr.VlrTitular\n                    ).SumAsync();\n\n                    var somaAADistribuido = await (\n                        from dr in context.DistTitular\n                        join dcd in context.DistConsolidacaoDtl on dr.CodConsolidDistribDtl equals dcd.CodConsolidDistribDtl\n                        where dcd.TipParteRepresentada == \"AA\"\n                        select dr.VlrTitular\n                    ).SumAsync();\n\n                    // Combinar os dois resultados\n                    var resultadoFinalDistribuido = new List<decimal>\n                    {\n                        somaCCDistribuido,\n                        somaAADistribuido\n                    };\n\n                    // Soma dos valores para TipParteRepresentada == 'CC'\n                    var somaCC = await (\n                        from dr in context.DistRetido\n                        join dcd in context.DistConsolidacaoDtl on dr.CodConsolidDistribDtl.CodConsolidDistribDtl equals dcd.CodConsolidDistribDtl\n                        where dcd.TipParteRepresentada == \"CC\"\n                        select dr.VlrTitular\n                    ).SumAsync();\n\n                    // Soma dos valores para TipParteRepresentada == 'AA'\n                    var somaAA = await (\n                        from dr in context.DistRetido\n                        join dcd in context.DistConsolidacaoDtl on dr.CodConsolidDistribDtl.CodConsolidDistribDtl equals dcd.CodConsolidDistribDtl\n                        where dcd.TipParteRepresentada == \"AA\"\n                        select dr.VlrTitular\n                    ).SumAsync();\n\n                    // Combinar os dois resultados (simulando o UNION ALL)\n                    var resultadoFinalRetido = new List<decimal>\n                    {\n                        somaCC,\n                        somaAA\n                    };\n\n                    var resultados = new\n                    {\n                        somaDistTitular = somaDistTitular,\n                        somarDistRetido = somarDistRetido,\n                        qtdTiposRetencao = qtdTiposRetencao.Select(r => new\n                        {\n                            r.SglMotivoRetencao,\n                            r.TotalPorRetencao\n                        }).ToList(),\n                        resultadoFinalDistribuido = resultadoFinalDistribuido,\n                        resultadoFinalRetido = resultadoFinalRetido\n                    };\n\n                    var appDirectory = AppDomain.CurrentDomain.BaseDirectory;\n                    var folderPath = Path.Combine(appDirectory, \"resultados\");\n\n                    if (!Directory.Exists(folderPath))\n                    {\n                        Directory.CreateDirectory(folderPath);\n                    }\n\n                    var fileName = Guid.NewGuid().ToString() + \".json\";\n                    var filePath = Path.Combine(folderPath, fileName);\n\n                    string jsonString = JsonSerializer.Serialize(resultados, new JsonSerializerOptions { WriteIndented = true });\n                    await File.WriteAllTextAsync(filePath, jsonString);\n\n                    Assert.Equal(1640784.26m, somaDistTitular + somarDistRetido);\n                    Assert.Equal(somaDistTitular, somarDistRetido);\n                }\n\n                    //foreach (var filename in fileNames)\n                    //{\n                    //    AudioVisualGloboplay? audioVisual = JsonSerializer.Deserialize<AudioVisualGloboplay>(File.ReadAllText(filename));\n                    //    await retencaoCalculo.CalculaEGeraRetencao(audioVisual);\n                    //    await fonogramaCalculo.CalculaFonogramas(audioVisual);\n                    //    await obraCalculo.CalculaObrasMusicais(audioVisual);\n                    //    count++;\n                    //}\n\n                \n            }\n            catch(Exception ex)\n            {\n\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "Directory",
                           "method": "GetFiles"
                        },
                        {
                           "type": "fileNames",
                           "method": "Select"
                        },
                        {
                           "type": "watch",
                           "method": "Start"
                        },
                        {
                           "type": "File",
                           "method": "ReadAllTextAsync"
                        },
                        {
                           "type": "retencaoCalculo",
                           "method": "CalculaEGeraRetencao"
                        },
                        {
                           "type": "fonogramaCalculo",
                           "method": "CalculaFonogramasV2"
                        },
                        {
                           "type": "obraCalculo",
                           "method": "CalculaObrasMusicaisV2"
                        },
                        {
                           "type": "Interlocked",
                           "method": "Increment"
                        },
                        {
                           "type": "watch",
                           "method": "Stop"
                        },
                        {
                           "type": "Task",
                           "method": "WhenAll"
                        },
                        {
                           "type": "DistTitular",
                           "method": "Sum"
                        },
                        {
                           "type": "DistRetido",
                           "method": "Sum"
                        },
                        {
                           "type": "grouped",
                           "method": "Count"
                        },
                        {
                           "type": "query",
                           "method": "ToListAsync"
                        },
                        {
                           "type": "qtdTiposRetencao",
                           "method": "Select"
                        },
                        {
                           "type": "Path",
                           "method": "Combine"
                        },
                        {
                           "type": "Directory",
                           "method": "Exists"
                        },
                        {
                           "type": "Directory",
                           "method": "CreateDirectory"
                        },
                        {
                           "type": "Guid",
                           "method": "NewGuid"
                        },
                        {
                           "type": "Path",
                           "method": "Combine"
                        },
                        {
                           "type": "JsonSerializer",
                           "method": "Serialize"
                        },
                        {
                           "type": "File",
                           "method": "WriteAllTextAsync"
                        },
                        {
                           "type": "Assert",
                           "method": "Equal"
                        },
                        {
                           "type": "Assert",
                           "method": "Equal"
                        },
                        {
                           "type": "File",
                           "method": "ReadAllText"
                        },
                        {
                           "type": "retencaoCalculo",
                           "method": "CalculaEGeraRetencao"
                        },
                        {
                           "type": "fonogramaCalculo",
                           "method": "CalculaFonogramas"
                        },
                        {
                           "type": "obraCalculo",
                           "method": "CalculaObrasMusicais"
                        }
                     ]
                  },
                  "CreateInMemoryDbContext": {
                     "type": "method",
                     "raw": "private EcadDbContext CreateInMemoryDbContext()\n        {\n            var options = new DbContextOptionsBuilder<EcadDbContext>()\n                .UseInMemoryDatabase(databaseName: \"InMemoryTestDatabase\")\n                .Options;\n\n            return new EcadDbContext(options);\n        }"
                  }
               }
            }
         }
      },
      "EcadGloboplay.TitularesFonograma": {
         "GetTitularesFonograma": {
            "GetTitularesFonograma": {
               "type": "class",
               "members": {
                  "Run": {
                     "type": "method",
                     "raw": "public static async Task Run(\n            [ServiceBusTrigger(\"QueueName\", Connection = \"NamespaceConnectionString\")] string inputQueue,\n            [ServiceBus(\"OutputQueueName\", Connection = \"NamespaceConnectionString\")] IAsyncCollector<string> outputQueue,\n            ILogger log)\n        {\n            log.LogInformation($\"C# ServiceBus queue trigger function processed message: {inputQueue}\");\n\n            var _stringConnection = \"Server=tcp:ecadpodsynapse.sql.azuresynapse.net,1433;Initial Catalog=sqlpoolpocecad;Persist Security Info=False;User ID=sqladminuser;Password=sm#)Mg^xD}",
                     "dependencies": [
                        {
                           "type": "log",
                           "method": "LogInformation"
                        }
                     ]
                  }
               }
            }
         },
         "Startup": {
            "Startup": {
               "type": "class",
               "members": {
                  "Configure": {
                     "type": "method",
                     "raw": "public override void Configure(IFunctionsHostBuilder builder)\n    {\n        builder.Services.AddHttpClient();\n        var connectionServiceBus = \"Endpoint=sb://asb-poc-ecad.servicebus.windows.net/;SharedAccessKeyName=asb-poc-ecad-rule;SharedAccessKey=ngrfvgo+0qk8tNUj5UBWDRzT35L3UJtQc+ASbH3+kdI=\";\n        var queueServiceBus = \"titularesfonogramagloboplay\";\n\n        builder.Services.AddScoped<ServicebusClient>(x => new ServicebusClient(connectionServiceBus, queueServiceBus));\n        builder.Services.AddScoped<IObterDadosService, ObterDadosService>();\n    }",
                     "dependencies": [
                        {
                           "type": "Services",
                           "method": "AddHttpClient"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboplay.TitularesObraMusical": {
         "GetTitularesObraMusical": {
            "GetTitularesObraMusical": {
               "type": "class",
               "members": {
                  "Run": {
                     "type": "method",
                     "raw": "public static async Task Run(\n            [ServiceBusTrigger(\"QueueName\", Connection = \"NamespaceConnectionString\")] string inputQueue,\n            [ServiceBus(\"OutputQueueName\", Connection = \"NamespaceConnectionString\")] IAsyncCollector<string> outputQueue,\n            ILogger log)\n        {\n            log.LogInformation($\"C# ServiceBus queue trigger function processed message: {inputQueue}\");\n\n            var _stringConnection = \"Server=tcp:ecadpodsynapse.sql.azuresynapse.net,1433;Initial Catalog=sqlpoolpocecad;Persist Security Info=False;User ID=sqladminuser;Password=sm#)Mg^xD}",
                     "dependencies": [
                        {
                           "type": "log",
                           "method": "LogInformation"
                        }
                     ]
                  }
               }
            }
         },
         "Startup": {
            "Startup": {
               "type": "class",
               "members": {
                  "Configure": {
                     "type": "method",
                     "raw": "public override void Configure(IFunctionsHostBuilder builder)\n    {\n        builder.Services.AddHttpClient();\n\n        var connectionServiceBus = \"Endpoint=sb://asb-poc-ecad.servicebus.windows.net/;SharedAccessKeyName=asb-poc-ecad-rule;SharedAccessKey=ngrfvgo+0qk8tNUj5UBWDRzT35L3UJtQc+ASbH3+kdI=\";\n        var queueServiceBus = \"titularesobramusicalgloboplay\";\n\n        builder.Services.AddScoped<ServicebusClient>(x => new ServicebusClient(connectionServiceBus, queueServiceBus));\n        builder.Services.AddScoped<IObterDadosService, ObterDadosService>();\n    }",
                     "dependencies": [
                        {
                           "type": "Services",
                           "method": "AddHttpClient"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGloboPlayObrasMusicais": {
         "Program": {
            "Program": {
               "type": "class",
               "members": {}
            }
         },
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {
                  "ProcessMessageAsync": {
                     "type": "method",
                     "raw": "private async Task ProcessMessageAsync(ServiceBusReceiver receiver, ServiceBusReceivedMessage message, string outputQueueName, AudioVisual audioVisual)\n        {\n            try\n            {\n                await SendMessageToQueue(System.Text.Json.JsonSerializer.Serialize(audioVisual), outputQueueName);\n                await receiver.CompleteMessageAsync(message);\n                //_logger.LogInformation($\"Mensagem processada: {message.MessageId}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $\"Error processing message: {message.MessageId}\");\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "JsonSerializer",
                           "method": "Serialize"
                        },
                        {
                           "type": "ServiceBusReceiver",
                           "method": "CompleteMessageAsync"
                        }
                     ]
                  },
                  "ProcessMessagesAsync": {
                     "type": "method",
                     "raw": "private async Task ProcessMessagesAsync(string queueName, Func<ServiceBusReceiver, ServiceBusReceivedMessage, Task> processMessage, CancellationToken stoppingToken)\n        {\n            var receiver = _serviceBusClient.CreateReceiver(queueName);\n\n            try\n            {\n                while (!stoppingToken.IsCancellationRequested)\n                {\n                    var messages = await receiver.ReceiveMessagesAsync(maxMessages: 100, maxWaitTime: TimeSpan.FromSeconds(1), cancellationToken: stoppingToken);\n\n                    if (messages.Any())\n                    {\n                        Console.WriteLine(\"Tem mensagem\");\n                        var parallelOptions = new ParallelOptions\n                        {\n                            MaxDegreeOfParallelism = Environment.ProcessorCount\n                        };\n\n                        await Parallel.ForEachAsync(messages, parallelOptions, async (msg, ct) =>\n                        {\n                            await processMessage(receiver, msg);\n                        });\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Não Tem mensagem\");\n                    }\n                }\n            }\n            finally\n            {\n                await receiver.CloseAsync();\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "IServiceBusClient",
                           "method": "CreateReceiver"
                        },
                        {
                           "type": "receiver",
                           "method": "ReceiveMessagesAsync"
                        },
                        {
                           "type": "TimeSpan",
                           "method": "FromSeconds"
                        },
                        {
                           "type": "messages",
                           "method": "Any"
                        },
                        {
                           "type": "Console",
                           "method": "WriteLine"
                        },
                        {
                           "type": "Parallel",
                           "method": "ForEachAsync"
                        },
                        {
                           "type": "Console",
                           "method": "WriteLine"
                        },
                        {
                           "type": "receiver",
                           "method": "CloseAsync"
                        }
                     ]
                  },
                  "SendMessageToQueue": {
                     "type": "method",
                     "raw": "private async Task SendMessageToQueue(string message, string outputQueueName)\n        {\n            if (string.IsNullOrEmpty(message))\n            {\n                _logger.LogError(\"Message to send to the queue is null or empty.\");\n                return;\n            }\n\n            try\n            {\n                var busMessage = new ServiceBusMessage(message);\n                await sender.SendMessageAsync(busMessage);\n\n                Console.WriteLine($\"Message sent: {message}\");\n\n                _logger.LogInformation(\"Message sent to the queue: {message}\", message);\n            }\n            catch\n            {\n                throw;\n            }\n        }",
                     "dependencies": [
                        {
                           "type": "ILogger",
                           "method": "LogError"
                        },
                        {
                           "type": "ILogger",
                           "method": "LogInformation"
                        },
                        {
                           "type": "string",
                           "method": "IsNullOrEmpty"
                        },
                        {
                           "type": "sender",
                           "method": "SendMessageAsync"
                        },
                        {
                           "type": "Console",
                           "method": "WriteLine"
                        }
                     ]
                  }
               }
            }
         }
      },
      "EcadGlobopley.Data": {
         "Class1": {
            "Class1": {
               "type": "class",
               "members": {}
            }
         }
      },
      "TitularesObraMusical": {
         "Function1": {
            "Function1": {
               "type": "class",
               "members": {
                  "Run": {
                     "type": "method",
                     "raw": "public void Run([ServiceBusTrigger(\"myqueue\", Connection = \"\")]string myQueueItem, ILogger log)\n        {\n            log.LogInformation($\"C# ServiceBus queue trigger function processed message: {myQueueItem}\");\n        }",
                     "dependencies": [
                        {
                           "type": "log",
                           "method": "LogInformation"
                        }
                     ]
                  }
               }
            }
         }
      },
      "Worker": {
         "Worker": {
            "type": "class",
            "members": {}
         }
      },
      "WorkerCDC": {
         "Worker": {
            "Worker": {
               "type": "class",
               "members": {}
            }
         }
      }
   }
}